
Epaper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00003adc  00003b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  008001c2  008001c2  00003c32  2**0
                  ALLOC
  3 .debug_aranges 00000760  00000000  00000000  00003c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000011b1  00000000  00000000  00004392  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cd86  00000000  00000000  00005543  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f66  00000000  00000000  000122c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a153  00000000  00000000  0001522f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ba0  00000000  00000000  0001f384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004330  00000000  00000000  0001ff24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006f5d  00000000  00000000  00024254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a70  00000000  00000000  0002b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	DummyRTC_Count.Month = 1;
	DummyRTC_Count.Year++;
}

bool RTC_SetTimeDate(const TimeDate_t* NewTimeDate)
{
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       6:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
	}
}
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__vector_10>
      2c:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__vector_11>
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c1       	rjmp	.+708    	; 0x30a <__vector_17>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
      8e:	00 00       	nop
      90:	69 c0       	rjmp	.+210    	; 0x164 <__bad_interrupt>
      92:	00 00       	nop
      94:	67 c0       	rjmp	.+206    	; 0x164 <__bad_interrupt>
      96:	00 00       	nop
      98:	65 c0       	rjmp	.+202    	; 0x164 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	63 c0       	rjmp	.+198    	; 0x164 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	61 c0       	rjmp	.+194    	; 0x164 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c0       	rjmp	.+190    	; 0x164 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c0       	rjmp	.+186    	; 0x164 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ce:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

000000de <LanguageString>:
      de:	04 03 09 04                                         ....

000000e2 <ManufacturerString>:
      e2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      f2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000fc <ProductString>:
      fc:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
     10c:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     11c:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	da e0       	ldi	r29, 0x0A	; 10
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ec ed       	ldi	r30, 0xDC	; 220
     140:	fa e3       	ldi	r31, 0x3A	; 58
     142:	02 c0       	rjmp	.+4      	; 0x148 <.do_copy_data_start>

00000144 <.do_copy_data_loop>:
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0

00000148 <.do_copy_data_start>:
     148:	a2 3c       	cpi	r26, 0xC2	; 194
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <.do_copy_data_loop>

0000014e <__do_clear_bss>:
     14e:	14 e0       	ldi	r17, 0x04	; 4
     150:	a2 ec       	ldi	r26, 0xC2	; 194
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a8 30       	cpi	r26, 0x08	; 8
     15a:	b1 07       	cpc	r27, r17
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	89 d0       	rcall	.+274    	; 0x272 <main>
     160:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     166:	25 b1       	in	r18, 0x05	; 5
     168:	98 2f       	mov	r25, r24
     16a:	91 70       	andi	r25, 0x01	; 1
     16c:	90 95       	com	r25
     16e:	21 60       	ori	r18, 0x01	; 1
     170:	92 23       	and	r25, r18
     172:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     174:	2b b1       	in	r18, 0x0b	; 11
     176:	98 2f       	mov	r25, r24
     178:	90 72       	andi	r25, 0x20	; 32
     17a:	90 95       	com	r25
     17c:	20 62       	ori	r18, 0x20	; 32
     17e:	92 23       	and	r25, r18
     180:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     182:	98 b1       	in	r25, 0x08	; 8
     184:	80 78       	andi	r24, 0x80	; 128
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 2b       	or	r25, r24
     18a:	98 b9       	out	0x08, r25	; 8
			}
     18c:	08 95       	ret

0000018e <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     18e:	80 ea       	ldi	r24, 0xA0	; 160
}
     190:	ea cf       	rjmp	.-44     	; 0x166 <LEDs_SetAllLEDs>

00000192 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     192:	81 e0       	ldi	r24, 0x01	; 1
}
     194:	e8 cf       	rjmp	.-48     	; 0x166 <LEDs_SetAllLEDs>

00000196 <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	8c 01       	movw	r16, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	e3 df       	rcall	.-58     	; 0x166 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     1a0:	c8 01       	movw	r24, r16
     1a2:	f9 d4       	rcall	.+2546   	; 0xb96 <SCSI_DecodeSCSICommand>
     1a4:	18 2f       	mov	r17, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     1a6:	80 e2       	ldi	r24, 0x20	; 32
     1a8:	de df       	rcall	.-68     	; 0x166 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     1aa:	81 2f       	mov	r24, r17
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	08 95       	ret

000001b2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     1b2:	88 e3       	ldi	r24, 0x38	; 56
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <MS_Device_ProcessControlRequest>

000001ba <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ba:	88 e3       	ldi	r24, 0x38	; 56
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 92 1c 	call	0x3924	; 0x3924 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1c2:	80 fd       	sbrc	r24, 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <EVENT_USB_Device_ConfigurationChanged+0x10>
     1c6:	81 e8       	ldi	r24, 0x81	; 129
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <EVENT_USB_Device_ConfigurationChanged+0x12>
     1ca:	80 e2       	ldi	r24, 0x20	; 32
}
     1cc:	cc cf       	rjmp	.-104    	; 0x166 <LEDs_SetAllLEDs>

000001ce <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     1ce:	1f 93       	push	r17
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1d0:	84 b7       	in	r24, 0x34	; 52
     1d2:	87 7f       	andi	r24, 0xF7	; 247
     1d4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1d6:	18 e1       	ldi	r17, 0x18	; 24
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	10 93 60 00 	sts	0x0060, r17
     1e0:	10 92 60 00 	sts	0x0060, r1
     1e4:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	20 e8       	ldi	r18, 0x80	; 128
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	20 93 61 00 	sts	0x0061, r18
     1f4:	80 93 61 00 	sts	0x0061, r24
     1f8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     1fa:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     1fc:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     1fe:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     200:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     202:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     204:	47 98       	cbi	0x08, 7	; 8
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The appropriate SPI interface will be automatically configured.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     206:	24 9a       	sbi	0x04, 4	; 4
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     208:	2c 9a       	sbi	0x05, 4	; 5
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     20a:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     20c:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     20e:	84 b1       	in	r24, 0x04	; 4
     210:	86 60       	ori	r24, 0x06	; 6
     212:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     214:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     216:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     218:	8d b5       	in	r24, 0x2d	; 45
     21a:	81 60       	ori	r24, 0x01	; 1
     21c:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     21e:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     220:	8c e5       	ldi	r24, 0x5C	; 92
     222:	8c bd       	out	0x2c, r24	; 44
#endif

	/* Hardware Initialization */
	LEDs_Init();
	Dataflash_Init();
	USB_Init();
     224:	0e 94 c0 18 	call	0x3180	; 0x3180 <USB_Init>
	RTC_Init();
     228:	67 d6       	rcall	.+3278   	; 0xef8 <RTC_Init>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 cd 00 	sts	0x00CD, r25
     232:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     236:	86 e0       	ldi	r24, 0x06	; 6
     238:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     23c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     240:	10 93 c9 00 	sts	0x00C9, r17

				DDRD  |= (1 << 3);
     244:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     246:	5a 9a       	sbi	0x0b, 2	; 11
	Serial_Init(115200, false);
	
	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 256) / 2) - 1);
     248:	81 e1       	ldi	r24, 0x11	; 17
     24a:	9a e7       	ldi	r25, 0x7A	; 122
     24c:	90 93 89 00 	sts	0x0089, r25
     250:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12);
     254:	8c e0       	ldi	r24, 0x0C	; 12
     256:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	80 93 6f 00 	sts	0x006F, r24

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     260:	1f d2       	rcall	.+1086   	; 0x6a0 <DataflashManager_CheckDataflashOperation>
     262:	88 23       	and	r24, r24
     264:	19 f4       	brne	.+6      	; 0x26c <SetupHardware+0x9e>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     266:	81 e8       	ldi	r24, 0x81	; 129
     268:	7e df       	rcall	.-260    	; 0x166 <LEDs_SetAllLEDs>
     26a:	ff cf       	rjmp	.-2      	; 0x26a <SetupHardware+0x9c>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     26c:	f5 d1       	rcall	.+1002   	; 0x658 <DataflashManager_ResetDataflashProtections>
}
     26e:	1f 91       	pop	r17
     270:	08 95       	ret

00000272 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	c2 57       	subi	r28, 0x72	; 114
     284:	d0 40       	sbci	r29, 0x00	; 0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
								FIL fil;       /* File object */
								char line[82]; /* Line buffer */
								FRESULT errorCode;

	SetupHardware();
     290:	9e df       	rcall	.-196    	; 0x1ce <SetupHardware>
								Serial_SendString("Opening File \r \n");
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <Serial_SendString>
								
								errorCode = f_mount(0, &DiskFATState);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	62 ec       	ldi	r22, 0xC2	; 194
     29e:	71 e0       	ldi	r23, 0x01	; 1
     2a0:	48 d7       	rcall	.+3728   	; 0x1132 <f_mount>
								if (errorCode == FR_OK)
     2a2:	88 23       	and	r24, r24
     2a4:	21 f4       	brne	.+8      	; 0x2ae <main+0x3c>
									Serial_SendString("Mounted  \r \n");
     2a6:	81 e1       	ldi	r24, 0x11	; 17
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <Serial_SendString>

									
								errorCode = f_open(&fil, "jaycon.xbm", FA_READ);
     2ae:	ce 01       	movw	r24, r28
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	6e e1       	ldi	r22, 0x1E	; 30
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	0e 94 37 10 	call	0x206e	; 0x206e <f_open>
								if (errorCode == FR_OK)
     2bc:	88 23       	and	r24, r24
     2be:	49 f4       	brne	.+18     	; 0x2d2 <main+0x60>
									Serial_SendString("File Found \r \n");
     2c0:	89 e2       	ldi	r24, 0x29	; 41
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <Serial_SendString>
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <main+0x60>
									
								while (f_gets(line, sizeof line, &fil))
									Serial_SendString(line);
     2ca:	c8 01       	movw	r24, r16
     2cc:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <Serial_SendString>
     2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <main+0x6e>
									
								errorCode = f_open(&fil, "jaycon.xbm", FA_READ);
								if (errorCode == FR_OK)
									Serial_SendString("File Found \r \n");
									
								while (f_gets(line, sizeof line, &fil))
     2d2:	8e 01       	movw	r16, r28
     2d4:	0f 5d       	subi	r16, 0xDF	; 223
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	7e 01       	movw	r14, r28
     2da:	08 94       	sec
     2dc:	e1 1c       	adc	r14, r1
     2de:	f1 1c       	adc	r15, r1
     2e0:	c8 01       	movw	r24, r16
     2e2:	62 e5       	ldi	r22, 0x52	; 82
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	a7 01       	movw	r20, r14
     2e8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <f_gets>
     2ec:	89 2b       	or	r24, r25
     2ee:	69 f7       	brne	.-38     	; 0x2ca <main+0x58>
									Serial_SendString(line);

								/* Close the file */
								f_close(&fil);
     2f0:	c7 01       	movw	r24, r14
     2f2:	0e 94 2c 10 	call	0x2058	; 0x2058 <f_close>
								

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	36 df       	rcall	.-404    	; 0x166 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2fa:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     2fc:	88 e3       	ldi	r24, 0x38	; 56
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 66 1b 	call	0x36cc	; 0x36cc <MS_Device_USBTask>
		USB_USBTask();
     304:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <USB_USBTask>
     308:	f9 cf       	rjmp	.-14     	; 0x2fc <main+0x8a>

0000030a <__vector_17>:
/** FAT Fs structure to hold the internal state of the FAT driver for the Dataflash contents. */
static FATFS DiskFATState;

/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
	/* Signal a 500ms tick has elapsed to the RTC */
	RTC_Tick500ms();
     32c:	f3 d5       	rcall	.+3046   	; 0xf14 <RTC_Tick500ms>
	//Serial_SendString("500ms Tick \r\n");
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     350:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     352:	92 30       	cpi	r25, 0x02	; 2
     354:	49 f0       	breq	.+18     	; 0x368 <CALLBACK_USB_GetDescriptor+0x18>
     356:	93 30       	cpi	r25, 0x03	; 3
     358:	61 f0       	breq	.+24     	; 0x372 <CALLBACK_USB_GetDescriptor+0x22>
     35a:	91 30       	cpi	r25, 0x01	; 1
     35c:	f9 f4       	brne	.+62     	; 0x39c <CALLBACK_USB_GetDescriptor+0x4c>
     35e:	ec ea       	ldi	r30, 0xAC	; 172
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	22 e1       	ldi	r18, 0x12	; 18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	1e c0       	rjmp	.+60     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x54>
     368:	ee eb       	ldi	r30, 0xBE	; 190
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	20 e2       	ldi	r18, 0x20	; 32
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	19 c0       	rjmp	.+50     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	49 f0       	breq	.+18     	; 0x388 <CALLBACK_USB_GetDescriptor+0x38>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	18 f0       	brcs	.+6      	; 0x380 <CALLBACK_USB_GetDescriptor+0x30>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	79 f4       	brne	.+30     	; 0x39c <CALLBACK_USB_GetDescriptor+0x4c>
     37e:	08 c0       	rjmp	.+16     	; 0x390 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     380:	ee ed       	ldi	r30, 0xDE	; 222
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	84 91       	lpm	r24, Z+
     386:	07 c0       	rjmp	.+14     	; 0x396 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     388:	e2 ee       	ldi	r30, 0xE2	; 226
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	84 91       	lpm	r24, Z+
     38e:	03 c0       	rjmp	.+6      	; 0x396 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     390:	ec ef       	ldi	r30, 0xFC	; 252
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	84 91       	lpm	r24, Z+
     396:	28 2f       	mov	r18, r24
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x54>
     39c:	e0 e0       	ldi	r30, 0x00	; 0
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3a4:	ed 93       	st	X+, r30
     3a6:	fc 93       	st	X, r31
	return Size;
}
     3a8:	c9 01       	movw	r24, r18
     3aa:	08 95       	ret

000003ac <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3ac:	2c 9a       	sbi	0x05, 4	; 5
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     3ae:	80 50       	subi	r24, 0x00	; 0
     3b0:	90 41       	sbci	r25, 0x10	; 16
     3b2:	08 f4       	brcc	.+2      	; 0x3b6 <Dataflash_SelectChipFromPage+0xa>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3b4:	2c 98       	cbi	0x05, 4	; 5
     3b6:	08 95       	ret

000003b8 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3b8:	95 b1       	in	r25, 0x05	; 5
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3ba:	2c 9a       	sbi	0x05, 4	; 5
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     3bc:	85 b1       	in	r24, 0x05	; 5
     3be:	9f 6e       	ori	r25, 0xEF	; 239
     3c0:	80 61       	ori	r24, 0x10	; 16
     3c2:	98 23       	and	r25, r24
     3c4:	95 b9       	out	0x05, r25	; 5
     3c6:	08 95       	ret

000003c8 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     3c8:	f7 df       	rcall	.-18     	; 0x3b8 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3ca:	87 ed       	ldi	r24, 0xD7	; 215
     3cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ce:	0d b4       	in	r0, 0x2d	; 45
     3d0:	07 fe       	sbrs	r0, 7
     3d2:	fd cf       	rjmp	.-6      	; 0x3ce <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3d6:	0d b4       	in	r0, 0x2d	; 45
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3dc:	0e b4       	in	r0, 0x2e	; 46
     3de:	07 fe       	sbrs	r0, 7
     3e0:	f9 cf       	rjmp	.-14     	; 0x3d4 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     3e2:	ea cf       	rjmp	.-44     	; 0x3b8 <Dataflash_ToggleSelectedChipCS>

000003e4 <Dataflash_SendAddressBytes>:
			 *  \param[in] PageAddress  Page address within the selected dataflash IC
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
     3e4:	9c 01       	movw	r18, r24
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif

				Dataflash_SendByte(PageAddress >> 5);
     3e6:	35 e0       	ldi	r19, 0x05	; 5
     3e8:	96 95       	lsr	r25
     3ea:	87 95       	ror	r24
     3ec:	3a 95       	dec	r19
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <Dataflash_SendAddressBytes+0x4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3f2:	0d b4       	in	r0, 0x2d	; 45
     3f4:	07 fe       	sbrs	r0, 7
     3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <Dataflash_SendAddressBytes+0xe>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3f8:	82 2f       	mov	r24, r18
     3fa:	88 0f       	add	r24, r24
     3fc:	88 0f       	add	r24, r24
     3fe:	88 0f       	add	r24, r24
     400:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     402:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     404:	0d b4       	in	r0, 0x2d	; 45
     406:	07 fe       	sbrs	r0, 7
     408:	fd cf       	rjmp	.-6      	; 0x404 <Dataflash_SendAddressBytes+0x20>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     40a:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     40c:	0d b4       	in	r0, 0x2d	; 45
     40e:	07 fe       	sbrs	r0, 7
     410:	fd cf       	rjmp	.-6      	; 0x40c <Dataflash_SendAddressBytes+0x28>
				Dataflash_SendByte(BufferByte);
			}
     412:	08 95       	ret

00000414 <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     414:	8f 92       	push	r8
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	5a 01       	movw	r10, r20
     42e:	69 01       	movw	r12, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     430:	f9 e0       	ldi	r31, 0x09	; 9
     432:	66 0f       	add	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	88 1f       	adc	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	fa 95       	dec	r31
     43c:	d1 f7       	brne	.-12     	; 0x432 <DataflashManager_WriteBlocks_RAM+0x1e>
     43e:	9b 01       	movw	r18, r22
     440:	ac 01       	movw	r20, r24
     442:	e9 e0       	ldi	r30, 0x09	; 9
     444:	56 95       	lsr	r21
     446:	47 95       	ror	r20
     448:	37 95       	ror	r19
     44a:	27 95       	ror	r18
     44c:	ea 95       	dec	r30
     44e:	d1 f7       	brne	.-12     	; 0x444 <DataflashManager_WriteBlocks_RAM+0x30>
     450:	79 01       	movw	r14, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     452:	eb 01       	movw	r28, r22
     454:	d1 70       	andi	r29, 0x01	; 1
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     456:	c9 01       	movw	r24, r18
     458:	a9 df       	rcall	.-174    	; 0x3ac <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45a:	84 e8       	ldi	r24, 0x84	; 132
     45c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     45e:	0d b4       	in	r0, 0x2d	; 45
     460:	07 fe       	sbrs	r0, 7
     462:	fd cf       	rjmp	.-6      	; 0x45e <DataflashManager_WriteBlocks_RAM+0x4a>
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     464:	ce 01       	movw	r24, r28
     466:	44 e0       	ldi	r20, 0x04	; 4
     468:	96 95       	lsr	r25
     46a:	87 95       	ror	r24
     46c:	4a 95       	dec	r20
     46e:	e1 f7       	brne	.-8      	; 0x468 <DataflashManager_WriteBlocks_RAM+0x54>
     470:	18 2f       	mov	r17, r24
	Dataflash_WaitWhileBusy();
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	be 01       	movw	r22, r28
     478:	b5 df       	rcall	.-150    	; 0x3e4 <Dataflash_SendAddressBytes>
     47a:	00 e0       	ldi	r16, 0x00	; 0
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     47c:	88 24       	eor	r8, r8
     47e:	83 94       	inc	r8
     480:	40 c0       	rjmp	.+128    	; 0x502 <DataflashManager_WriteBlocks_RAM+0xee>

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     482:	e6 01       	movw	r28, r12
     484:	99 24       	eor	r9, r9

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     486:	10 32       	cpi	r17, 0x20	; 32
     488:	29 f5       	brne	.+74     	; 0x4d4 <DataflashManager_WriteBlocks_RAM+0xc0>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     48a:	9e df       	rcall	.-196    	; 0x3c8 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     48c:	00 23       	and	r16, r16
     48e:	11 f4       	brne	.+4      	; 0x494 <DataflashManager_WriteBlocks_RAM+0x80>
     490:	83 e8       	ldi	r24, 0x83	; 131
     492:	01 c0       	rjmp	.+2      	; 0x496 <DataflashManager_WriteBlocks_RAM+0x82>
     494:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     496:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     498:	0d b4       	in	r0, 0x2d	; 45
     49a:	07 fe       	sbrs	r0, 7
     49c:	fd cf       	rjmp	.-6      	; 0x498 <DataflashManager_WriteBlocks_RAM+0x84>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     49e:	c7 01       	movw	r24, r14
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	9f df       	rcall	.-194    	; 0x3e4 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     4a6:	08 94       	sec
     4a8:	e1 1c       	adc	r14, r1
     4aa:	f1 1c       	adc	r15, r1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     4ac:	2c 9b       	sbis	0x05, 4	; 5
				  UsingSecondBuffer = !(UsingSecondBuffer);
     4ae:	08 25       	eor	r16, r8

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     4b0:	c7 01       	movw	r24, r14
     4b2:	7c df       	rcall	.-264    	; 0x3ac <Dataflash_SelectChipFromPage>
					Dataflash_WaitWhileBusy();
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     4b4:	81 df       	rcall	.-254    	; 0x3b8 <Dataflash_ToggleSelectedChipCS>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     4b6:	00 23       	and	r16, r16
     4b8:	11 f4       	brne	.+4      	; 0x4be <DataflashManager_WriteBlocks_RAM+0xaa>
     4ba:	84 e8       	ldi	r24, 0x84	; 132
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <DataflashManager_WriteBlocks_RAM+0xac>
     4be:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4c2:	0d b4       	in	r0, 0x2d	; 45
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <DataflashManager_WriteBlocks_RAM+0xae>
				Dataflash_SendAddressBytes(0, 0);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	89 df       	rcall	.-238    	; 0x3e4 <Dataflash_SendAddressBytes>
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	fe 01       	movw	r30, r28
     4d6:	90 e0       	ldi	r25, 0x00	; 0
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     4d8:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <DataflashManager_WriteBlocks_RAM+0xc8>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     4e2:	9f 5f       	subi	r25, 0xFF	; 255
     4e4:	90 31       	cpi	r25, 0x10	; 16
     4e6:	c1 f7       	brne	.-16     	; 0x4d8 <DataflashManager_WriteBlocks_RAM+0xc4>
     4e8:	60 96       	adiw	r28, 0x10	; 16
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     4ea:	1f 5f       	subi	r17, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     4ec:	93 94       	inc	r9
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	98 16       	cp	r9, r24
     4f2:	49 f6       	brne	.-110    	; 0x486 <DataflashManager_WriteBlocks_RAM+0x72>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	c8 0e       	add	r12, r24
     4fa:	d9 1e       	adc	r13, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     4fc:	08 94       	sec
     4fe:	a1 08       	sbc	r10, r1
     500:	b1 08       	sbc	r11, r1

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     502:	a1 14       	cp	r10, r1
     504:	b1 04       	cpc	r11, r1
     506:	09 f0       	breq	.+2      	; 0x50a <DataflashManager_WriteBlocks_RAM+0xf6>
     508:	bc cf       	rjmp	.-136    	; 0x482 <DataflashManager_WriteBlocks_RAM+0x6e>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     50a:	5e df       	rcall	.-324    	; 0x3c8 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     50c:	00 23       	and	r16, r16
     50e:	11 f4       	brne	.+4      	; 0x514 <DataflashManager_WriteBlocks_RAM+0x100>
     510:	83 e8       	ldi	r24, 0x83	; 131
     512:	01 c0       	rjmp	.+2      	; 0x516 <DataflashManager_WriteBlocks_RAM+0x102>
     514:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     516:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <DataflashManager_WriteBlocks_RAM+0x104>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     51e:	c7 01       	movw	r24, r14
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	5f df       	rcall	.-322    	; 0x3e4 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     526:	50 df       	rcall	.-352    	; 0x3c8 <Dataflash_WaitWhileBusy>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     528:	2c 9a       	sbi	0x05, 4	; 5

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	08 95       	ret

00000544 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	6a 01       	movw	r12, r20
     55a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     55c:	09 e0       	ldi	r16, 0x09	; 9
     55e:	66 0f       	add	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	88 1f       	adc	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	0a 95       	dec	r16
     568:	d1 f7       	brne	.-12     	; 0x55e <DataflashManager_ReadBlocks_RAM+0x1a>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	19 e0       	ldi	r17, 0x09	; 9
     570:	56 95       	lsr	r21
     572:	47 95       	ror	r20
     574:	37 95       	ror	r19
     576:	27 95       	ror	r18
     578:	1a 95       	dec	r17
     57a:	d1 f7       	brne	.-12     	; 0x570 <DataflashManager_ReadBlocks_RAM+0x2c>
     57c:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     57e:	eb 01       	movw	r28, r22
     580:	d1 70       	andi	r29, 0x01	; 1
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     582:	c9 01       	movw	r24, r18
     584:	13 df       	rcall	.-474    	; 0x3ac <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     586:	82 ed       	ldi	r24, 0xD2	; 210
     588:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     58a:	0d b4       	in	r0, 0x2d	; 45
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <DataflashManager_ReadBlocks_RAM+0x46>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     590:	c8 01       	movw	r24, r16
     592:	be 01       	movw	r22, r28
     594:	27 df       	rcall	.-434    	; 0x3e4 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     596:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     598:	0d b4       	in	r0, 0x2d	; 45
     59a:	07 fe       	sbrs	r0, 7
     59c:	fd cf       	rjmp	.-6      	; 0x598 <DataflashManager_ReadBlocks_RAM+0x54>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     59e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a0:	0d b4       	in	r0, 0x2d	; 45
     5a2:	07 fe       	sbrs	r0, 7
     5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <DataflashManager_ReadBlocks_RAM+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a8:	0d b4       	in	r0, 0x2d	; 45
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <DataflashManager_ReadBlocks_RAM+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5b0:	0d b4       	in	r0, 0x2d	; 45
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <DataflashManager_ReadBlocks_RAM+0x6c>
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5b6:	b4 e0       	ldi	r27, 0x04	; 4
     5b8:	d6 95       	lsr	r29
     5ba:	c7 95       	ror	r28
     5bc:	ba 95       	dec	r27
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <DataflashManager_ReadBlocks_RAM+0x74>
     5c0:	6c 2f       	mov	r22, r28
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c2:	a2 ed       	ldi	r26, 0xD2	; 210
     5c4:	aa 2e       	mov	r10, r26
     5c6:	39 c0       	rjmp	.+114    	; 0x63a <DataflashManager_ReadBlocks_RAM+0xf6>
     5c8:	e7 01       	movw	r28, r14
     5ca:	bb 24       	eor	r11, r11

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     5cc:	60 32       	cpi	r22, 0x20	; 32
     5ce:	e9 f4       	brne	.+58     	; 0x60a <DataflashManager_ReadBlocks_RAM+0xc6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     5d0:	0f 5f       	subi	r16, 0xFF	; 255
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     5d4:	c8 01       	movw	r24, r16
     5d6:	ea de       	rcall	.-556    	; 0x3ac <Dataflash_SelectChipFromPage>
     5d8:	ae bc       	out	0x2e, r10	; 46
				while (!(SPSR & (1 << SPIF)));
     5da:	0d b4       	in	r0, 0x2d	; 45
     5dc:	07 fe       	sbrs	r0, 7
     5de:	fd cf       	rjmp	.-6      	; 0x5da <DataflashManager_ReadBlocks_RAM+0x96>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     5e0:	c8 01       	movw	r24, r16
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	fe de       	rcall	.-516    	; 0x3e4 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5ea:	0d b4       	in	r0, 0x2d	; 45
     5ec:	07 fe       	sbrs	r0, 7
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <DataflashManager_ReadBlocks_RAM+0xa6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f2:	0d b4       	in	r0, 0x2d	; 45
     5f4:	07 fe       	sbrs	r0, 7
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <DataflashManager_ReadBlocks_RAM+0xae>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <DataflashManager_ReadBlocks_RAM+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     600:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     602:	0d b4       	in	r0, 0x2d	; 45
     604:	07 fe       	sbrs	r0, 7
     606:	fd cf       	rjmp	.-6      	; 0x602 <DataflashManager_ReadBlocks_RAM+0xbe>
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	fe 01       	movw	r30, r28
     60c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     60e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     610:	0d b4       	in	r0, 0x2d	; 45
     612:	07 fe       	sbrs	r0, 7
     614:	fd cf       	rjmp	.-6      	; 0x610 <DataflashManager_ReadBlocks_RAM+0xcc>
				return SPDR;
     616:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     618:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     61a:	9f 5f       	subi	r25, 0xFF	; 255
     61c:	90 31       	cpi	r25, 0x10	; 16
     61e:	b9 f7       	brne	.-18     	; 0x60e <DataflashManager_ReadBlocks_RAM+0xca>
     620:	60 96       	adiw	r28, 0x10	; 16
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     622:	6f 5f       	subi	r22, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     624:	b3 94       	inc	r11
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	b8 16       	cp	r11, r24
     62a:	81 f6       	brne	.-96     	; 0x5cc <DataflashManager_ReadBlocks_RAM+0x88>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	e8 0e       	add	r14, r24
     632:	f9 1e       	adc	r15, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     634:	08 94       	sec
     636:	c1 08       	sbc	r12, r1
     638:	d1 08       	sbc	r13, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     63a:	c1 14       	cp	r12, r1
     63c:	d1 04       	cpc	r13, r1
     63e:	21 f6       	brne	.-120    	; 0x5c8 <DataflashManager_ReadBlocks_RAM+0x84>
     640:	2c 9a       	sbi	0x05, 4	; 5
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	08 95       	ret

00000658 <DataflashManager_ResetDataflashProtections>:
     658:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65a:	87 ed       	ldi	r24, 0xD7	; 215
     65c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ResetDataflashProtections+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     664:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_ResetDataflashProtections+0xe>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     66c:	0e b4       	in	r0, 0x2e	; 46
     66e:	01 fe       	sbrs	r0, 1
     670:	15 c0       	rjmp	.+42     	; 0x69c <DataflashManager_ResetDataflashProtections+0x44>
	{
		Dataflash_ToggleSelectedChipCS();
     672:	a2 de       	rcall	.-700    	; 0x3b8 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     674:	8d e3       	ldi	r24, 0x3D	; 61
     676:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     678:	0d b4       	in	r0, 0x2d	; 45
     67a:	07 fe       	sbrs	r0, 7
     67c:	fd cf       	rjmp	.-6      	; 0x678 <DataflashManager_ResetDataflashProtections+0x20>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     67e:	8a e2       	ldi	r24, 0x2A	; 42
     680:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <DataflashManager_ResetDataflashProtections+0x2a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     688:	8f e7       	ldi	r24, 0x7F	; 127
     68a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     692:	8a e9       	ldi	r24, 0x9A	; 154
     694:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <DataflashManager_ResetDataflashProtections+0x3e>
     69c:	2c 9a       	sbi	0x05, 4	; 5
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     69e:	08 95       	ret

000006a0 <DataflashManager_CheckDataflashOperation>:
     6a0:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a2:	8f e9       	ldi	r24, 0x9F	; 159
     6a4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6a6:	0d b4       	in	r0, 0x2d	; 45
     6a8:	07 fe       	sbrs	r0, 7
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <DataflashManager_CheckDataflashOperation+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ac:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_CheckDataflashOperation+0xe>
				return SPDR;
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	2c 9a       	sbi	0x05, 4	; 5
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	8f 31       	cpi	r24, 0x1F	; 31
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <DataflashManager_CheckDataflashOperation+0x20>
     6be:	91 e0       	ldi	r25, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     6c0:	89 2f       	mov	r24, r25
     6c2:	08 95       	ret

000006c4 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	0f 92       	push	r0
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	5c 01       	movw	r10, r24
     6e0:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     6e2:	e9 e0       	ldi	r30, 0x09	; 9
     6e4:	44 0f       	add	r20, r20
     6e6:	55 1f       	adc	r21, r21
     6e8:	66 1f       	adc	r22, r22
     6ea:	77 1f       	adc	r23, r23
     6ec:	ea 95       	dec	r30
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <DataflashManager_ReadBlocks+0x20>
     6f0:	db 01       	movw	r26, r22
     6f2:	ca 01       	movw	r24, r20
     6f4:	39 e0       	ldi	r19, 0x09	; 9
     6f6:	b6 95       	lsr	r27
     6f8:	a7 95       	ror	r26
     6fa:	97 95       	ror	r25
     6fc:	87 95       	ror	r24
     6fe:	3a 95       	dec	r19
     700:	d1 f7       	brne	.-12     	; 0x6f6 <DataflashManager_ReadBlocks+0x32>
     702:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     704:	2f ef       	ldi	r18, 0xFF	; 255
     706:	c2 2e       	mov	r12, r18
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	d2 2e       	mov	r13, r18
     70c:	c4 22       	and	r12, r20
     70e:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     710:	4d de       	rcall	.-870    	; 0x3ac <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     712:	82 ed       	ldi	r24, 0xD2	; 210
     714:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     71c:	c8 01       	movw	r24, r16
     71e:	b6 01       	movw	r22, r12
     720:	61 de       	rcall	.-830    	; 0x3e4 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     722:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     72a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
     730:	fd cf       	rjmp	.-6      	; 0x72c <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     732:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     73c:	0d b4       	in	r0, 0x2d	; 45
     73e:	07 fe       	sbrs	r0, 7
     740:	fd cf       	rjmp	.-6      	; 0x73c <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     742:	0e 94 4a 18 	call	0x3094	; 0x3094 <Endpoint_WaitUntilReady>
     746:	88 23       	and	r24, r24
     748:	09 f0       	breq	.+2      	; 0x74c <DataflashManager_ReadBlocks+0x88>
     74a:	c4 c0       	rjmp	.+392    	; 0x8d4 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	d6 94       	lsr	r13
     750:	c7 94       	ror	r12
     752:	9a 95       	dec	r25
     754:	e1 f7       	brne	.-8      	; 0x74e <DataflashManager_ReadBlocks+0x8a>
     756:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     758:	82 ed       	ldi	r24, 0xD2	; 210
     75a:	c8 2e       	mov	r12, r24
     75c:	ad c0       	rjmp	.+346    	; 0x8b8 <DataflashManager_ReadBlocks+0x1f4>
     75e:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     760:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     764:	85 fd       	sbrc	r24, 5
     766:	0c c0       	rjmp	.+24     	; 0x780 <DataflashManager_ReadBlocks+0xbc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     768:	80 91 e8 00 	lds	r24, 0x00E8
     76c:	8e 77       	andi	r24, 0x7E	; 126
     76e:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     772:	99 83       	std	Y+1, r25	; 0x01
     774:	0e 94 4a 18 	call	0x3094	; 0x3094 <Endpoint_WaitUntilReady>
     778:	99 81       	ldd	r25, Y+1	; 0x01
     77a:	88 23       	and	r24, r24
     77c:	09 f0       	breq	.+2      	; 0x780 <DataflashManager_ReadBlocks+0xbc>
     77e:	aa c0       	rjmp	.+340    	; 0x8d4 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     780:	90 32       	cpi	r25, 0x20	; 32
     782:	e9 f4       	brne	.+58     	; 0x7be <DataflashManager_ReadBlocks+0xfa>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     784:	0f 5f       	subi	r16, 0xFF	; 255
     786:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     788:	c8 01       	movw	r24, r16
     78a:	10 de       	rcall	.-992    	; 0x3ac <Dataflash_SelectChipFromPage>
     78c:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     78e:	0d b4       	in	r0, 0x2d	; 45
     790:	07 fe       	sbrs	r0, 7
     792:	fd cf       	rjmp	.-6      	; 0x78e <DataflashManager_ReadBlocks+0xca>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     794:	c8 01       	movw	r24, r16
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	24 de       	rcall	.-952    	; 0x3e4 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     79c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     79e:	0d b4       	in	r0, 0x2d	; 45
     7a0:	07 fe       	sbrs	r0, 7
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7a6:	0d b4       	in	r0, 0x2d	; 45
     7a8:	07 fe       	sbrs	r0, 7
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ac:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <DataflashManager_ReadBlocks+0xea>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <DataflashManager_ReadBlocks+0xf2>
     7bc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c0:	0d b4       	in	r0, 0x2d	; 45
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <DataflashManager_ReadBlocks+0xfc>
				return SPDR;
     7c6:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_ReadBlocks+0x10a>
				return SPDR;
     7d4:	8e b5       	in	r24, 0x2e	; 46
     7d6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <DataflashManager_ReadBlocks+0x118>
				return SPDR;
     7e2:	8e b5       	in	r24, 0x2e	; 46
     7e4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ea:	0d b4       	in	r0, 0x2d	; 45
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <DataflashManager_ReadBlocks+0x126>
				return SPDR;
     7f0:	8e b5       	in	r24, 0x2e	; 46
     7f2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_ReadBlocks+0x134>
				return SPDR;
     7fe:	8e b5       	in	r24, 0x2e	; 46
     800:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     804:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ReadBlocks+0x142>
				return SPDR;
     80c:	8e b5       	in	r24, 0x2e	; 46
     80e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     812:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     814:	0d b4       	in	r0, 0x2d	; 45
     816:	07 fe       	sbrs	r0, 7
     818:	fd cf       	rjmp	.-6      	; 0x814 <DataflashManager_ReadBlocks+0x150>
				return SPDR;
     81a:	8e b5       	in	r24, 0x2e	; 46
     81c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     820:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     822:	0d b4       	in	r0, 0x2d	; 45
     824:	07 fe       	sbrs	r0, 7
     826:	fd cf       	rjmp	.-6      	; 0x822 <DataflashManager_ReadBlocks+0x15e>
				return SPDR;
     828:	8e b5       	in	r24, 0x2e	; 46
     82a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     82e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     830:	0d b4       	in	r0, 0x2d	; 45
     832:	07 fe       	sbrs	r0, 7
     834:	fd cf       	rjmp	.-6      	; 0x830 <DataflashManager_ReadBlocks+0x16c>
				return SPDR;
     836:	8e b5       	in	r24, 0x2e	; 46
     838:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     83c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     83e:	0d b4       	in	r0, 0x2d	; 45
     840:	07 fe       	sbrs	r0, 7
     842:	fd cf       	rjmp	.-6      	; 0x83e <DataflashManager_ReadBlocks+0x17a>
				return SPDR;
     844:	8e b5       	in	r24, 0x2e	; 46
     846:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     84a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     84c:	0d b4       	in	r0, 0x2d	; 45
     84e:	07 fe       	sbrs	r0, 7
     850:	fd cf       	rjmp	.-6      	; 0x84c <DataflashManager_ReadBlocks+0x188>
				return SPDR;
     852:	8e b5       	in	r24, 0x2e	; 46
     854:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     858:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     85a:	0d b4       	in	r0, 0x2d	; 45
     85c:	07 fe       	sbrs	r0, 7
     85e:	fd cf       	rjmp	.-6      	; 0x85a <DataflashManager_ReadBlocks+0x196>
				return SPDR;
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     866:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
     86c:	fd cf       	rjmp	.-6      	; 0x868 <DataflashManager_ReadBlocks+0x1a4>
				return SPDR;
     86e:	8e b5       	in	r24, 0x2e	; 46
     870:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     874:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     876:	0d b4       	in	r0, 0x2d	; 45
     878:	07 fe       	sbrs	r0, 7
     87a:	fd cf       	rjmp	.-6      	; 0x876 <DataflashManager_ReadBlocks+0x1b2>
				return SPDR;
     87c:	8e b5       	in	r24, 0x2e	; 46
     87e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     882:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     884:	0d b4       	in	r0, 0x2d	; 45
     886:	07 fe       	sbrs	r0, 7
     888:	fd cf       	rjmp	.-6      	; 0x884 <DataflashManager_ReadBlocks+0x1c0>
				return SPDR;
     88a:	8e b5       	in	r24, 0x2e	; 46
     88c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     890:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <DataflashManager_ReadBlocks+0x1ce>
				return SPDR;
     898:	8e b5       	in	r24, 0x2e	; 46
     89a:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     89e:	f5 01       	movw	r30, r10
     8a0:	80 ad       	ldd	r24, Z+56	; 0x38
     8a2:	88 23       	and	r24, r24
     8a4:	b9 f4       	brne	.+46     	; 0x8d4 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     8a6:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     8a8:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     8aa:	f0 e2       	ldi	r31, 0x20	; 32
     8ac:	df 16       	cp	r13, r31
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <DataflashManager_ReadBlocks+0x1ee>
     8b0:	57 cf       	rjmp	.-338    	; 0x760 <DataflashManager_ReadBlocks+0x9c>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     8b2:	08 94       	sec
     8b4:	e1 08       	sbc	r14, r1
     8b6:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     8b8:	e1 14       	cp	r14, r1
     8ba:	f1 04       	cpc	r15, r1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <DataflashManager_ReadBlocks+0x1fc>
     8be:	4f cf       	rjmp	.-354    	; 0x75e <DataflashManager_ReadBlocks+0x9a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8c0:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     8c4:	85 fd       	sbrc	r24, 5
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <DataflashManager_ReadBlocks+0x20e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c8:	80 91 e8 00 	lds	r24, 0x00E8
     8cc:	8e 77       	andi	r24, 0x7E	; 126
     8ce:	80 93 e8 00 	sts	0x00E8, r24
     8d2:	2c 9a       	sbi	0x05, 4	; 5
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     8d4:	0f 90       	pop	r0
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     8ec:	9f 92       	push	r9
     8ee:	af 92       	push	r10
     8f0:	bf 92       	push	r11
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	0f 92       	push	r0
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	5c 01       	movw	r10, r24
     90a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     90c:	09 e0       	ldi	r16, 0x09	; 9
     90e:	44 0f       	add	r20, r20
     910:	55 1f       	adc	r21, r21
     912:	66 1f       	adc	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	0a 95       	dec	r16
     918:	d1 f7       	brne	.-12     	; 0x90e <DataflashManager_WriteBlocks+0x22>
     91a:	db 01       	movw	r26, r22
     91c:	ca 01       	movw	r24, r20
     91e:	19 e0       	ldi	r17, 0x09	; 9
     920:	b6 95       	lsr	r27
     922:	a7 95       	ror	r26
     924:	97 95       	ror	r25
     926:	87 95       	ror	r24
     928:	1a 95       	dec	r17
     92a:	d1 f7       	brne	.-12     	; 0x920 <DataflashManager_WriteBlocks+0x34>
     92c:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     92e:	af ef       	ldi	r26, 0xFF	; 255
     930:	ca 2e       	mov	r12, r26
     932:	a1 e0       	ldi	r26, 0x01	; 1
     934:	da 2e       	mov	r13, r26
     936:	c4 22       	and	r12, r20
     938:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     93a:	38 dd       	rcall	.-1424   	; 0x3ac <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93c:	84 e8       	ldi	r24, 0x84	; 132
     93e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <DataflashManager_WriteBlocks+0x54>
	Dataflash_WaitWhileBusy();
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	b6 01       	movw	r22, r12
     94c:	4b dd       	rcall	.-1386   	; 0x3e4 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     94e:	0e 94 4a 18 	call	0x3094	; 0x3094 <Endpoint_WaitUntilReady>
     952:	88 23       	and	r24, r24
     954:	09 f0       	breq	.+2      	; 0x958 <DataflashManager_WriteBlocks+0x6c>
     956:	ca c0       	rjmp	.+404    	; 0xaec <DataflashManager_WriteBlocks+0x200>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	d6 94       	lsr	r13
     95c:	c7 94       	ror	r12
     95e:	fa 95       	dec	r31
     960:	e1 f7       	brne	.-8      	; 0x95a <DataflashManager_WriteBlocks+0x6e>
     962:	9c 2d       	mov	r25, r12
     964:	dd 24       	eor	r13, r13
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     966:	99 24       	eor	r9, r9
     968:	93 94       	inc	r9
     96a:	a3 c0       	rjmp	.+326    	; 0xab2 <DataflashManager_WriteBlocks+0x1c6>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     96c:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     96e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     972:	85 fd       	sbrc	r24, 5
     974:	0c c0       	rjmp	.+24     	; 0x98e <DataflashManager_WriteBlocks+0xa2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     976:	80 91 e8 00 	lds	r24, 0x00E8
     97a:	8b 77       	andi	r24, 0x7B	; 123
     97c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     980:	99 83       	std	Y+1, r25	; 0x01
     982:	0e 94 4a 18 	call	0x3094	; 0x3094 <Endpoint_WaitUntilReady>
     986:	99 81       	ldd	r25, Y+1	; 0x01
     988:	88 23       	and	r24, r24
     98a:	09 f0       	breq	.+2      	; 0x98e <DataflashManager_WriteBlocks+0xa2>
     98c:	af c0       	rjmp	.+350    	; 0xaec <DataflashManager_WriteBlocks+0x200>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     98e:	90 32       	cpi	r25, 0x20	; 32
     990:	19 f5       	brne	.+70     	; 0x9d8 <DataflashManager_WriteBlocks+0xec>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     992:	1a dd       	rcall	.-1484   	; 0x3c8 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     994:	dd 20       	and	r13, r13
     996:	11 f4       	brne	.+4      	; 0x99c <DataflashManager_WriteBlocks+0xb0>
     998:	83 e8       	ldi	r24, 0x83	; 131
     99a:	01 c0       	rjmp	.+2      	; 0x99e <DataflashManager_WriteBlocks+0xb2>
     99c:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     99e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9a0:	0d b4       	in	r0, 0x2d	; 45
     9a2:	07 fe       	sbrs	r0, 7
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <DataflashManager_WriteBlocks+0xb4>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     9a6:	c8 01       	movw	r24, r16
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	1b dd       	rcall	.-1482   	; 0x3e4 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     9ae:	0f 5f       	subi	r16, 0xFF	; 255
     9b0:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     9b2:	2c 9b       	sbis	0x05, 4	; 5
				  UsingSecondBuffer = !(UsingSecondBuffer);
     9b4:	d9 24       	eor	r13, r9

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     9b6:	c8 01       	movw	r24, r16
     9b8:	f9 dc       	rcall	.-1550   	; 0x3ac <Dataflash_SelectChipFromPage>
					Dataflash_WaitWhileBusy();
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     9ba:	dd 20       	and	r13, r13
     9bc:	11 f4       	brne	.+4      	; 0x9c2 <DataflashManager_WriteBlocks+0xd6>
     9be:	84 e8       	ldi	r24, 0x84	; 132
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <DataflashManager_WriteBlocks+0xd8>
     9c2:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c6:	0d b4       	in	r0, 0x2d	; 45
     9c8:	07 fe       	sbrs	r0, 7
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <DataflashManager_WriteBlocks+0xda>
				Dataflash_SendAddressBytes(0, 0);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	07 dd       	rcall	.-1522   	; 0x3e4 <Dataflash_SendAddressBytes>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9d8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9de:	0d b4       	in	r0, 0x2d	; 45
     9e0:	07 fe       	sbrs	r0, 7
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <DataflashManager_WriteBlocks+0xf2>
     9e4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ea:	0d b4       	in	r0, 0x2d	; 45
     9ec:	07 fe       	sbrs	r0, 7
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <DataflashManager_WriteBlocks+0xfe>
     9f0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9f6:	0d b4       	in	r0, 0x2d	; 45
     9f8:	07 fe       	sbrs	r0, 7
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <DataflashManager_WriteBlocks+0x10a>
     9fc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a00:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a02:	0d b4       	in	r0, 0x2d	; 45
     a04:	07 fe       	sbrs	r0, 7
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <DataflashManager_WriteBlocks+0x116>
     a08:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a0c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <DataflashManager_WriteBlocks+0x122>
     a14:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a18:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a1a:	0d b4       	in	r0, 0x2d	; 45
     a1c:	07 fe       	sbrs	r0, 7
     a1e:	fd cf       	rjmp	.-6      	; 0xa1a <DataflashManager_WriteBlocks+0x12e>
     a20:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a24:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a26:	0d b4       	in	r0, 0x2d	; 45
     a28:	07 fe       	sbrs	r0, 7
     a2a:	fd cf       	rjmp	.-6      	; 0xa26 <DataflashManager_WriteBlocks+0x13a>
     a2c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a30:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <DataflashManager_WriteBlocks+0x146>
     a38:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <DataflashManager_WriteBlocks+0x152>
     a44:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a48:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4a:	0d b4       	in	r0, 0x2d	; 45
     a4c:	07 fe       	sbrs	r0, 7
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <DataflashManager_WriteBlocks+0x15e>
     a50:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a54:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <DataflashManager_WriteBlocks+0x16a>
     a5c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a60:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a62:	0d b4       	in	r0, 0x2d	; 45
     a64:	07 fe       	sbrs	r0, 7
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <DataflashManager_WriteBlocks+0x176>
     a68:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a6c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a6e:	0d b4       	in	r0, 0x2d	; 45
     a70:	07 fe       	sbrs	r0, 7
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <DataflashManager_WriteBlocks+0x182>
     a74:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a78:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a7a:	0d b4       	in	r0, 0x2d	; 45
     a7c:	07 fe       	sbrs	r0, 7
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <DataflashManager_WriteBlocks+0x18e>
     a80:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a84:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a86:	0d b4       	in	r0, 0x2d	; 45
     a88:	07 fe       	sbrs	r0, 7
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <DataflashManager_WriteBlocks+0x19a>
     a8c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a90:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a92:	0d b4       	in	r0, 0x2d	; 45
     a94:	07 fe       	sbrs	r0, 7
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <DataflashManager_WriteBlocks+0x1a6>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     a98:	f5 01       	movw	r30, r10
     a9a:	80 ad       	ldd	r24, Z+56	; 0x38
     a9c:	88 23       	and	r24, r24
     a9e:	31 f5       	brne	.+76     	; 0xaec <DataflashManager_WriteBlocks+0x200>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     aa0:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     aa2:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     aa4:	f0 e2       	ldi	r31, 0x20	; 32
     aa6:	cf 16       	cp	r12, r31
     aa8:	09 f0       	breq	.+2      	; 0xaac <DataflashManager_WriteBlocks+0x1c0>
     aaa:	61 cf       	rjmp	.-318    	; 0x96e <DataflashManager_WriteBlocks+0x82>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     aac:	08 94       	sec
     aae:	e1 08       	sbc	r14, r1
     ab0:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     ab2:	e1 14       	cp	r14, r1
     ab4:	f1 04       	cpc	r15, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <DataflashManager_WriteBlocks+0x1ce>
     ab8:	59 cf       	rjmp	.-334    	; 0x96c <DataflashManager_WriteBlocks+0x80>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     aba:	86 dc       	rcall	.-1780   	; 0x3c8 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     abc:	dd 20       	and	r13, r13
     abe:	11 f4       	brne	.+4      	; 0xac4 <DataflashManager_WriteBlocks+0x1d8>
     ac0:	83 e8       	ldi	r24, 0x83	; 131
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <DataflashManager_WriteBlocks+0x1da>
     ac4:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ac6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ac8:	0d b4       	in	r0, 0x2d	; 45
     aca:	07 fe       	sbrs	r0, 7
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <DataflashManager_WriteBlocks+0x1dc>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     ace:	c8 01       	movw	r24, r16
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	87 dc       	rcall	.-1778   	; 0x3e4 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     ad6:	78 dc       	rcall	.-1808   	; 0x3c8 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ad8:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     adc:	85 fd       	sbrc	r24, 5
     ade:	05 c0       	rjmp	.+10     	; 0xaea <DataflashManager_WriteBlocks+0x1fe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ae0:	80 91 e8 00 	lds	r24, 0x00E8
     ae4:	8b 77       	andi	r24, 0x7B	; 123
     ae6:	80 93 e8 00 	sts	0x00E8, r24
     aea:	2c 9a       	sbi	0x05, 4	; 5
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     aec:	0f 90       	pop	r0
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	08 95       	ret

00000b06 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	8c 01       	movw	r16, r24
     b10:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     b12:	f8 01       	movw	r30, r16
     b14:	40 a1       	ldd	r20, Z+32	; 0x20
     b16:	57 8d       	ldd	r21, Z+31	; 0x1f
     b18:	66 8d       	ldd	r22, Z+30	; 0x1e
     b1a:	75 8d       	ldd	r23, Z+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     b1c:	c3 a1       	ldd	r28, Z+35	; 0x23
     b1e:	d2 a1       	ldd	r29, Z+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
     b20:	40 30       	cpi	r20, 0x00	; 0
     b22:	f0 e1       	ldi	r31, 0x10	; 16
     b24:	5f 07       	cpc	r21, r31
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	6f 07       	cpc	r22, r31
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	7f 07       	cpc	r23, r31
     b2e:	68 f0       	brcs	.+26     	; 0xb4a <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b30:	80 91 73 01 	lds	r24, 0x0173
     b34:	80 7f       	andi	r24, 0xF0	; 240
     b36:	85 60       	ori	r24, 0x05	; 5
     b38:	80 93 73 01 	sts	0x0173, r24
     b3c:	81 e2       	ldi	r24, 0x21	; 33
     b3e:	80 93 7d 01 	sts	0x017D, r24
     b42:	10 92 7e 01 	sts	0x017E, r1
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	21 c0       	rjmp	.+66     	; 0xb8c <SCSI_Command_ReadWrite_10+0x86>

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b4a:	88 23       	and	r24, r24
     b4c:	21 f0       	breq	.+8      	; 0xb56 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     b4e:	c8 01       	movw	r24, r16
     b50:	9e 01       	movw	r18, r28
     b52:	b8 dd       	rcall	.-1168   	; 0x6c4 <DataflashManager_ReadBlocks>
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     b56:	c8 01       	movw	r24, r16
     b58:	9e 01       	movw	r18, r28
     b5a:	c8 de       	rcall	.-624    	; 0x8ec <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b5c:	9e 01       	movw	r18, r28
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	89 e0       	ldi	r24, 0x09	; 9
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	8a 95       	dec	r24
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <SCSI_Command_ReadWrite_10+0x5e>
     b70:	f8 01       	movw	r30, r16
     b72:	84 89       	ldd	r24, Z+20	; 0x14
     b74:	95 89       	ldd	r25, Z+21	; 0x15
     b76:	a6 89       	ldd	r26, Z+22	; 0x16
     b78:	b7 89       	ldd	r27, Z+23	; 0x17
     b7a:	82 1b       	sub	r24, r18
     b7c:	93 0b       	sbc	r25, r19
     b7e:	a4 0b       	sbc	r26, r20
     b80:	b5 0b       	sbc	r27, r21
     b82:	84 8b       	std	Z+20, r24	; 0x14
     b84:	95 8b       	std	Z+21, r25	; 0x15
     b86:	a6 8b       	std	Z+22, r26	; 0x16
     b88:	b7 8b       	std	Z+23, r27	; 0x17
     b8a:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	28 97       	sbiw	r28, 0x08	; 8
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	6c 01       	movw	r12, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     bb8:	fc 01       	movw	r30, r24
     bba:	83 8d       	ldd	r24, Z+27	; 0x1b
     bbc:	8d 31       	cpi	r24, 0x1D	; 29
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <SCSI_DecodeSCSICommand+0x2c>
     bc0:	af c0       	rjmp	.+350    	; 0xd20 <SCSI_DecodeSCSICommand+0x18a>
     bc2:	8e 31       	cpi	r24, 0x1E	; 30
     bc4:	90 f4       	brcc	.+36     	; 0xbea <SCSI_DecodeSCSICommand+0x54>
     bc6:	82 31       	cpi	r24, 0x12	; 18
     bc8:	19 f1       	breq	.+70     	; 0xc10 <SCSI_DecodeSCSICommand+0x7a>
     bca:	83 31       	cpi	r24, 0x13	; 19
     bcc:	38 f4       	brcc	.+14     	; 0xbdc <SCSI_DecodeSCSICommand+0x46>
     bce:	88 23       	and	r24, r24
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <SCSI_DecodeSCSICommand+0x3e>
     bd2:	e3 c0       	rjmp	.+454    	; 0xd9a <SCSI_DecodeSCSICommand+0x204>
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	09 f0       	breq	.+2      	; 0xbda <SCSI_DecodeSCSICommand+0x44>
     bd8:	e6 c0       	rjmp	.+460    	; 0xda6 <SCSI_DecodeSCSICommand+0x210>
     bda:	4f c0       	rjmp	.+158    	; 0xc7a <SCSI_DecodeSCSICommand+0xe4>
     bdc:	8a 31       	cpi	r24, 0x1A	; 26
     bde:	09 f4       	brne	.+2      	; 0xbe2 <SCSI_DecodeSCSICommand+0x4c>
     be0:	c2 c0       	rjmp	.+388    	; 0xd66 <SCSI_DecodeSCSICommand+0x1d0>
     be2:	8b 31       	cpi	r24, 0x1B	; 27
     be4:	09 f0       	breq	.+2      	; 0xbe8 <SCSI_DecodeSCSICommand+0x52>
     be6:	df c0       	rjmp	.+446    	; 0xda6 <SCSI_DecodeSCSICommand+0x210>
     be8:	d8 c0       	rjmp	.+432    	; 0xd9a <SCSI_DecodeSCSICommand+0x204>
     bea:	88 32       	cpi	r24, 0x28	; 40
     bec:	09 f4       	brne	.+2      	; 0xbf0 <SCSI_DecodeSCSICommand+0x5a>
     bee:	b5 c0       	rjmp	.+362    	; 0xd5a <SCSI_DecodeSCSICommand+0x1c4>
     bf0:	89 32       	cpi	r24, 0x29	; 41
     bf2:	38 f4       	brcc	.+14     	; 0xc02 <SCSI_DecodeSCSICommand+0x6c>
     bf4:	8e 31       	cpi	r24, 0x1E	; 30
     bf6:	09 f4       	brne	.+2      	; 0xbfa <SCSI_DecodeSCSICommand+0x64>
     bf8:	d0 c0       	rjmp	.+416    	; 0xd9a <SCSI_DecodeSCSICommand+0x204>
     bfa:	85 32       	cpi	r24, 0x25	; 37
     bfc:	09 f0       	breq	.+2      	; 0xc00 <SCSI_DecodeSCSICommand+0x6a>
     bfe:	d3 c0       	rjmp	.+422    	; 0xda6 <SCSI_DecodeSCSICommand+0x210>
     c00:	61 c0       	rjmp	.+194    	; 0xcc4 <SCSI_DecodeSCSICommand+0x12e>
     c02:	8a 32       	cpi	r24, 0x2A	; 42
     c04:	09 f4       	brne	.+2      	; 0xc08 <SCSI_DecodeSCSICommand+0x72>
     c06:	a6 c0       	rjmp	.+332    	; 0xd54 <SCSI_DecodeSCSICommand+0x1be>
     c08:	8f 32       	cpi	r24, 0x2F	; 47
     c0a:	09 f0       	breq	.+2      	; 0xc0e <SCSI_DecodeSCSICommand+0x78>
     c0c:	cc c0       	rjmp	.+408    	; 0xda6 <SCSI_DecodeSCSICommand+0x210>
     c0e:	c5 c0       	rjmp	.+394    	; 0xd9a <SCSI_DecodeSCSICommand+0x204>
     c10:	f6 01       	movw	r30, r12
     c12:	07 8d       	ldd	r16, Z+31	; 0x1f
     c14:	16 8d       	ldd	r17, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     c16:	84 8d       	ldd	r24, Z+28	; 0x1c
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	83 70       	andi	r24, 0x03	; 3
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	89 2b       	or	r24, r25
     c20:	09 f0       	breq	.+2      	; 0xc24 <SCSI_DecodeSCSICommand+0x8e>
     c22:	82 c0       	rjmp	.+260    	; 0xd28 <SCSI_DecodeSCSICommand+0x192>
     c24:	85 8d       	ldd	r24, Z+29	; 0x1d
     c26:	88 23       	and	r24, r24
     c28:	09 f0       	breq	.+2      	; 0xc2c <SCSI_DecodeSCSICommand+0x96>
     c2a:	7e c0       	rjmp	.+252    	; 0xd28 <SCSI_DecodeSCSICommand+0x192>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     c2c:	78 01       	movw	r14, r16
     c2e:	05 32       	cpi	r16, 0x25	; 37
     c30:	11 05       	cpc	r17, r1
     c32:	18 f0       	brcs	.+6      	; 0xc3a <SCSI_DecodeSCSICommand+0xa4>
     c34:	94 e2       	ldi	r25, 0x24	; 36
     c36:	e9 2e       	mov	r14, r25
     c38:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     c3a:	83 e8       	ldi	r24, 0x83	; 131
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	b7 01       	movw	r22, r14
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	0e 94 22 17 	call	0x2e44	; 0x2e44 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c48:	c8 01       	movw	r24, r16
     c4a:	8e 19       	sub	r24, r14
     c4c:	9f 09       	sbc	r25, r15
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c56:	80 91 e8 00 	lds	r24, 0x00E8
     c5a:	8e 77       	andi	r24, 0x7E	; 126
     c5c:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     c60:	97 01       	movw	r18, r14
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	f6 01       	movw	r30, r12
     c68:	84 89       	ldd	r24, Z+20	; 0x14
     c6a:	95 89       	ldd	r25, Z+21	; 0x15
     c6c:	a6 89       	ldd	r26, Z+22	; 0x16
     c6e:	b7 89       	ldd	r27, Z+23	; 0x17
     c70:	82 1b       	sub	r24, r18
     c72:	93 0b       	sbc	r25, r19
     c74:	a4 0b       	sbc	r26, r20
     c76:	b5 0b       	sbc	r27, r21
     c78:	8b c0       	rjmp	.+278    	; 0xd90 <SCSI_DecodeSCSICommand+0x1fa>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     c7a:	f6 01       	movw	r30, r12
     c7c:	17 8d       	ldd	r17, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c7e:	01 2f       	mov	r16, r17
     c80:	13 31       	cpi	r17, 0x13	; 19
     c82:	08 f0       	brcs	.+2      	; 0xc86 <SCSI_DecodeSCSICommand+0xf0>
     c84:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c86:	81 e7       	ldi	r24, 0x71	; 113
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	60 2f       	mov	r22, r16
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	0e 94 22 17 	call	0x2e44	; 0x2e44 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c96:	81 2f       	mov	r24, r17
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	80 1b       	sub	r24, r16
     c9c:	91 09       	sbc	r25, r1
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <Endpoint_Null_Stream>
     ca6:	80 91 e8 00 	lds	r24, 0x00E8
     caa:	8e 77       	andi	r24, 0x7E	; 126
     cac:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     cb0:	f6 01       	movw	r30, r12
     cb2:	84 89       	ldd	r24, Z+20	; 0x14
     cb4:	95 89       	ldd	r25, Z+21	; 0x15
     cb6:	a6 89       	ldd	r26, Z+22	; 0x16
     cb8:	b7 89       	ldd	r27, Z+23	; 0x17
     cba:	80 1b       	sub	r24, r16
     cbc:	91 09       	sbc	r25, r1
     cbe:	a1 09       	sbc	r26, r1
     cc0:	b1 09       	sbc	r27, r1
     cc2:	66 c0       	rjmp	.+204    	; 0xd90 <SCSI_DecodeSCSICommand+0x1fa>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	9f e0       	ldi	r25, 0x0F	; 15
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	ab 83       	std	Y+3, r26	; 0x03
     cd2:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	8d 83       	std	Y+5, r24	; 0x05
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	af 83       	std	Y+7, r26	; 0x07
     ce2:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	64 e0       	ldi	r22, 0x04	; 4
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     cf4:	ce 01       	movw	r24, r28
     cf6:	05 96       	adiw	r24, 0x05	; 5
     cf8:	64 e0       	ldi	r22, 0x04	; 4
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Endpoint_Write_Stream_BE>
     d04:	80 91 e8 00 	lds	r24, 0x00E8
     d08:	8e 77       	andi	r24, 0x7E	; 126
     d0a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     d0e:	f6 01       	movw	r30, r12
     d10:	84 89       	ldd	r24, Z+20	; 0x14
     d12:	95 89       	ldd	r25, Z+21	; 0x15
     d14:	a6 89       	ldd	r26, Z+22	; 0x16
     d16:	b7 89       	ldd	r27, Z+23	; 0x17
     d18:	08 97       	sbiw	r24, 0x08	; 8
     d1a:	a1 09       	sbc	r26, r1
     d1c:	b1 09       	sbc	r27, r1
     d1e:	38 c0       	rjmp	.+112    	; 0xd90 <SCSI_DecodeSCSICommand+0x1fa>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     d20:	f6 01       	movw	r30, r12
     d22:	84 8d       	ldd	r24, Z+28	; 0x1c
     d24:	82 fd       	sbrc	r24, 2
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <SCSI_DecodeSCSICommand+0x1a2>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d28:	80 91 73 01 	lds	r24, 0x0173
     d2c:	80 7f       	andi	r24, 0xF0	; 240
     d2e:	85 60       	ori	r24, 0x05	; 5
     d30:	80 93 73 01 	sts	0x0173, r24
     d34:	84 e2       	ldi	r24, 0x24	; 36
     d36:	3e c0       	rjmp	.+124    	; 0xdb4 <SCSI_DecodeSCSICommand+0x21e>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     d38:	b3 dc       	rcall	.-1690   	; 0x6a0 <DataflashManager_CheckDataflashOperation>
     d3a:	88 23       	and	r24, r24
     d3c:	71 f5       	brne	.+92     	; 0xd9a <SCSI_DecodeSCSICommand+0x204>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d3e:	80 91 73 01 	lds	r24, 0x0173
     d42:	80 7f       	andi	r24, 0xF0	; 240
     d44:	84 60       	ori	r24, 0x04	; 4
     d46:	80 93 73 01 	sts	0x0173, r24
     d4a:	10 92 7d 01 	sts	0x017D, r1
     d4e:	10 92 7e 01 	sts	0x017E, r1
     d52:	33 c0       	rjmp	.+102    	; 0xdba <SCSI_DecodeSCSICommand+0x224>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     d54:	c6 01       	movw	r24, r12
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <SCSI_DecodeSCSICommand+0x1c8>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     d5a:	c6 01       	movw	r24, r12
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	d3 de       	rcall	.-602    	; 0xb06 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d60:	88 23       	and	r24, r24
     d62:	59 f1       	breq	.+86     	; 0xdba <SCSI_DecodeSCSICommand+0x224>
     d64:	2c c0       	rjmp	.+88     	; 0xdbe <SCSI_DecodeSCSICommand+0x228>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d66:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d6a:	10 92 f1 00 	sts	0x00F1, r1
     d6e:	10 92 f1 00 	sts	0x00F1, r1
     d72:	10 92 f1 00 	sts	0x00F1, r1
     d76:	80 91 e8 00 	lds	r24, 0x00E8
     d7a:	8e 77       	andi	r24, 0x7E	; 126
     d7c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     d80:	f6 01       	movw	r30, r12
     d82:	84 89       	ldd	r24, Z+20	; 0x14
     d84:	95 89       	ldd	r25, Z+21	; 0x15
     d86:	a6 89       	ldd	r26, Z+22	; 0x16
     d88:	b7 89       	ldd	r27, Z+23	; 0x17
     d8a:	04 97       	sbiw	r24, 0x04	; 4
     d8c:	a1 09       	sbc	r26, r1
     d8e:	b1 09       	sbc	r27, r1
     d90:	84 8b       	std	Z+20, r24	; 0x14
     d92:	95 8b       	std	Z+21, r25	; 0x15
     d94:	a6 8b       	std	Z+22, r26	; 0x16
     d96:	b7 8b       	std	Z+23, r27	; 0x17
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <SCSI_DecodeSCSICommand+0x228>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     d9a:	f6 01       	movw	r30, r12
     d9c:	14 8a       	std	Z+20, r1	; 0x14
     d9e:	15 8a       	std	Z+21, r1	; 0x15
     da0:	16 8a       	std	Z+22, r1	; 0x16
     da2:	17 8a       	std	Z+23, r1	; 0x17
     da4:	0c c0       	rjmp	.+24     	; 0xdbe <SCSI_DecodeSCSICommand+0x228>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     da6:	80 91 73 01 	lds	r24, 0x0173
     daa:	80 7f       	andi	r24, 0xF0	; 240
     dac:	85 60       	ori	r24, 0x05	; 5
     dae:	80 93 73 01 	sts	0x0173, r24
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	80 93 7d 01 	sts	0x017D, r24
     db8:	ca cf       	rjmp	.-108    	; 0xd4e <SCSI_DecodeSCSICommand+0x1b8>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <SCSI_DecodeSCSICommand+0x23c>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     dbe:	80 91 73 01 	lds	r24, 0x0173
     dc2:	80 7f       	andi	r24, 0xF0	; 240
     dc4:	80 93 73 01 	sts	0x0173, r24
     dc8:	10 92 7d 01 	sts	0x017D, r1
     dcc:	10 92 7e 01 	sts	0x017E, r1
     dd0:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     dd2:	28 96       	adiw	r28, 0x08	; 8
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	08 95       	ret

00000df0 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret

00000df4 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	08 95       	ret

00000df8 <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
     df8:	66 23       	and	r22, r22
     dfa:	11 f0       	breq	.+4      	; 0xe00 <disk_ioctl+0x8>
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	08 95       	ret
     e00:	80 e0       	ldi	r24, 0x00	; 0
	  return RES_OK;
	else
	  return RES_PARERR;
}
     e02:	08 95       	ret

00000e04 <get_fattime>:


DWORD get_fattime (void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <get_fattime+0x6>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <get_fattime+0x8>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <get_fattime+0xa>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	RTC_GetTimeDate(&CurrTimeDate);
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	ea d0       	rcall	.+468    	; 0xfec <RTC_GetTimeDate>
     e18:	2c 81       	ldd	r18, Y+4	; 0x04
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	33 27       	eor	r19, r19
     e24:	22 27       	eor	r18, r18
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	f5 e1       	ldi	r31, 0x15	; 21
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	aa 1f       	adc	r26, r26
     e36:	bb 1f       	adc	r27, r27
     e38:	fa 95       	dec	r31
     e3a:	d1 f7       	brne	.-12     	; 0xe30 <get_fattime+0x2c>
     e3c:	28 2b       	or	r18, r24
     e3e:	39 2b       	or	r19, r25
     e40:	4a 2b       	or	r20, r26
     e42:	5b 2b       	or	r21, r27
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	a0 e0       	ldi	r26, 0x00	; 0
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	eb e0       	ldi	r30, 0x0B	; 11
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	aa 1f       	adc	r26, r26
     e54:	bb 1f       	adc	r27, r27
     e56:	ea 95       	dec	r30
     e58:	d1 f7       	brne	.-12     	; 0xe4e <get_fattime+0x4a>
     e5a:	28 2b       	or	r18, r24
     e5c:	39 2b       	or	r19, r25
     e5e:	4a 2b       	or	r20, r26
     e60:	5b 2b       	or	r21, r27
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	75 e0       	ldi	r23, 0x05	; 5
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	aa 1f       	adc	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	7a 95       	dec	r23
     e76:	d1 f7       	brne	.-12     	; 0xe6c <get_fattime+0x68>
     e78:	28 2b       	or	r18, r24
     e7a:	39 2b       	or	r19, r25
     e7c:	4a 2b       	or	r20, r26
     e7e:	5b 2b       	or	r21, r27
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	86 95       	lsr	r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	28 2b       	or	r18, r24
     e8c:	39 2b       	or	r19, r25
     e8e:	4a 2b       	or	r20, r26
     e90:	5b 2b       	or	r21, r27
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	44 96       	adiw	r24, 0x14	; 20
     e98:	aa 27       	eor	r26, r26
     e9a:	97 fd       	sbrc	r25, 7
     e9c:	a0 95       	com	r26
     e9e:	ba 2f       	mov	r27, r26
     ea0:	69 e1       	ldi	r22, 0x19	; 25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	aa 1f       	adc	r26, r26
     ea8:	bb 1f       	adc	r27, r27
     eaa:	6a 95       	dec	r22
     eac:	d1 f7       	brne	.-12     	; 0xea2 <get_fattime+0x9e>
     eae:	28 2b       	or	r18, r24
     eb0:	39 2b       	or	r19, r25
     eb2:	4a 2b       	or	r20, r26
     eb4:	5b 2b       	or	r21, r27
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
     eb6:	b9 01       	movw	r22, r18
     eb8:	ca 01       	movw	r24, r20
     eba:	26 96       	adiw	r28, 0x06	; 6
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..128) */
)
{
     ecc:	0f 93       	push	r16
     ece:	fb 01       	movw	r30, r22
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
     ed0:	ca 01       	movw	r24, r20
     ed2:	b9 01       	movw	r22, r18
     ed4:	40 2f       	mov	r20, r16
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	9f 01       	movw	r18, r30
     eda:	9c da       	rcall	.-2760   	; 0x414 <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..128) */
)
{
     ee2:	0f 93       	push	r16
     ee4:	fb 01       	movw	r30, r22
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
     ee6:	ca 01       	movw	r24, r20
     ee8:	b9 01       	movw	r22, r18
     eea:	40 2f       	mov	r20, r16
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	9f 01       	movw	r18, r30
     ef0:	29 db       	rcall	.-2478   	; 0x544 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <RTC_Init>:
/** Current dummy RTC time and date */
static volatile TimeDate_t DummyRTC_Count;

void RTC_Init(void)
{
	DummyRTC_Count.Hour   = 0;
     ef8:	10 92 f1 03 	sts	0x03F1, r1
	DummyRTC_Count.Minute = 0;
     efc:	10 92 f2 03 	sts	0x03F2, r1
	DummyRTC_Count.Second = 0;
     f00:	10 92 f3 03 	sts	0x03F3, r1
	DummyRTC_Count.Day    = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 f4 03 	sts	0x03F4, r24
	DummyRTC_Count.Month  = 1;
     f0a:	80 93 f5 03 	sts	0x03F5, r24
	DummyRTC_Count.Year   = 00;
     f0e:	10 92 f6 03 	sts	0x03F6, r1
}
     f12:	08 95       	ret

00000f14 <RTC_Tick500ms>:

void RTC_Tick500ms(void)
{
	static bool HalfSecondElapsed = false;

	HalfSecondElapsed = !HalfSecondElapsed;
     f14:	80 91 f0 03 	lds	r24, 0x03F0
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	89 27       	eor	r24, r25
     f1c:	80 93 f0 03 	sts	0x03F0, r24
	if (HalfSecondElapsed == false)
     f20:	88 23       	and	r24, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <RTC_Tick500ms+0x12>
     f24:	62 c0       	rjmp	.+196    	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	if (++DummyRTC_Count.Second < 60)
     f26:	80 91 f3 03 	lds	r24, 0x03F3
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	80 93 f3 03 	sts	0x03F3, r24
     f30:	80 91 f3 03 	lds	r24, 0x03F3
     f34:	8c 33       	cpi	r24, 0x3C	; 60
     f36:	08 f4       	brcc	.+2      	; 0xf3a <RTC_Tick500ms+0x26>
     f38:	58 c0       	rjmp	.+176    	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	DummyRTC_Count.Second = 0;
     f3a:	10 92 f3 03 	sts	0x03F3, r1

	if (++DummyRTC_Count.Minute < 60)
     f3e:	80 91 f2 03 	lds	r24, 0x03F2
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 93 f2 03 	sts	0x03F2, r24
     f48:	80 91 f2 03 	lds	r24, 0x03F2
     f4c:	8c 33       	cpi	r24, 0x3C	; 60
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <RTC_Tick500ms+0x3e>
     f50:	4c c0       	rjmp	.+152    	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	DummyRTC_Count.Minute = 0;
     f52:	10 92 f2 03 	sts	0x03F2, r1

	if (++DummyRTC_Count.Hour < 24)
     f56:	80 91 f1 03 	lds	r24, 0x03F1
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	80 93 f1 03 	sts	0x03F1, r24
     f60:	80 91 f1 03 	lds	r24, 0x03F1
     f64:	88 31       	cpi	r24, 0x18	; 24
     f66:	08 f4       	brcc	.+2      	; 0xf6a <RTC_Tick500ms+0x56>
     f68:	40 c0       	rjmp	.+128    	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	DummyRTC_Count.Hour = 0;
     f6a:	10 92 f1 03 	sts	0x03F1, r1

	static const char MonthLength[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	uint8_t DaysInMonth = MonthLength[DummyRTC_Count.Month - 1];
     f6e:	e0 91 f5 03 	lds	r30, 0x03F5
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ea 55       	subi	r30, 0x5A	; 90
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	e0 81       	ld	r30, Z

	/* Check if we need to account for a leap year */
	if ((DummyRTC_Count.Month == 2) &&
     f7a:	80 91 f5 03 	lds	r24, 0x03F5
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	c1 f4       	brne	.+48     	; 0xfb2 <RTC_Tick500ms+0x9e>
     f82:	80 91 f6 03 	lds	r24, 0x03F6
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	60 e9       	ldi	r22, 0x90	; 144
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__divmodhi4>
     f90:	89 2b       	or	r24, r25
     f92:	71 f0       	breq	.+28     	; 0xfb0 <RTC_Tick500ms+0x9c>
     f94:	80 91 f6 03 	lds	r24, 0x03F6
     f98:	64 e6       	ldi	r22, 0x64	; 100
     f9a:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__udivmodqi4>
     f9e:	99 23       	and	r25, r25
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <RTC_Tick500ms+0x9e>
     fa2:	80 91 f6 03 	lds	r24, 0x03F6
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	83 70       	andi	r24, 0x03	; 3
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	89 2b       	or	r24, r25
     fae:	09 f4       	brne	.+2      	; 0xfb2 <RTC_Tick500ms+0x9e>
	    ((!(DummyRTC_Count.Year % 400)) || ((DummyRTC_Count.Year % 100) && !(DummyRTC_Count.Year % 4))))
	{
		DaysInMonth++;
     fb0:	ef 5f       	subi	r30, 0xFF	; 255
	}

	if (++DummyRTC_Count.Day <= DaysInMonth)
     fb2:	80 91 f4 03 	lds	r24, 0x03F4
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 f4 03 	sts	0x03F4, r24
     fbc:	80 91 f4 03 	lds	r24, 0x03F4
     fc0:	e8 17       	cp	r30, r24
     fc2:	98 f4       	brcc	.+38     	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	DummyRTC_Count.Day = 1;
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	90 93 f4 03 	sts	0x03F4, r25

	if (++DummyRTC_Count.Month <= 12)
     fca:	80 91 f5 03 	lds	r24, 0x03F5
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 f5 03 	sts	0x03F5, r24
     fd4:	80 91 f5 03 	lds	r24, 0x03F5
     fd8:	8d 30       	cpi	r24, 0x0D	; 13
     fda:	38 f0       	brcs	.+14     	; 0xfea <RTC_Tick500ms+0xd6>
	  return;

	DummyRTC_Count.Month = 1;
     fdc:	90 93 f5 03 	sts	0x03F5, r25
	DummyRTC_Count.Year++;
     fe0:	80 91 f6 03 	lds	r24, 0x03F6
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	80 93 f6 03 	sts	0x03F6, r24
     fea:	08 95       	ret

00000fec <RTC_GetTimeDate>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     fec:	f8 94       	cli
}

bool RTC_GetTimeDate(TimeDate_t* const TimeDate)
{
	GlobalInterruptDisable();
	*TimeDate = DummyRTC_Count;
     fee:	dc 01       	movw	r26, r24
     ff0:	e1 ef       	ldi	r30, 0xF1	; 241
     ff2:	f3 e0       	ldi	r31, 0x03	; 3
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	01 90       	ld	r0, Z+
     ff8:	0d 92       	st	X+, r0
     ffa:	81 50       	subi	r24, 0x01	; 1
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <RTC_GetTimeDate+0xa>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ffe:	78 94       	sei
	GlobalInterruptEnable();

	return true;
}
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret

00001004 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	8c 01       	movw	r16, r24
    100e:	eb 01       	movw	r28, r22
    1010:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	0e c0       	rjmp	.+28     	; 0x1034 <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
		*(int*)d = *(int*)s;
    1018:	f8 01       	movw	r30, r16
    101a:	e2 0f       	add	r30, r18
    101c:	f3 1f       	adc	r31, r19
    101e:	de 01       	movw	r26, r28
    1020:	a2 0f       	add	r26, r18
    1022:	b3 1f       	adc	r27, r19
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    102c:	42 50       	subi	r20, 0x02	; 2
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    1034:	42 30       	cpi	r20, 0x02	; 2
    1036:	51 05       	cpc	r21, r1
    1038:	78 f7       	brcc	.-34     	; 0x1018 <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    103a:	cb 01       	movw	r24, r22
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	de 01       	movw	r26, r28
    1040:	a8 0f       	add	r26, r24
    1042:	b9 1f       	adc	r27, r25
    1044:	f8 01       	movw	r30, r16
    1046:	e8 0f       	add	r30, r24
    1048:	f9 1f       	adc	r31, r25
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    104a:	60 ff       	sbrs	r22, 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <mem_cpy+0x4e>
		*d++ = *s++;
    104e:	8c 91       	ld	r24, X
    1050:	80 83       	st	Z, r24
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    105c:	fc 01       	movw	r30, r24
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <mem_set+0xa>

	while (cnt--)
		*d++ = (BYTE)val;
    1060:	61 93       	st	Z+, r22
    1062:	41 50       	subi	r20, 0x01	; 1
    1064:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1066:	41 15       	cp	r20, r1
    1068:	51 05       	cpc	r21, r1
    106a:	d1 f7       	brne	.-12     	; 0x1060 <mem_set+0x4>
		*d++ = (BYTE)val;
}
    106c:	08 95       	ret

0000106e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
    107c:	7a 01       	movw	r14, r20
    107e:	8b 01       	movw	r16, r22
	clst -= 2;
    1080:	8e ef       	ldi	r24, 0xFE	; 254
    1082:	9f ef       	ldi	r25, 0xFF	; 255
    1084:	af ef       	ldi	r26, 0xFF	; 255
    1086:	bf ef       	ldi	r27, 0xFF	; 255
    1088:	e8 0e       	add	r14, r24
    108a:	f9 1e       	adc	r15, r25
    108c:	0a 1f       	adc	r16, r26
    108e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1090:	8e 89       	ldd	r24, Y+22	; 0x16
    1092:	9f 89       	ldd	r25, Y+23	; 0x17
    1094:	a8 8d       	ldd	r26, Y+24	; 0x18
    1096:	b9 8d       	ldd	r27, Y+25	; 0x19
    1098:	02 97       	sbiw	r24, 0x02	; 2
    109a:	a1 09       	sbc	r26, r1
    109c:	b1 09       	sbc	r27, r1
    109e:	e8 16       	cp	r14, r24
    10a0:	f9 06       	cpc	r15, r25
    10a2:	0a 07       	cpc	r16, r26
    10a4:	1b 07       	cpc	r17, r27
    10a6:	28 f0       	brcs	.+10     	; 0x10b2 <clust2sect+0x44>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	12 c0       	rjmp	.+36     	; 0x10d6 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    10b2:	2a 81       	ldd	r18, Y+2	; 0x02
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	c8 01       	movw	r24, r16
    10bc:	b7 01       	movw	r22, r14
    10be:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__mulsi3>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	8e a1       	ldd	r24, Y+38	; 0x26
    10c8:	9f a1       	ldd	r25, Y+39	; 0x27
    10ca:	a8 a5       	ldd	r26, Y+40	; 0x28
    10cc:	b9 a5       	ldd	r27, Y+41	; 0x29
    10ce:	28 0f       	add	r18, r24
    10d0:	39 1f       	adc	r19, r25
    10d2:	4a 1f       	adc	r20, r26
    10d4:	5b 1f       	adc	r21, r27
}
    10d6:	b9 01       	movw	r22, r18
    10d8:	ca 01       	movw	r24, r20
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	08 95       	ret

000010e8 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
    10e8:	fc 01       	movw	r30, r24
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    10ea:	db 01       	movw	r26, r22
    10ec:	5a 96       	adiw	r26, 0x1a	; 26
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	5b 97       	sbiw	r26, 0x1b	; 27
    10f4:	9c 01       	movw	r18, r24
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    10fa:	80 81       	ld	r24, Z
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	69 f4       	brne	.+26     	; 0x111a <ld_clust+0x32>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    1100:	54 96       	adiw	r26, 0x14	; 20
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	55 97       	sbiw	r26, 0x15	; 21
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	dc 01       	movw	r26, r24
    110e:	99 27       	eor	r25, r25
    1110:	88 27       	eor	r24, r24
    1112:	28 2b       	or	r18, r24
    1114:	39 2b       	or	r19, r25
    1116:	4a 2b       	or	r20, r26
    1118:	5b 2b       	or	r21, r27

	return cl;
}
    111a:	b9 01       	movw	r22, r18
    111c:	ca 01       	movw	r24, r20
    111e:	08 95       	ret

00001120 <st_clust>:
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    1120:	fc 01       	movw	r30, r24
    1122:	53 8f       	std	Z+27, r21	; 0x1b
    1124:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    1126:	ab 01       	movw	r20, r22
    1128:	66 27       	eor	r22, r22
    112a:	77 27       	eor	r23, r23
    112c:	55 8b       	std	Z+21, r21	; 0x15
    112e:	44 8b       	std	Z+20, r20	; 0x14
}
    1130:	08 95       	ret

00001132 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    1132:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    1134:	88 23       	and	r24, r24
    1136:	11 f0       	breq	.+4      	; 0x113c <f_mount+0xa>
    1138:	8b e0       	ldi	r24, 0x0B	; 11
    113a:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    113c:	e0 91 f7 03 	lds	r30, 0x03F7
    1140:	f0 91 f8 03 	lds	r31, 0x03F8

	if (rfs) {
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	09 f0       	breq	.+2      	; 0x114a <f_mount+0x18>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    1148:	10 82       	st	Z, r1
	}

	if (fs) {
    114a:	10 97       	sbiw	r26, 0x00	; 0
    114c:	09 f0       	breq	.+2      	; 0x1150 <f_mount+0x1e>
		fs->fs_type = 0;		/* Clear new fs object */
    114e:	1c 92       	st	X, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    1150:	b0 93 f8 03 	sts	0x03F8, r27
    1154:	a0 93 f7 03 	sts	0x03F7, r26
    1158:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    115a:	08 95       	ret

0000115c <validate>:
)
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
    115c:	fc 01       	movw	r30, r24
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    115e:	a0 81       	ld	r26, Z
    1160:	b1 81       	ldd	r27, Z+1	; 0x01
    1162:	10 97       	sbiw	r26, 0x00	; 0
    1164:	a9 f0       	breq	.+42     	; 0x1190 <validate+0x34>
    1166:	8c 91       	ld	r24, X
    1168:	88 23       	and	r24, r24
    116a:	91 f0       	breq	.+36     	; 0x1190 <validate+0x34>
    116c:	16 96       	adiw	r26, 0x06	; 6
    116e:	2d 91       	ld	r18, X+
    1170:	3c 91       	ld	r19, X
    1172:	17 97       	sbiw	r26, 0x07	; 7
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	28 17       	cp	r18, r24
    117a:	39 07       	cpc	r19, r25
    117c:	49 f4       	brne	.+18     	; 0x1190 <validate+0x34>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	8c 91       	ld	r24, X
    1182:	38 de       	rcall	.-912    	; 0xdf4 <disk_status>
    1184:	80 fd       	sbrc	r24, 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <validate+0x30>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	08 95       	ret
    1190:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    1192:	08 95       	ret

00001194 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1194:	6f 92       	push	r6
    1196:	7f 92       	push	r7
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
    11b2:	4a 01       	movw	r8, r20
    11b4:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    11b6:	ca a4       	ldd	r12, Y+42	; 0x2a
    11b8:	db a4       	ldd	r13, Y+43	; 0x2b
    11ba:	ec a4       	ldd	r14, Y+44	; 0x2c
    11bc:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    11be:	c4 16       	cp	r12, r20
    11c0:	d5 06       	cpc	r13, r21
    11c2:	e6 06       	cpc	r14, r22
    11c4:	f7 06       	cpc	r15, r23
    11c6:	09 f4       	brne	.+2      	; 0x11ca <move_window+0x36>
    11c8:	4b c0       	rjmp	.+150    	; 0x1260 <move_window+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	88 23       	and	r24, r24
    11ce:	91 f1       	breq	.+100    	; 0x1234 <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    11d0:	be e2       	ldi	r27, 0x2E	; 46
    11d2:	6b 2e       	mov	r6, r27
    11d4:	71 2c       	mov	r7, r1
    11d6:	6c 0e       	add	r6, r28
    11d8:	7d 1e       	adc	r7, r29
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	b3 01       	movw	r22, r6
    11de:	a7 01       	movw	r20, r14
    11e0:	96 01       	movw	r18, r12
    11e2:	01 e0       	ldi	r16, 0x01	; 1
    11e4:	73 de       	rcall	.-794    	; 0xecc <disk_write>
    11e6:	88 23       	and	r24, r24
    11e8:	c9 f5       	brne	.+114    	; 0x125c <move_window+0xc8>
				return FR_DISK_ERR;
			fs->wflag = 0;
    11ea:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    11ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11f0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    11f2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    11f4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    11f6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    11f8:	48 a1       	ldd	r20, Y+32	; 0x20
    11fa:	59 a1       	ldd	r21, Y+33	; 0x21
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	a4 1f       	adc	r26, r20
    1202:	b5 1f       	adc	r27, r21
    1204:	c8 16       	cp	r12, r24
    1206:	d9 06       	cpc	r13, r25
    1208:	ea 06       	cpc	r14, r26
    120a:	fb 06       	cpc	r15, r27
    120c:	98 f4       	brcc	.+38     	; 0x1234 <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    120e:	1b 81       	ldd	r17, Y+3	; 0x03
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <move_window+0x9c>
					wsect += fs->fsize;
    1212:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1214:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1216:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1218:	bd 8d       	ldd	r27, Y+29	; 0x1d
    121a:	c8 0e       	add	r12, r24
    121c:	d9 1e       	adc	r13, r25
    121e:	ea 1e       	adc	r14, r26
    1220:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	b3 01       	movw	r22, r6
    1226:	a7 01       	movw	r20, r14
    1228:	96 01       	movw	r18, r12
    122a:	01 e0       	ldi	r16, 0x01	; 1
    122c:	4f de       	rcall	.-866    	; 0xecc <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    122e:	11 50       	subi	r17, 0x01	; 1
    1230:	12 30       	cpi	r17, 0x02	; 2
    1232:	78 f7       	brcc	.-34     	; 0x1212 <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1234:	81 14       	cp	r8, r1
    1236:	91 04       	cpc	r9, r1
    1238:	a1 04       	cpc	r10, r1
    123a:	b1 04       	cpc	r11, r1
    123c:	89 f0       	breq	.+34     	; 0x1260 <move_window+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    123e:	be 01       	movw	r22, r28
    1240:	62 5d       	subi	r22, 0xD2	; 210
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	a5 01       	movw	r20, r10
    1248:	94 01       	movw	r18, r8
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	4a de       	rcall	.-876    	; 0xee2 <disk_read>
    124e:	88 23       	and	r24, r24
    1250:	29 f4       	brne	.+10     	; 0x125c <move_window+0xc8>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1252:	8a a6       	std	Y+42, r8	; 0x2a
    1254:	9b a6       	std	Y+43, r9	; 0x2b
    1256:	ac a6       	std	Y+44, r10	; 0x2c
    1258:	bd a6       	std	Y+45, r11	; 0x2d
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <move_window+0xce>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <move_window+0xce>
    1260:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	7f 90       	pop	r7
    127c:	6f 90       	pop	r6
    127e:	08 95       	ret

00001280 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	6a 01       	movw	r12, r20
    129c:	7b 01       	movw	r14, r22
    129e:	48 01       	movw	r8, r16
    12a0:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    12a2:	42 30       	cpi	r20, 0x02	; 2
    12a4:	51 05       	cpc	r21, r1
    12a6:	61 05       	cpc	r22, r1
    12a8:	71 05       	cpc	r23, r1
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <put_fat+0x2e>
    12ac:	cd c0       	rjmp	.+410    	; 0x1448 <put_fat+0x1c8>
    12ae:	8e 89       	ldd	r24, Y+22	; 0x16
    12b0:	9f 89       	ldd	r25, Y+23	; 0x17
    12b2:	a8 8d       	ldd	r26, Y+24	; 0x18
    12b4:	b9 8d       	ldd	r27, Y+25	; 0x19
    12b6:	48 17       	cp	r20, r24
    12b8:	59 07       	cpc	r21, r25
    12ba:	6a 07       	cpc	r22, r26
    12bc:	7b 07       	cpc	r23, r27
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <put_fat+0x42>
    12c0:	c3 c0       	rjmp	.+390    	; 0x1448 <put_fat+0x1c8>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    12c2:	88 81       	ld	r24, Y
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	09 f4       	brne	.+2      	; 0x12ca <put_fat+0x4a>
    12c8:	6e c0       	rjmp	.+220    	; 0x13a6 <put_fat+0x126>
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <put_fat+0x50>
    12ce:	89 c0       	rjmp	.+274    	; 0x13e2 <put_fat+0x162>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <put_fat+0x58>
    12d4:	22 e0       	ldi	r18, 0x02	; 2
    12d6:	b5 c0       	rjmp	.+362    	; 0x1442 <put_fat+0x1c2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    12d8:	8a 01       	movw	r16, r20
    12da:	16 95       	lsr	r17
    12dc:	07 95       	ror	r16
    12de:	04 0f       	add	r16, r20
    12e0:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    12e2:	a8 01       	movw	r20, r16
    12e4:	45 2f       	mov	r20, r21
    12e6:	55 27       	eor	r21, r21
    12e8:	46 95       	lsr	r20
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12f2:	a8 a1       	ldd	r26, Y+32	; 0x20
    12f4:	b9 a1       	ldd	r27, Y+33	; 0x21
    12f6:	48 0f       	add	r20, r24
    12f8:	59 1f       	adc	r21, r25
    12fa:	6a 1f       	adc	r22, r26
    12fc:	7b 1f       	adc	r23, r27
    12fe:	ce 01       	movw	r24, r28
    1300:	49 df       	rcall	.-366    	; 0x1194 <move_window>
    1302:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <put_fat+0x8a>
    1308:	9c c0       	rjmp	.+312    	; 0x1442 <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    130a:	d8 01       	movw	r26, r16
    130c:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    130e:	e1 e0       	ldi	r30, 0x01	; 1
    1310:	ee 2e       	mov	r14, r30
    1312:	f1 2c       	mov	r15, r1
    1314:	ec 20       	and	r14, r12
    1316:	fd 20       	and	r15, r13
    1318:	e1 14       	cp	r14, r1
    131a:	f1 04       	cpc	r15, r1
    131c:	51 f0       	breq	.+20     	; 0x1332 <put_fat+0xb2>
    131e:	fe 01       	movw	r30, r28
    1320:	ea 0f       	add	r30, r26
    1322:	fb 1f       	adc	r31, r27
    1324:	86 a5       	ldd	r24, Z+46	; 0x2e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	98 2d       	mov	r25, r8
    132a:	92 95       	swap	r25
    132c:	90 7f       	andi	r25, 0xF0	; 240
    132e:	98 2b       	or	r25, r24
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <put_fat+0xb4>
    1332:	98 2d       	mov	r25, r8
    1334:	ac 0f       	add	r26, r28
    1336:	bd 1f       	adc	r27, r29
    1338:	9e 96       	adiw	r26, 0x2e	; 46
    133a:	9c 93       	st	X, r25
			bc++;
    133c:	0f 5f       	subi	r16, 0xFF	; 255
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1344:	a8 01       	movw	r20, r16
    1346:	45 2f       	mov	r20, r21
    1348:	55 27       	eor	r21, r21
    134a:	46 95       	lsr	r20
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1352:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1354:	a8 a1       	ldd	r26, Y+32	; 0x20
    1356:	b9 a1       	ldd	r27, Y+33	; 0x21
    1358:	48 0f       	add	r20, r24
    135a:	59 1f       	adc	r21, r25
    135c:	6a 1f       	adc	r22, r26
    135e:	7b 1f       	adc	r23, r27
    1360:	ce 01       	movw	r24, r28
    1362:	18 df       	rcall	.-464    	; 0x1194 <move_window>
    1364:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1366:	88 23       	and	r24, r24
    1368:	09 f0       	breq	.+2      	; 0x136c <put_fat+0xec>
    136a:	6b c0       	rjmp	.+214    	; 0x1442 <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    136c:	a8 01       	movw	r20, r16
    136e:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1370:	ef 28       	or	r14, r15
    1372:	49 f0       	breq	.+18     	; 0x1386 <put_fat+0x106>
    1374:	64 e0       	ldi	r22, 0x04	; 4
    1376:	b6 94       	lsr	r11
    1378:	a7 94       	ror	r10
    137a:	97 94       	ror	r9
    137c:	87 94       	ror	r8
    137e:	6a 95       	dec	r22
    1380:	d1 f7       	brne	.-12     	; 0x1376 <put_fat+0xf6>
    1382:	68 2d       	mov	r22, r8
    1384:	0b c0       	rjmp	.+22     	; 0x139c <put_fat+0x11c>
    1386:	fe 01       	movw	r30, r28
    1388:	e4 0f       	add	r30, r20
    138a:	f5 1f       	adc	r31, r21
    138c:	66 a5       	ldd	r22, Z+46	; 0x2e
    138e:	60 7f       	andi	r22, 0xF0	; 240
    1390:	bb 27       	eor	r27, r27
    1392:	ab 2d       	mov	r26, r11
    1394:	9a 2d       	mov	r25, r10
    1396:	89 2d       	mov	r24, r9
    1398:	8f 70       	andi	r24, 0x0F	; 15
    139a:	68 2b       	or	r22, r24
    139c:	4c 0f       	add	r20, r28
    139e:	5d 1f       	adc	r21, r29
    13a0:	fa 01       	movw	r30, r20
    13a2:	66 a7       	std	Z+46, r22	; 0x2e
    13a4:	4e c0       	rjmp	.+156    	; 0x1442 <put_fat+0x1c2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    13a6:	45 2f       	mov	r20, r21
    13a8:	56 2f       	mov	r21, r22
    13aa:	67 2f       	mov	r22, r23
    13ac:	77 27       	eor	r23, r23
    13ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13b2:	a8 a1       	ldd	r26, Y+32	; 0x20
    13b4:	b9 a1       	ldd	r27, Y+33	; 0x21
    13b6:	48 0f       	add	r20, r24
    13b8:	59 1f       	adc	r21, r25
    13ba:	6a 1f       	adc	r22, r26
    13bc:	7b 1f       	adc	r23, r27
    13be:	ce 01       	movw	r24, r28
    13c0:	e9 de       	rcall	.-558    	; 0x1194 <move_window>
    13c2:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <put_fat+0x14a>
    13c8:	3c c0       	rjmp	.+120    	; 0x1442 <put_fat+0x1c2>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    13ca:	cc 0c       	add	r12, r12
    13cc:	dd 1c       	adc	r13, r13
    13ce:	ee 1c       	adc	r14, r14
    13d0:	ff 1c       	adc	r15, r15
    13d2:	f6 01       	movw	r30, r12
    13d4:	f1 70       	andi	r31, 0x01	; 1
    13d6:	be 96       	adiw	r30, 0x2e	; 46
    13d8:	ec 0f       	add	r30, r28
    13da:	fd 1f       	adc	r31, r29
    13dc:	91 82       	std	Z+1, r9	; 0x01
    13de:	80 82       	st	Z, r8
    13e0:	30 c0       	rjmp	.+96     	; 0x1442 <put_fat+0x1c2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    13e2:	07 e0       	ldi	r16, 0x07	; 7
    13e4:	76 95       	lsr	r23
    13e6:	67 95       	ror	r22
    13e8:	57 95       	ror	r21
    13ea:	47 95       	ror	r20
    13ec:	0a 95       	dec	r16
    13ee:	d1 f7       	brne	.-12     	; 0x13e4 <put_fat+0x164>
    13f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13f4:	a8 a1       	ldd	r26, Y+32	; 0x20
    13f6:	b9 a1       	ldd	r27, Y+33	; 0x21
    13f8:	48 0f       	add	r20, r24
    13fa:	59 1f       	adc	r21, r25
    13fc:	6a 1f       	adc	r22, r26
    13fe:	7b 1f       	adc	r23, r27
    1400:	ce 01       	movw	r24, r28
    1402:	c8 de       	rcall	.-624    	; 0x1194 <move_window>
    1404:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1406:	88 23       	and	r24, r24
    1408:	e1 f4       	brne	.+56     	; 0x1442 <put_fat+0x1c2>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    140a:	12 e0       	ldi	r17, 0x02	; 2
    140c:	cc 0c       	add	r12, r12
    140e:	dd 1c       	adc	r13, r13
    1410:	ee 1c       	adc	r14, r14
    1412:	ff 1c       	adc	r15, r15
    1414:	1a 95       	dec	r17
    1416:	d1 f7       	brne	.-12     	; 0x140c <put_fat+0x18c>
    1418:	f6 01       	movw	r30, r12
    141a:	f1 70       	andi	r31, 0x01	; 1
    141c:	be 96       	adiw	r30, 0x2e	; 46
    141e:	ec 0f       	add	r30, r28
    1420:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	a2 81       	ldd	r26, Z+2	; 0x02
    1428:	b3 81       	ldd	r27, Z+3	; 0x03
    142a:	80 70       	andi	r24, 0x00	; 0
    142c:	90 70       	andi	r25, 0x00	; 0
    142e:	a0 70       	andi	r26, 0x00	; 0
    1430:	b0 7f       	andi	r27, 0xF0	; 240
    1432:	88 29       	or	r24, r8
    1434:	99 29       	or	r25, r9
    1436:	aa 29       	or	r26, r10
    1438:	bb 29       	or	r27, r11
    143a:	80 83       	st	Z, r24
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	a2 83       	std	Z+2, r26	; 0x02
    1440:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	8c 83       	std	Y+4, r24	; 0x04
    1446:	01 c0       	rjmp	.+2      	; 0x144a <put_fat+0x1ca>
    1448:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    144a:	82 2f       	mov	r24, r18
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	08 95       	ret

00001466 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	6c 01       	movw	r12, r24
    147a:	7a 01       	movw	r14, r20
    147c:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    147e:	42 30       	cpi	r20, 0x02	; 2
    1480:	51 05       	cpc	r21, r1
    1482:	61 05       	cpc	r22, r1
    1484:	71 05       	cpc	r23, r1
    1486:	08 f4       	brcc	.+2      	; 0x148a <get_fat+0x24>
    1488:	a8 c0       	rjmp	.+336    	; 0x15da <get_fat+0x174>
    148a:	f6 01       	movw	r30, r12
    148c:	86 89       	ldd	r24, Z+22	; 0x16
    148e:	97 89       	ldd	r25, Z+23	; 0x17
    1490:	a0 8d       	ldd	r26, Z+24	; 0x18
    1492:	b1 8d       	ldd	r27, Z+25	; 0x19
    1494:	48 17       	cp	r20, r24
    1496:	59 07       	cpc	r21, r25
    1498:	6a 07       	cpc	r22, r26
    149a:	7b 07       	cpc	r23, r27
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <get_fat+0x3a>
    149e:	9d c0       	rjmp	.+314    	; 0x15da <get_fat+0x174>
		return 1;

	switch (fs->fs_type) {
    14a0:	80 81       	ld	r24, Z
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <get_fat+0x42>
    14a6:	55 c0       	rjmp	.+170    	; 0x1552 <get_fat+0xec>
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	09 f4       	brne	.+2      	; 0x14ae <get_fat+0x48>
    14ac:	71 c0       	rjmp	.+226    	; 0x1590 <get_fat+0x12a>
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <get_fat+0x4e>
    14b2:	98 c0       	rjmp	.+304    	; 0x15e4 <get_fat+0x17e>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    14b4:	ea 01       	movw	r28, r20
    14b6:	d6 95       	lsr	r29
    14b8:	c7 95       	ror	r28
    14ba:	c4 0f       	add	r28, r20
    14bc:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    14be:	ae 01       	movw	r20, r28
    14c0:	45 2f       	mov	r20, r21
    14c2:	55 27       	eor	r21, r21
    14c4:	46 95       	lsr	r20
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	f6 01       	movw	r30, r12
    14cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ce:	97 8d       	ldd	r25, Z+31	; 0x1f
    14d0:	a0 a1       	ldd	r26, Z+32	; 0x20
    14d2:	b1 a1       	ldd	r27, Z+33	; 0x21
    14d4:	48 0f       	add	r20, r24
    14d6:	59 1f       	adc	r21, r25
    14d8:	6a 1f       	adc	r22, r26
    14da:	7b 1f       	adc	r23, r27
    14dc:	c6 01       	movw	r24, r12
    14de:	5a de       	rcall	.-844    	; 0x1194 <move_window>
    14e0:	88 23       	and	r24, r24
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <get_fat+0x80>
    14e4:	7f c0       	rjmp	.+254    	; 0x15e4 <get_fat+0x17e>
		wc = fs->win[bc % SS(fs)]; bc++;
    14e6:	fe 01       	movw	r30, r28
    14e8:	f1 70       	andi	r31, 0x01	; 1
    14ea:	ec 0d       	add	r30, r12
    14ec:	fd 1d       	adc	r31, r13
    14ee:	b6 a4       	ldd	r11, Z+46	; 0x2e
    14f0:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    14f2:	ae 01       	movw	r20, r28
    14f4:	45 2f       	mov	r20, r21
    14f6:	55 27       	eor	r21, r21
    14f8:	46 95       	lsr	r20
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	f6 01       	movw	r30, r12
    1500:	86 8d       	ldd	r24, Z+30	; 0x1e
    1502:	97 8d       	ldd	r25, Z+31	; 0x1f
    1504:	a0 a1       	ldd	r26, Z+32	; 0x20
    1506:	b1 a1       	ldd	r27, Z+33	; 0x21
    1508:	48 0f       	add	r20, r24
    150a:	59 1f       	adc	r21, r25
    150c:	6a 1f       	adc	r22, r26
    150e:	7b 1f       	adc	r23, r27
    1510:	c6 01       	movw	r24, r12
    1512:	40 de       	rcall	.-896    	; 0x1194 <move_window>
    1514:	88 23       	and	r24, r24
    1516:	09 f0       	breq	.+2      	; 0x151a <get_fat+0xb4>
    1518:	65 c0       	rjmp	.+202    	; 0x15e4 <get_fat+0x17e>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    151a:	6b 2d       	mov	r22, r11
    151c:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    151e:	d1 70       	andi	r29, 0x01	; 1
    1520:	cc 0d       	add	r28, r12
    1522:	dd 1d       	adc	r29, r13
    1524:	9e a5       	ldd	r25, Y+46	; 0x2e
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	68 2b       	or	r22, r24
    152a:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    152c:	c7 01       	movw	r24, r14
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	89 2b       	or	r24, r25
    1534:	39 f0       	breq	.+14     	; 0x1544 <get_fat+0xde>
    1536:	34 e0       	ldi	r19, 0x04	; 4
    1538:	76 95       	lsr	r23
    153a:	67 95       	ror	r22
    153c:	3a 95       	dec	r19
    153e:	e1 f7       	brne	.-8      	; 0x1538 <get_fat+0xd2>
    1540:	9b 01       	movw	r18, r22
    1542:	23 c0       	rjmp	.+70     	; 0x158a <get_fat+0x124>
    1544:	9b 01       	movw	r18, r22
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	3f 70       	andi	r19, 0x0F	; 15
    154c:	40 70       	andi	r20, 0x00	; 0
    154e:	50 70       	andi	r21, 0x00	; 0
    1550:	4d c0       	rjmp	.+154    	; 0x15ec <get_fat+0x186>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1552:	45 2f       	mov	r20, r21
    1554:	56 2f       	mov	r21, r22
    1556:	67 2f       	mov	r22, r23
    1558:	77 27       	eor	r23, r23
    155a:	f6 01       	movw	r30, r12
    155c:	86 8d       	ldd	r24, Z+30	; 0x1e
    155e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1560:	a0 a1       	ldd	r26, Z+32	; 0x20
    1562:	b1 a1       	ldd	r27, Z+33	; 0x21
    1564:	48 0f       	add	r20, r24
    1566:	59 1f       	adc	r21, r25
    1568:	6a 1f       	adc	r22, r26
    156a:	7b 1f       	adc	r23, r27
    156c:	c6 01       	movw	r24, r12
    156e:	12 de       	rcall	.-988    	; 0x1194 <move_window>
    1570:	88 23       	and	r24, r24
    1572:	c1 f5       	brne	.+112    	; 0x15e4 <get_fat+0x17e>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    1574:	ee 0c       	add	r14, r14
    1576:	ff 1c       	adc	r15, r15
    1578:	00 1f       	adc	r16, r16
    157a:	11 1f       	adc	r17, r17
    157c:	f7 01       	movw	r30, r14
    157e:	f1 70       	andi	r31, 0x01	; 1
    1580:	ec 0d       	add	r30, r12
    1582:	fd 1d       	adc	r31, r13
    1584:	86 a5       	ldd	r24, Z+46	; 0x2e
    1586:	97 a5       	ldd	r25, Z+47	; 0x2f
    1588:	9c 01       	movw	r18, r24
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	2e c0       	rjmp	.+92     	; 0x15ec <get_fat+0x186>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1590:	87 e0       	ldi	r24, 0x07	; 7
    1592:	76 95       	lsr	r23
    1594:	67 95       	ror	r22
    1596:	57 95       	ror	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	d1 f7       	brne	.-12     	; 0x1592 <get_fat+0x12c>
    159e:	f6 01       	movw	r30, r12
    15a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    15a2:	97 8d       	ldd	r25, Z+31	; 0x1f
    15a4:	a0 a1       	ldd	r26, Z+32	; 0x20
    15a6:	b1 a1       	ldd	r27, Z+33	; 0x21
    15a8:	48 0f       	add	r20, r24
    15aa:	59 1f       	adc	r21, r25
    15ac:	6a 1f       	adc	r22, r26
    15ae:	7b 1f       	adc	r23, r27
    15b0:	c6 01       	movw	r24, r12
    15b2:	f0 dd       	rcall	.-1056   	; 0x1194 <move_window>
    15b4:	88 23       	and	r24, r24
    15b6:	b1 f4       	brne	.+44     	; 0x15e4 <get_fat+0x17e>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    15b8:	b2 e0       	ldi	r27, 0x02	; 2
    15ba:	ee 0c       	add	r14, r14
    15bc:	ff 1c       	adc	r15, r15
    15be:	00 1f       	adc	r16, r16
    15c0:	11 1f       	adc	r17, r17
    15c2:	ba 95       	dec	r27
    15c4:	d1 f7       	brne	.-12     	; 0x15ba <get_fat+0x154>
    15c6:	f7 01       	movw	r30, r14
    15c8:	f1 70       	andi	r31, 0x01	; 1
    15ca:	ec 0d       	add	r30, r12
    15cc:	fd 1d       	adc	r31, r13
    15ce:	26 a5       	ldd	r18, Z+46	; 0x2e
    15d0:	37 a5       	ldd	r19, Z+47	; 0x2f
    15d2:	40 a9       	ldd	r20, Z+48	; 0x30
    15d4:	51 a9       	ldd	r21, Z+49	; 0x31
    15d6:	5f 70       	andi	r21, 0x0F	; 15
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <get_fat+0x186>
    15da:	21 e0       	ldi	r18, 0x01	; 1
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <get_fat+0x186>
    15e4:	2f ef       	ldi	r18, 0xFF	; 255
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f ef       	ldi	r20, 0xFF	; 255
    15ea:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    15ec:	b9 01       	movw	r22, r18
    15ee:	ca 01       	movw	r24, r20
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	08 95       	ret

00001604 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	2a 01       	movw	r4, r20
    1628:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    162a:	41 15       	cp	r20, r1
    162c:	51 05       	cpc	r21, r1
    162e:	61 05       	cpc	r22, r1
    1630:	71 05       	cpc	r23, r1
    1632:	99 f4       	brne	.+38     	; 0x165a <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1634:	8a 84       	ldd	r8, Y+10	; 0x0a
    1636:	9b 84       	ldd	r9, Y+11	; 0x0b
    1638:	ac 84       	ldd	r10, Y+12	; 0x0c
    163a:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    163c:	81 14       	cp	r8, r1
    163e:	91 04       	cpc	r9, r1
    1640:	a1 04       	cpc	r10, r1
    1642:	b1 04       	cpc	r11, r1
    1644:	01 f1       	breq	.+64     	; 0x1686 <create_chain+0x82>
    1646:	8e 89       	ldd	r24, Y+22	; 0x16
    1648:	9f 89       	ldd	r25, Y+23	; 0x17
    164a:	a8 8d       	ldd	r26, Y+24	; 0x18
    164c:	b9 8d       	ldd	r27, Y+25	; 0x19
    164e:	88 16       	cp	r8, r24
    1650:	99 06       	cpc	r9, r25
    1652:	aa 06       	cpc	r10, r26
    1654:	bb 06       	cpc	r11, r27
    1656:	b8 f4       	brcc	.+46     	; 0x1686 <create_chain+0x82>
    1658:	1b c0       	rjmp	.+54     	; 0x1690 <create_chain+0x8c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    165a:	05 df       	rcall	.-502    	; 0x1466 <get_fat>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1660:	62 30       	cpi	r22, 0x02	; 2
    1662:	71 05       	cpc	r23, r1
    1664:	81 05       	cpc	r24, r1
    1666:	91 05       	cpc	r25, r1
    1668:	08 f4       	brcc	.+2      	; 0x166c <create_chain+0x68>
    166a:	87 c0       	rjmp	.+270    	; 0x177a <create_chain+0x176>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    166c:	8e 89       	ldd	r24, Y+22	; 0x16
    166e:	9f 89       	ldd	r25, Y+23	; 0x17
    1670:	a8 8d       	ldd	r26, Y+24	; 0x18
    1672:	b9 8d       	ldd	r27, Y+25	; 0x19
    1674:	28 17       	cp	r18, r24
    1676:	39 07       	cpc	r19, r25
    1678:	4a 07       	cpc	r20, r26
    167a:	5b 07       	cpc	r21, r27
    167c:	08 f4       	brcc	.+2      	; 0x1680 <create_chain+0x7c>
    167e:	8b c0       	rjmp	.+278    	; 0x1796 <create_chain+0x192>
    1680:	53 01       	movw	r10, r6
    1682:	42 01       	movw	r8, r4
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <create_chain+0x8c>
    1686:	a1 e0       	ldi	r26, 0x01	; 1
    1688:	8a 2e       	mov	r8, r26
    168a:	91 2c       	mov	r9, r1
    168c:	a1 2c       	mov	r10, r1
    168e:	b1 2c       	mov	r11, r1
    1690:	75 01       	movw	r14, r10
    1692:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1694:	08 94       	sec
    1696:	c1 1c       	adc	r12, r1
    1698:	d1 1c       	adc	r13, r1
    169a:	e1 1c       	adc	r14, r1
    169c:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    169e:	8e 89       	ldd	r24, Y+22	; 0x16
    16a0:	9f 89       	ldd	r25, Y+23	; 0x17
    16a2:	a8 8d       	ldd	r26, Y+24	; 0x18
    16a4:	b9 8d       	ldd	r27, Y+25	; 0x19
    16a6:	c8 16       	cp	r12, r24
    16a8:	d9 06       	cpc	r13, r25
    16aa:	ea 06       	cpc	r14, r26
    16ac:	fb 06       	cpc	r15, r27
    16ae:	60 f0       	brcs	.+24     	; 0x16c8 <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    16b0:	22 e0       	ldi	r18, 0x02	; 2
    16b2:	82 16       	cp	r8, r18
    16b4:	91 04       	cpc	r9, r1
    16b6:	a1 04       	cpc	r10, r1
    16b8:	b1 04       	cpc	r11, r1
    16ba:	08 f4       	brcc	.+2      	; 0x16be <create_chain+0xba>
    16bc:	68 c0       	rjmp	.+208    	; 0x178e <create_chain+0x18a>
    16be:	f2 e0       	ldi	r31, 0x02	; 2
    16c0:	cf 2e       	mov	r12, r31
    16c2:	d1 2c       	mov	r13, r1
    16c4:	e1 2c       	mov	r14, r1
    16c6:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    16c8:	ce 01       	movw	r24, r28
    16ca:	b7 01       	movw	r22, r14
    16cc:	a6 01       	movw	r20, r12
    16ce:	cb de       	rcall	.-618    	; 0x1466 <get_fat>
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    16d4:	61 15       	cp	r22, r1
    16d6:	71 05       	cpc	r23, r1
    16d8:	81 05       	cpc	r24, r1
    16da:	91 05       	cpc	r25, r1
    16dc:	a9 f0       	breq	.+42     	; 0x1708 <create_chain+0x104>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    16de:	2f 3f       	cpi	r18, 0xFF	; 255
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	38 07       	cpc	r19, r24
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	48 07       	cpc	r20, r24
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	58 07       	cpc	r21, r24
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <create_chain+0xec>
    16ee:	53 c0       	rjmp	.+166    	; 0x1796 <create_chain+0x192>
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	41 05       	cpc	r20, r1
    16f6:	51 05       	cpc	r21, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <create_chain+0xf8>
    16fa:	4d c0       	rjmp	.+154    	; 0x1796 <create_chain+0x192>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    16fc:	c8 14       	cp	r12, r8
    16fe:	d9 04       	cpc	r13, r9
    1700:	ea 04       	cpc	r14, r10
    1702:	fb 04       	cpc	r15, r11
    1704:	39 f6       	brne	.-114    	; 0x1694 <create_chain+0x90>
    1706:	43 c0       	rjmp	.+134    	; 0x178e <create_chain+0x18a>
    1708:	bc 2c       	mov	r11, r12
    170a:	ad 2c       	mov	r10, r13
    170c:	9e 2c       	mov	r9, r14
    170e:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1710:	ce 01       	movw	r24, r28
    1712:	a6 01       	movw	r20, r12
    1714:	b7 01       	movw	r22, r14
    1716:	0f ef       	ldi	r16, 0xFF	; 255
    1718:	1f ef       	ldi	r17, 0xFF	; 255
    171a:	2f ef       	ldi	r18, 0xFF	; 255
    171c:	3f e0       	ldi	r19, 0x0F	; 15
    171e:	b0 dd       	rcall	.-1184   	; 0x1280 <put_fat>
	if (res == FR_OK && clst != 0) {
    1720:	88 23       	and	r24, r24
    1722:	49 f5       	brne	.+82     	; 0x1776 <create_chain+0x172>
    1724:	41 14       	cp	r4, r1
    1726:	51 04       	cpc	r5, r1
    1728:	61 04       	cpc	r6, r1
    172a:	71 04       	cpc	r7, r1
    172c:	41 f0       	breq	.+16     	; 0x173e <create_chain+0x13a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    172e:	ce 01       	movw	r24, r28
    1730:	b3 01       	movw	r22, r6
    1732:	a2 01       	movw	r20, r4
    1734:	86 01       	movw	r16, r12
    1736:	97 01       	movw	r18, r14
    1738:	a3 dd       	rcall	.-1210   	; 0x1280 <put_fat>
	}
	if (res == FR_OK) {
    173a:	88 23       	and	r24, r24
    173c:	e1 f4       	brne	.+56     	; 0x1776 <create_chain+0x172>
		fs->last_clust = ncl;			/* Update FSINFO */
    173e:	ba 86       	std	Y+10, r11	; 0x0a
    1740:	ab 86       	std	Y+11, r10	; 0x0b
    1742:	9c 86       	std	Y+12, r9	; 0x0c
    1744:	8d 86       	std	Y+13, r8	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    1746:	8e 85       	ldd	r24, Y+14	; 0x0e
    1748:	9f 85       	ldd	r25, Y+15	; 0x0f
    174a:	a8 89       	ldd	r26, Y+16	; 0x10
    174c:	b9 89       	ldd	r27, Y+17	; 0x11
    174e:	8f 3f       	cpi	r24, 0xFF	; 255
    1750:	2f ef       	ldi	r18, 0xFF	; 255
    1752:	92 07       	cpc	r25, r18
    1754:	2f ef       	ldi	r18, 0xFF	; 255
    1756:	a2 07       	cpc	r26, r18
    1758:	2f ef       	ldi	r18, 0xFF	; 255
    175a:	b2 07       	cpc	r27, r18
    175c:	49 f0       	breq	.+18     	; 0x1770 <create_chain+0x16c>
			fs->free_clust--;
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	a1 09       	sbc	r26, r1
    1762:	b1 09       	sbc	r27, r1
    1764:	8e 87       	std	Y+14, r24	; 0x0e
    1766:	9f 87       	std	Y+15, r25	; 0x0f
    1768:	a8 8b       	std	Y+16, r26	; 0x10
    176a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	a7 01       	movw	r20, r14
    1772:	96 01       	movw	r18, r12
    1774:	10 c0       	rjmp	.+32     	; 0x1796 <create_chain+0x192>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	29 f0       	breq	.+10     	; 0x1784 <create_chain+0x180>
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <create_chain+0x192>
    1784:	2f ef       	ldi	r18, 0xFF	; 255
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f ef       	ldi	r20, 0xFF	; 255
    178a:	5f ef       	ldi	r21, 0xFF	; 255
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <create_chain+0x192>
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1796:	b9 01       	movw	r22, r18
    1798:	ca 01       	movw	r24, r20
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	6f 90       	pop	r6
    17b6:	5f 90       	pop	r5
    17b8:	4f 90       	pop	r4
    17ba:	08 95       	ret

000017bc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	8c 01       	movw	r16, r24
    17ca:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    17cc:	dc 01       	movw	r26, r24
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	7c 93       	st	X, r23
    17d2:	6e 93       	st	-X, r22
    17d4:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    17d6:	16 96       	adiw	r26, 0x06	; 6
    17d8:	4d 91       	ld	r20, X+
    17da:	5d 91       	ld	r21, X+
    17dc:	6d 91       	ld	r22, X+
    17de:	7c 91       	ld	r23, X
    17e0:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    17e2:	41 30       	cpi	r20, 0x01	; 1
    17e4:	51 05       	cpc	r21, r1
    17e6:	61 05       	cpc	r22, r1
    17e8:	71 05       	cpc	r23, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <dir_sdi+0x32>
    17ec:	9e c0       	rjmp	.+316    	; 0x192a <dir_sdi+0x16e>
    17ee:	ed 91       	ld	r30, X+
    17f0:	fc 91       	ld	r31, X
    17f2:	86 89       	ldd	r24, Z+22	; 0x16
    17f4:	97 89       	ldd	r25, Z+23	; 0x17
    17f6:	a0 8d       	ldd	r26, Z+24	; 0x18
    17f8:	b1 8d       	ldd	r27, Z+25	; 0x19
    17fa:	48 17       	cp	r20, r24
    17fc:	59 07       	cpc	r21, r25
    17fe:	6a 07       	cpc	r22, r26
    1800:	7b 07       	cpc	r23, r27
    1802:	08 f0       	brcs	.+2      	; 0x1806 <dir_sdi+0x4a>
    1804:	92 c0       	rjmp	.+292    	; 0x192a <dir_sdi+0x16e>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1806:	41 15       	cp	r20, r1
    1808:	51 05       	cpc	r21, r1
    180a:	61 05       	cpc	r22, r1
    180c:	71 05       	cpc	r23, r1
    180e:	81 f5       	brne	.+96     	; 0x1870 <dir_sdi+0xb4>
    1810:	80 81       	ld	r24, Z
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	49 f4       	brne	.+18     	; 0x1828 <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    1816:	42 a1       	ldd	r20, Z+34	; 0x22
    1818:	53 a1       	ldd	r21, Z+35	; 0x23
    181a:	64 a1       	ldd	r22, Z+36	; 0x24
    181c:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    181e:	41 15       	cp	r20, r1
    1820:	51 05       	cpc	r21, r1
    1822:	61 05       	cpc	r22, r1
    1824:	71 05       	cpc	r23, r1
    1826:	21 f5       	brne	.+72     	; 0x1870 <dir_sdi+0xb4>
		dj->clust = clst;
    1828:	f8 01       	movw	r30, r16
    182a:	12 86       	std	Z+10, r1	; 0x0a
    182c:	13 86       	std	Z+11, r1	; 0x0b
    182e:	14 86       	std	Z+12, r1	; 0x0c
    1830:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1832:	01 90       	ld	r0, Z+
    1834:	f0 81       	ld	r31, Z
    1836:	e0 2d       	mov	r30, r0
    1838:	80 85       	ldd	r24, Z+8	; 0x08
    183a:	91 85       	ldd	r25, Z+9	; 0x09
    183c:	c8 17       	cp	r28, r24
    183e:	d9 07       	cpc	r29, r25
    1840:	08 f0       	brcs	.+2      	; 0x1844 <dir_sdi+0x88>
    1842:	73 c0       	rjmp	.+230    	; 0x192a <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1844:	ce 01       	movw	r24, r28
    1846:	a4 e0       	ldi	r26, 0x04	; 4
    1848:	96 95       	lsr	r25
    184a:	87 95       	ror	r24
    184c:	aa 95       	dec	r26
    184e:	e1 f7       	brne	.-8      	; 0x1848 <dir_sdi+0x8c>
    1850:	a0 e0       	ldi	r26, 0x00	; 0
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	22 a1       	ldd	r18, Z+34	; 0x22
    1856:	33 a1       	ldd	r19, Z+35	; 0x23
    1858:	44 a1       	ldd	r20, Z+36	; 0x24
    185a:	55 a1       	ldd	r21, Z+37	; 0x25
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	a4 1f       	adc	r26, r20
    1862:	b5 1f       	adc	r27, r21
    1864:	f8 01       	movw	r30, r16
    1866:	86 87       	std	Z+14, r24	; 0x0e
    1868:	97 87       	std	Z+15, r25	; 0x0f
    186a:	a0 8b       	std	Z+16, r26	; 0x10
    186c:	b1 8b       	std	Z+17, r27	; 0x11
    186e:	49 c0       	rjmp	.+146    	; 0x1902 <dir_sdi+0x146>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	e8 2e       	mov	r14, r24
    1874:	ff 24       	eor	r15, r15
    1876:	e4 e0       	ldi	r30, 0x04	; 4
    1878:	ee 0c       	add	r14, r14
    187a:	ff 1c       	adc	r15, r15
    187c:	ea 95       	dec	r30
    187e:	e1 f7       	brne	.-8      	; 0x1878 <dir_sdi+0xbc>
    1880:	21 c0       	rjmp	.+66     	; 0x18c4 <dir_sdi+0x108>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1882:	f1 dd       	rcall	.-1054   	; 0x1466 <get_fat>
    1884:	ab 01       	movw	r20, r22
    1886:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1888:	4f 3f       	cpi	r20, 0xFF	; 255
    188a:	ff ef       	ldi	r31, 0xFF	; 255
    188c:	5f 07       	cpc	r21, r31
    188e:	ff ef       	ldi	r31, 0xFF	; 255
    1890:	6f 07       	cpc	r22, r31
    1892:	ff ef       	ldi	r31, 0xFF	; 255
    1894:	7f 07       	cpc	r23, r31
    1896:	11 f4       	brne	.+4      	; 0x189c <dir_sdi+0xe0>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	48 c0       	rjmp	.+144    	; 0x192c <dir_sdi+0x170>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    189c:	42 30       	cpi	r20, 0x02	; 2
    189e:	51 05       	cpc	r21, r1
    18a0:	61 05       	cpc	r22, r1
    18a2:	71 05       	cpc	r23, r1
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <dir_sdi+0xec>
    18a6:	41 c0       	rjmp	.+130    	; 0x192a <dir_sdi+0x16e>
    18a8:	d8 01       	movw	r26, r16
    18aa:	ed 91       	ld	r30, X+
    18ac:	fc 91       	ld	r31, X
    18ae:	86 89       	ldd	r24, Z+22	; 0x16
    18b0:	97 89       	ldd	r25, Z+23	; 0x17
    18b2:	a0 8d       	ldd	r26, Z+24	; 0x18
    18b4:	b1 8d       	ldd	r27, Z+25	; 0x19
    18b6:	48 17       	cp	r20, r24
    18b8:	59 07       	cpc	r21, r25
    18ba:	6a 07       	cpc	r22, r26
    18bc:	7b 07       	cpc	r23, r27
    18be:	a8 f5       	brcc	.+106    	; 0x192a <dir_sdi+0x16e>
				return FR_INT_ERR;
			idx -= ic;
    18c0:	ce 19       	sub	r28, r14
    18c2:	df 09       	sbc	r29, r15
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    18ca:	ce 15       	cp	r28, r14
    18cc:	df 05       	cpc	r29, r15
    18ce:	c8 f6       	brcc	.-78     	; 0x1882 <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    18d0:	d8 01       	movw	r26, r16
    18d2:	1a 96       	adiw	r26, 0x0a	; 10
    18d4:	4d 93       	st	X+, r20
    18d6:	5d 93       	st	X+, r21
    18d8:	6d 93       	st	X+, r22
    18da:	7c 93       	st	X, r23
    18dc:	1d 97       	sbiw	r26, 0x0d	; 13
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    18de:	c7 db       	rcall	.-2162   	; 0x106e <clust2sect>
    18e0:	9e 01       	movw	r18, r28
    18e2:	44 e0       	ldi	r20, 0x04	; 4
    18e4:	36 95       	lsr	r19
    18e6:	27 95       	ror	r18
    18e8:	4a 95       	dec	r20
    18ea:	e1 f7       	brne	.-8      	; 0x18e4 <dir_sdi+0x128>
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	26 0f       	add	r18, r22
    18f2:	37 1f       	adc	r19, r23
    18f4:	48 1f       	adc	r20, r24
    18f6:	59 1f       	adc	r21, r25
    18f8:	f8 01       	movw	r30, r16
    18fa:	26 87       	std	Z+14, r18	; 0x0e
    18fc:	37 87       	std	Z+15, r19	; 0x0f
    18fe:	40 8b       	std	Z+16, r20	; 0x10
    1900:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1902:	cf 70       	andi	r28, 0x0F	; 15
    1904:	d0 70       	andi	r29, 0x00	; 0
    1906:	85 e0       	ldi	r24, 0x05	; 5
    1908:	cc 0f       	add	r28, r28
    190a:	dd 1f       	adc	r29, r29
    190c:	8a 95       	dec	r24
    190e:	e1 f7       	brne	.-8      	; 0x1908 <dir_sdi+0x14c>
    1910:	ae 96       	adiw	r28, 0x2e	; 46
    1912:	d8 01       	movw	r26, r16
    1914:	8d 91       	ld	r24, X+
    1916:	9c 91       	ld	r25, X
    1918:	11 97       	sbiw	r26, 0x01	; 1
    191a:	8c 0f       	add	r24, r28
    191c:	9d 1f       	adc	r25, r29
    191e:	53 96       	adiw	r26, 0x13	; 19
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
    1924:	52 97       	sbiw	r26, 0x12	; 18
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	01 c0       	rjmp	.+2      	; 0x192c <dir_sdi+0x170>

	return FR_OK;	/* Seek succeeded */
    192a:	82 e0       	ldi	r24, 0x02	; 2
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	08 95       	ret

0000193a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1956:	ac 80       	ldd	r10, Y+4	; 0x04
    1958:	bd 80       	ldd	r11, Y+5	; 0x05
    195a:	08 94       	sec
    195c:	a1 1c       	adc	r10, r1
    195e:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1960:	a1 14       	cp	r10, r1
    1962:	b1 04       	cpc	r11, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <dir_next+0x2e>
    1966:	e5 c0       	rjmp	.+458    	; 0x1b32 <dir_next+0x1f8>
    1968:	8e 85       	ldd	r24, Y+14	; 0x0e
    196a:	9f 85       	ldd	r25, Y+15	; 0x0f
    196c:	a8 89       	ldd	r26, Y+16	; 0x10
    196e:	b9 89       	ldd	r27, Y+17	; 0x11
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	a1 05       	cpc	r26, r1
    1974:	b1 05       	cpc	r27, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <dir_next+0x40>
    1978:	dc c0       	rjmp	.+440    	; 0x1b32 <dir_next+0x1f8>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    197a:	2f e0       	ldi	r18, 0x0F	; 15
    197c:	82 2e       	mov	r8, r18
    197e:	91 2c       	mov	r9, r1
    1980:	8a 20       	and	r8, r10
    1982:	9b 20       	and	r9, r11
    1984:	81 14       	cp	r8, r1
    1986:	91 04       	cpc	r9, r1
    1988:	09 f0       	breq	.+2      	; 0x198c <dir_next+0x52>
    198a:	c0 c0       	rjmp	.+384    	; 0x1b0c <dir_next+0x1d2>
		dj->sect++;					/* Next sector */
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	a1 1d       	adc	r26, r1
    1990:	b1 1d       	adc	r27, r1
    1992:	8e 87       	std	Y+14, r24	; 0x0e
    1994:	9f 87       	std	Y+15, r25	; 0x0f
    1996:	a8 8b       	std	Y+16, r26	; 0x10
    1998:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    199a:	4a 85       	ldd	r20, Y+10	; 0x0a
    199c:	5b 85       	ldd	r21, Y+11	; 0x0b
    199e:	6c 85       	ldd	r22, Y+12	; 0x0c
    19a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    19a2:	e8 81       	ld	r30, Y
    19a4:	f9 81       	ldd	r31, Y+1	; 0x01
    19a6:	41 15       	cp	r20, r1
    19a8:	51 05       	cpc	r21, r1
    19aa:	61 05       	cpc	r22, r1
    19ac:	71 05       	cpc	r23, r1
    19ae:	39 f4       	brne	.+14     	; 0x19be <dir_next+0x84>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    19b0:	80 85       	ldd	r24, Z+8	; 0x08
    19b2:	91 85       	ldd	r25, Z+9	; 0x09
    19b4:	a8 16       	cp	r10, r24
    19b6:	b9 06       	cpc	r11, r25
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <dir_next+0x82>
    19ba:	a8 c0       	rjmp	.+336    	; 0x1b0c <dir_next+0x1d2>
    19bc:	ba c0       	rjmp	.+372    	; 0x1b32 <dir_next+0x1f8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	95 01       	movw	r18, r10
    19c6:	a4 e0       	ldi	r26, 0x04	; 4
    19c8:	36 95       	lsr	r19
    19ca:	27 95       	ror	r18
    19cc:	aa 95       	dec	r26
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <dir_next+0x8e>
    19d0:	82 23       	and	r24, r18
    19d2:	93 23       	and	r25, r19
    19d4:	89 2b       	or	r24, r25
    19d6:	09 f0       	breq	.+2      	; 0x19da <dir_next+0xa0>
    19d8:	99 c0       	rjmp	.+306    	; 0x1b0c <dir_next+0x1d2>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    19da:	cf 01       	movw	r24, r30
    19dc:	44 dd       	rcall	.-1400   	; 0x1466 <get_fat>
    19de:	6b 01       	movw	r12, r22
    19e0:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	c8 16       	cp	r12, r24
    19e6:	d1 04       	cpc	r13, r1
    19e8:	e1 04       	cpc	r14, r1
    19ea:	f1 04       	cpc	r15, r1
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <dir_next+0xb6>
    19ee:	a3 c0       	rjmp	.+326    	; 0x1b36 <dir_next+0x1fc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	c9 16       	cp	r12, r25
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	d9 06       	cpc	r13, r25
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	e9 06       	cpc	r14, r25
    19fc:	9f ef       	ldi	r25, 0xFF	; 255
    19fe:	f9 06       	cpc	r15, r25
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <dir_next+0xca>
    1a02:	9b c0       	rjmp	.+310    	; 0x1b3a <dir_next+0x200>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1a04:	e8 81       	ld	r30, Y
    1a06:	f9 81       	ldd	r31, Y+1	; 0x01
    1a08:	86 89       	ldd	r24, Z+22	; 0x16
    1a0a:	97 89       	ldd	r25, Z+23	; 0x17
    1a0c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a0e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a10:	c8 16       	cp	r12, r24
    1a12:	d9 06       	cpc	r13, r25
    1a14:	ea 06       	cpc	r14, r26
    1a16:	fb 06       	cpc	r15, r27
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <dir_next+0xe2>
    1a1a:	6b c0       	rjmp	.+214    	; 0x1af2 <dir_next+0x1b8>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1a1c:	01 2b       	or	r16, r17
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <dir_next+0xe8>
    1a20:	88 c0       	rjmp	.+272    	; 0x1b32 <dir_next+0x1f8>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1a22:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a24:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2a:	cf 01       	movw	r24, r30
    1a2c:	eb dd       	rcall	.-1066   	; 0x1604 <create_chain>
    1a2e:	6b 01       	movw	r12, r22
    1a30:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1a32:	61 15       	cp	r22, r1
    1a34:	71 05       	cpc	r23, r1
    1a36:	81 05       	cpc	r24, r1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <dir_next+0x106>
    1a3c:	87 e0       	ldi	r24, 0x07	; 7
    1a3e:	7e c0       	rjmp	.+252    	; 0x1b3c <dir_next+0x202>
					if (clst == 1) return FR_INT_ERR;
    1a40:	61 30       	cpi	r22, 0x01	; 1
    1a42:	71 05       	cpc	r23, r1
    1a44:	81 05       	cpc	r24, r1
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <dir_next+0x112>
    1a4a:	75 c0       	rjmp	.+234    	; 0x1b36 <dir_next+0x1fc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a4e:	ff ef       	ldi	r31, 0xFF	; 255
    1a50:	7f 07       	cpc	r23, r31
    1a52:	ff ef       	ldi	r31, 0xFF	; 255
    1a54:	8f 07       	cpc	r24, r31
    1a56:	ff ef       	ldi	r31, 0xFF	; 255
    1a58:	9f 07       	cpc	r25, r31
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <dir_next+0x124>
    1a5c:	6e c0       	rjmp	.+220    	; 0x1b3a <dir_next+0x200>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1a5e:	88 81       	ld	r24, Y
    1a60:	99 81       	ldd	r25, Y+1	; 0x01
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	94 db       	rcall	.-2264   	; 0x1194 <move_window>
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <dir_next+0x138>
    1a70:	64 c0       	rjmp	.+200    	; 0x1b3a <dir_next+0x200>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    1a72:	88 81       	ld	r24, Y
    1a74:	99 81       	ldd	r25, Y+1	; 0x01
    1a76:	8e 96       	adiw	r24, 0x2e	; 46
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	52 e0       	ldi	r21, 0x02	; 2
    1a80:	ed da       	rcall	.-2598   	; 0x105c <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1a82:	08 81       	ld	r16, Y
    1a84:	19 81       	ldd	r17, Y+1	; 0x01
    1a86:	c8 01       	movw	r24, r16
    1a88:	b7 01       	movw	r22, r14
    1a8a:	a6 01       	movw	r20, r12
    1a8c:	f0 da       	rcall	.-2592   	; 0x106e <clust2sect>
    1a8e:	f8 01       	movw	r30, r16
    1a90:	62 a7       	std	Z+42, r22	; 0x2a
    1a92:	73 a7       	std	Z+43, r23	; 0x2b
    1a94:	84 a7       	std	Z+44, r24	; 0x2c
    1a96:	95 a7       	std	Z+45, r25	; 0x2d
    1a98:	00 e0       	ldi	r16, 0x00	; 0
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1a9a:	11 e0       	ldi	r17, 0x01	; 1
    1a9c:	19 c0       	rjmp	.+50     	; 0x1ad0 <dir_next+0x196>
    1a9e:	14 83       	std	Z+4, r17	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1aa0:	88 81       	ld	r24, Y
    1aa2:	99 81       	ldd	r25, Y+1	; 0x01
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	73 db       	rcall	.-2330   	; 0x1194 <move_window>
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <dir_next+0x17a>
    1ab2:	43 c0       	rjmp	.+134    	; 0x1b3a <dir_next+0x200>
						dj->fs->winsect++;
    1ab4:	e8 81       	ld	r30, Y
    1ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1aba:	93 a5       	ldd	r25, Z+43	; 0x2b
    1abc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1abe:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	b1 1d       	adc	r27, r1
    1ac6:	82 a7       	std	Z+42, r24	; 0x2a
    1ac8:	93 a7       	std	Z+43, r25	; 0x2b
    1aca:	a4 a7       	std	Z+44, r26	; 0x2c
    1acc:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1ace:	0f 5f       	subi	r16, 0xFF	; 255
    1ad0:	e8 81       	ld	r30, Y
    1ad2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	08 17       	cp	r16, r24
    1ad8:	10 f3       	brcs	.-60     	; 0x1a9e <dir_next+0x164>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1ada:	82 a5       	ldd	r24, Z+42	; 0x2a
    1adc:	93 a5       	ldd	r25, Z+43	; 0x2b
    1ade:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1ae0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ae2:	80 1b       	sub	r24, r16
    1ae4:	91 09       	sbc	r25, r1
    1ae6:	a1 09       	sbc	r26, r1
    1ae8:	b1 09       	sbc	r27, r1
    1aea:	82 a7       	std	Z+42, r24	; 0x2a
    1aec:	93 a7       	std	Z+43, r25	; 0x2b
    1aee:	a4 a7       	std	Z+44, r26	; 0x2c
    1af0:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1af2:	ca 86       	std	Y+10, r12	; 0x0a
    1af4:	db 86       	std	Y+11, r13	; 0x0b
    1af6:	ec 86       	std	Y+12, r14	; 0x0c
    1af8:	fd 86       	std	Y+13, r15	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1afa:	88 81       	ld	r24, Y
    1afc:	99 81       	ldd	r25, Y+1	; 0x01
    1afe:	b7 01       	movw	r22, r14
    1b00:	a6 01       	movw	r20, r12
    1b02:	b5 da       	rcall	.-2710   	; 0x106e <clust2sect>
    1b04:	6e 87       	std	Y+14, r22	; 0x0e
    1b06:	7f 87       	std	Y+15, r23	; 0x0f
    1b08:	88 8b       	std	Y+16, r24	; 0x10
    1b0a:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    1b0c:	bd 82       	std	Y+5, r11	; 0x05
    1b0e:	ac 82       	std	Y+4, r10	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    1b10:	75 e0       	ldi	r23, 0x05	; 5
    1b12:	88 0c       	add	r8, r8
    1b14:	99 1c       	adc	r9, r9
    1b16:	7a 95       	dec	r23
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <dir_next+0x1d8>
    1b1a:	8e e2       	ldi	r24, 0x2E	; 46
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	88 0e       	add	r8, r24
    1b20:	99 1e       	adc	r9, r25
    1b22:	88 81       	ld	r24, Y
    1b24:	99 81       	ldd	r25, Y+1	; 0x01
    1b26:	88 0d       	add	r24, r8
    1b28:	99 1d       	adc	r25, r9
    1b2a:	9b 8b       	std	Y+19, r25	; 0x13
    1b2c:	8a 8b       	std	Y+18, r24	; 0x12
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <dir_next+0x202>

	return FR_OK;
    1b32:	84 e0       	ldi	r24, 0x04	; 4
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <dir_next+0x202>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <dir_next+0x202>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	8f 90       	pop	r8
    1b54:	08 95       	ret

00001b56 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    1b56:	2f 92       	push	r2
    1b58:	3f 92       	push	r3
    1b5a:	4f 92       	push	r4
    1b5c:	5f 92       	push	r5
    1b5e:	6f 92       	push	r6
    1b60:	7f 92       	push	r7
    1b62:	8f 92       	push	r8
    1b64:	9f 92       	push	r9
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
    1b7c:	16 2f       	mov	r17, r22
    1b7e:	07 2f       	mov	r16, r23
    1b80:	3a 01       	movw	r6, r20
    1b82:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    1b84:	f9 01       	movw	r30, r18
    1b86:	11 82       	std	Z+1, r1	; 0x01
    1b88:	10 82       	st	Z, r1

	res = validate(fp);							/* Check validity */
    1b8a:	e8 da       	rcall	.-2608   	; 0x115c <validate>
    1b8c:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <f_read+0x3e>
    1b92:	0d c1       	rjmp	.+538    	; 0x1dae <f_read+0x258>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	87 fd       	sbrc	r24, 7
    1b98:	54 c0       	rjmp	.+168    	; 0x1c42 <f_read+0xec>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    1b9a:	80 fd       	sbrc	r24, 0
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <f_read+0x4e>
    1b9e:	07 e0       	ldi	r16, 0x07	; 7
    1ba0:	80 2e       	mov	r8, r16
    1ba2:	05 c1       	rjmp	.+522    	; 0x1dae <f_read+0x258>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1ba4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ba6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ba8:	4c 85       	ldd	r20, Y+12	; 0x0c
    1baa:	5d 85       	ldd	r21, Y+13	; 0x0d
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	a8 85       	ldd	r26, Y+8	; 0x08
    1bb2:	b9 85       	ldd	r27, Y+9	; 0x09
    1bb4:	28 1b       	sub	r18, r24
    1bb6:	39 0b       	sbc	r19, r25
    1bb8:	4a 0b       	sbc	r20, r26
    1bba:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1bbc:	c3 01       	movw	r24, r6
    1bbe:	a0 e0       	ldi	r26, 0x00	; 0
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	4a 07       	cpc	r20, r26
    1bc8:	5b 07       	cpc	r21, r27
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <f_read+0x78>
    1bcc:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    1bce:	81 2f       	mov	r24, r17
    1bd0:	90 2f       	mov	r25, r16
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	29 01       	movw	r4, r18
    1bd6:	e7 c0       	rjmp	.+462    	; 0x1da6 <f_read+0x250>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    1bd8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bda:	3f 81       	ldd	r19, Y+7	; 0x07
    1bdc:	48 85       	ldd	r20, Y+8	; 0x08
    1bde:	59 85       	ldd	r21, Y+9	; 0x09
    1be0:	da 01       	movw	r26, r20
    1be2:	c9 01       	movw	r24, r18
    1be4:	91 70       	andi	r25, 0x01	; 1
    1be6:	a0 70       	andi	r26, 0x00	; 0
    1be8:	b0 70       	andi	r27, 0x00	; 0
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	a1 05       	cpc	r26, r1
    1bee:	b1 05       	cpc	r27, r1
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <f_read+0x9e>
    1bf2:	96 c0       	rjmp	.+300    	; 0x1d20 <f_read+0x1ca>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1bf4:	e8 81       	ld	r30, Y
    1bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf8:	da 01       	movw	r26, r20
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	19 e0       	ldi	r17, 0x09	; 9
    1bfe:	b6 95       	lsr	r27
    1c00:	a7 95       	ror	r26
    1c02:	97 95       	ror	r25
    1c04:	87 95       	ror	r24
    1c06:	1a 95       	dec	r17
    1c08:	d1 f7       	brne	.-12     	; 0x1bfe <f_read+0xa8>
    1c0a:	92 80       	ldd	r9, Z+2	; 0x02
    1c0c:	9a 94       	dec	r9
    1c0e:	98 22       	and	r9, r24
			if (!csect) {						/* On the cluster boundary? */
    1c10:	41 f5       	brne	.+80     	; 0x1c62 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1c12:	21 15       	cp	r18, r1
    1c14:	31 05       	cpc	r19, r1
    1c16:	41 05       	cpc	r20, r1
    1c18:	51 05       	cpc	r21, r1
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <f_read+0xd0>
					clst = fp->sclust;			/* Follow from the origin */
    1c1c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c1e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c20:	88 89       	ldd	r24, Y+16	; 0x10
    1c22:	99 89       	ldd	r25, Y+17	; 0x11
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <f_read+0xdc>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    1c26:	4a 89       	ldd	r20, Y+18	; 0x12
    1c28:	5b 89       	ldd	r21, Y+19	; 0x13
    1c2a:	6c 89       	ldd	r22, Y+20	; 0x14
    1c2c:	7d 89       	ldd	r23, Y+21	; 0x15
    1c2e:	cf 01       	movw	r24, r30
    1c30:	1a dc       	rcall	.-1996   	; 0x1466 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1c32:	62 30       	cpi	r22, 0x02	; 2
    1c34:	71 05       	cpc	r23, r1
    1c36:	81 05       	cpc	r24, r1
    1c38:	91 05       	cpc	r25, r1
    1c3a:	30 f4       	brcc	.+12     	; 0x1c48 <f_read+0xf2>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 83       	std	Y+4, r24	; 0x04
    1c42:	e2 e0       	ldi	r30, 0x02	; 2
    1c44:	8e 2e       	mov	r8, r30
    1c46:	b3 c0       	rjmp	.+358    	; 0x1dae <f_read+0x258>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1c48:	6f 3f       	cpi	r22, 0xFF	; 255
    1c4a:	ff ef       	ldi	r31, 0xFF	; 255
    1c4c:	7f 07       	cpc	r23, r31
    1c4e:	ff ef       	ldi	r31, 0xFF	; 255
    1c50:	8f 07       	cpc	r24, r31
    1c52:	ff ef       	ldi	r31, 0xFF	; 255
    1c54:	9f 07       	cpc	r25, r31
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <f_read+0x104>
    1c58:	70 c0       	rjmp	.+224    	; 0x1d3a <f_read+0x1e4>
				fp->clust = clst;				/* Update current cluster */
    1c5a:	6a 8b       	std	Y+18, r22	; 0x12
    1c5c:	7b 8b       	std	Y+19, r23	; 0x13
    1c5e:	8c 8b       	std	Y+20, r24	; 0x14
    1c60:	9d 8b       	std	Y+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1c62:	08 81       	ld	r16, Y
    1c64:	19 81       	ldd	r17, Y+1	; 0x01
    1c66:	4a 89       	ldd	r20, Y+18	; 0x12
    1c68:	5b 89       	ldd	r21, Y+19	; 0x13
    1c6a:	6c 89       	ldd	r22, Y+20	; 0x14
    1c6c:	7d 89       	ldd	r23, Y+21	; 0x15
    1c6e:	c8 01       	movw	r24, r16
    1c70:	fe d9       	rcall	.-3076   	; 0x106e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1c72:	61 15       	cp	r22, r1
    1c74:	71 05       	cpc	r23, r1
    1c76:	81 05       	cpc	r24, r1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	01 f3       	breq	.-64     	; 0x1c3c <f_read+0xe6>
			sect += csect;
    1c7c:	6b 01       	movw	r12, r22
    1c7e:	7c 01       	movw	r14, r24
    1c80:	c9 0c       	add	r12, r9
    1c82:	d1 1c       	adc	r13, r1
    1c84:	e1 1c       	adc	r14, r1
    1c86:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    1c88:	53 01       	movw	r10, r6
    1c8a:	ab 2c       	mov	r10, r11
    1c8c:	bb 24       	eor	r11, r11
    1c8e:	a6 94       	lsr	r10
			if (cc) {							/* Read maximum contiguous sectors directly */
    1c90:	a1 14       	cp	r10, r1
    1c92:	b1 04       	cpc	r11, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <f_read+0x142>
    1c96:	40 c0       	rjmp	.+128    	; 0x1d18 <f_read+0x1c2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1c98:	f8 01       	movw	r30, r16
    1c9a:	22 81       	ldd	r18, Z+2	; 0x02
    1c9c:	49 2d       	mov	r20, r9
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	84 0f       	add	r24, r20
    1ca4:	95 1f       	adc	r25, r21
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	28 17       	cp	r18, r24
    1caa:	39 07       	cpc	r19, r25
    1cac:	18 f4       	brcc	.+6      	; 0x1cb4 <f_read+0x15e>
					cc = fp->fs->csize - csect;
    1cae:	59 01       	movw	r10, r18
    1cb0:	a4 1a       	sub	r10, r20
    1cb2:	b5 0a       	sbc	r11, r21
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	81 81       	ldd	r24, Z+1	; 0x01
    1cb8:	b2 01       	movw	r22, r4
    1cba:	a7 01       	movw	r20, r14
    1cbc:	96 01       	movw	r18, r12
    1cbe:	0a 2d       	mov	r16, r10
    1cc0:	10 d9       	rcall	.-3552   	; 0xee2 <disk_read>
    1cc2:	88 23       	and	r24, r24
    1cc4:	d1 f5       	brne	.+116    	; 0x1d3a <f_read+0x1e4>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    1cc6:	e8 81       	ld	r30, Y
    1cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cca:	84 81       	ldd	r24, Z+4	; 0x04
    1ccc:	88 23       	and	r24, r24
    1cce:	f9 f0       	breq	.+62     	; 0x1d0e <f_read+0x1b8>
    1cd0:	22 a5       	ldd	r18, Z+42	; 0x2a
    1cd2:	33 a5       	ldd	r19, Z+43	; 0x2b
    1cd4:	44 a5       	ldd	r20, Z+44	; 0x2c
    1cd6:	55 a5       	ldd	r21, Z+45	; 0x2d
    1cd8:	2c 19       	sub	r18, r12
    1cda:	3d 09       	sbc	r19, r13
    1cdc:	4e 09       	sbc	r20, r14
    1cde:	5f 09       	sbc	r21, r15
    1ce0:	c5 01       	movw	r24, r10
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	28 17       	cp	r18, r24
    1ce8:	39 07       	cpc	r19, r25
    1cea:	4a 07       	cpc	r20, r26
    1cec:	5b 07       	cpc	r21, r27
    1cee:	78 f4       	brcc	.+30     	; 0x1d0e <f_read+0x1b8>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1cf0:	69 e0       	ldi	r22, 0x09	; 9
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d1 f7       	brne	.-12     	; 0x1cf2 <f_read+0x19c>
    1cfe:	c2 01       	movw	r24, r4
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	be 96       	adiw	r30, 0x2e	; 46
    1d06:	bf 01       	movw	r22, r30
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	52 e0       	ldi	r21, 0x02	; 2
    1d0c:	7b d9       	rcall	.-3338   	; 0x1004 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    1d0e:	85 01       	movw	r16, r10
    1d10:	10 2f       	mov	r17, r16
    1d12:	00 27       	eor	r16, r16
    1d14:	11 0f       	add	r17, r17
    1d16:	2d c0       	rjmp	.+90     	; 0x1d72 <f_read+0x21c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1d18:	ce 8a       	std	Y+22, r12	; 0x16
    1d1a:	df 8a       	std	Y+23, r13	; 0x17
    1d1c:	e8 8e       	std	Y+24, r14	; 0x18
    1d1e:	f9 8e       	std	Y+25, r15	; 0x19
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1d20:	ee 80       	ldd	r14, Y+6	; 0x06
    1d22:	ff 80       	ldd	r15, Y+7	; 0x07
    1d24:	08 85       	ldd	r16, Y+8	; 0x08
    1d26:	19 85       	ldd	r17, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    1d28:	4e 89       	ldd	r20, Y+22	; 0x16
    1d2a:	5f 89       	ldd	r21, Y+23	; 0x17
    1d2c:	68 8d       	ldd	r22, Y+24	; 0x18
    1d2e:	79 8d       	ldd	r23, Y+25	; 0x19
    1d30:	88 81       	ld	r24, Y
    1d32:	99 81       	ldd	r25, Y+1	; 0x01
    1d34:	2f da       	rcall	.-2978   	; 0x1194 <move_window>
    1d36:	88 23       	and	r24, r24
    1d38:	31 f0       	breq	.+12     	; 0x1d46 <f_read+0x1f0>
			ABORT(fp->fs, FR_DISK_ERR);
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	8c 83       	std	Y+4, r24	; 0x04
    1d40:	88 24       	eor	r8, r8
    1d42:	83 94       	inc	r8
    1d44:	34 c0       	rjmp	.+104    	; 0x1dae <f_read+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1d46:	c7 01       	movw	r24, r14
    1d48:	91 70       	andi	r25, 0x01	; 1
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	32 e0       	ldi	r19, 0x02	; 2
    1d4e:	28 1b       	sub	r18, r24
    1d50:	39 0b       	sbc	r19, r25
    1d52:	83 01       	movw	r16, r6
    1d54:	26 15       	cp	r18, r6
    1d56:	37 05       	cpc	r19, r7
    1d58:	08 f4       	brcc	.+2      	; 0x1d5c <f_read+0x206>
    1d5a:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d60:	91 70       	andi	r25, 0x01	; 1
    1d62:	8e 96       	adiw	r24, 0x2e	; 46
    1d64:	68 81       	ld	r22, Y
    1d66:	79 81       	ldd	r23, Y+1	; 0x01
    1d68:	68 0f       	add	r22, r24
    1d6a:	79 1f       	adc	r23, r25
    1d6c:	c2 01       	movw	r24, r4
    1d6e:	a8 01       	movw	r20, r16
    1d70:	49 d9       	rcall	.-3438   	; 0x1004 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1d72:	40 0e       	add	r4, r16
    1d74:	51 1e       	adc	r5, r17
    1d76:	c8 01       	movw	r24, r16
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	48 85       	ldd	r20, Y+8	; 0x08
    1d82:	59 85       	ldd	r21, Y+9	; 0x09
    1d84:	28 0f       	add	r18, r24
    1d86:	39 1f       	adc	r19, r25
    1d88:	4a 1f       	adc	r20, r26
    1d8a:	5b 1f       	adc	r21, r27
    1d8c:	2e 83       	std	Y+6, r18	; 0x06
    1d8e:	3f 83       	std	Y+7, r19	; 0x07
    1d90:	48 87       	std	Y+8, r20	; 0x08
    1d92:	59 87       	std	Y+9, r21	; 0x09
    1d94:	f1 01       	movw	r30, r2
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	80 0f       	add	r24, r16
    1d9c:	91 1f       	adc	r25, r17
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	60 1a       	sub	r6, r16
    1da4:	71 0a       	sbc	r7, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    1da6:	61 14       	cp	r6, r1
    1da8:	71 04       	cpc	r7, r1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <f_read+0x258>
    1dac:	15 cf       	rjmp	.-470    	; 0x1bd8 <f_read+0x82>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1dae:	88 2d       	mov	r24, r8
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	6f 90       	pop	r6
    1dcc:	5f 90       	pop	r5
    1dce:	4f 90       	pop	r4
    1dd0:	3f 90       	pop	r3
    1dd2:	2f 90       	pop	r2
    1dd4:	08 95       	ret

00001dd6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    1dd6:	4f 92       	push	r4
    1dd8:	5f 92       	push	r5
    1dda:	6f 92       	push	r6
    1ddc:	7f 92       	push	r7
    1dde:	8f 92       	push	r8
    1de0:	9f 92       	push	r9
    1de2:	af 92       	push	r10
    1de4:	bf 92       	push	r11
    1de6:	cf 92       	push	r12
    1de8:	df 92       	push	r13
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <f_gets+0x22>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <f_gets+0x24>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	6c 01       	movw	r12, r24
    1e00:	5b 01       	movw	r10, r22
    1e02:	4a 01       	movw	r8, r20
    1e04:	7c 01       	movw	r14, r24
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    1e0a:	08 94       	sec
    1e0c:	a1 08       	sbc	r10, r1
    1e0e:	b1 08       	sbc	r11, r1
		f_read(fil, s, 1, &rc);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	48 2e       	mov	r4, r24
    1e14:	51 2c       	mov	r5, r1
    1e16:	4c 0e       	add	r4, r28
    1e18:	5d 1e       	adc	r5, r29
    1e1a:	3e 01       	movw	r6, r28
    1e1c:	08 94       	sec
    1e1e:	61 1c       	adc	r6, r1
    1e20:	71 1c       	adc	r7, r1
    1e22:	12 c0       	rjmp	.+36     	; 0x1e48 <f_gets+0x72>
    1e24:	c4 01       	movw	r24, r8
    1e26:	b3 01       	movw	r22, r6
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	92 01       	movw	r18, r4
    1e2e:	93 de       	rcall	.-730    	; 0x1b56 <f_read>
		if (rc != 1) break;			/* Break on EOF or error */
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	59 f4       	brne	.+22     	; 0x1e4e <f_gets+0x78>
		c = s[0];
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	81 93       	st	Z+, r24
    1e3e:	7f 01       	movw	r14, r30
		n++;
    1e40:	0f 5f       	subi	r16, 0xFF	; 255
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    1e44:	8a 30       	cpi	r24, 0x0A	; 10
    1e46:	19 f0       	breq	.+6      	; 0x1e4e <f_gets+0x78>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    1e48:	0a 15       	cp	r16, r10
    1e4a:	1b 05       	cpc	r17, r11
    1e4c:	5c f3       	brlt	.-42     	; 0x1e24 <f_gets+0x4e>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    1e4e:	f7 01       	movw	r30, r14
    1e50:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    1e52:	01 2b       	or	r16, r17
    1e54:	11 f4       	brne	.+4      	; 0x1e5a <f_gets+0x84>
    1e56:	cc 24       	eor	r12, r12
    1e58:	dd 24       	eor	r13, r13
}
    1e5a:	c6 01       	movw	r24, r12
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	bf 90       	pop	r11
    1e76:	af 90       	pop	r10
    1e78:	9f 90       	pop	r9
    1e7a:	8f 90       	pop	r8
    1e7c:	7f 90       	pop	r7
    1e7e:	6f 90       	pop	r6
    1e80:	5f 90       	pop	r5
    1e82:	4f 90       	pop	r4
    1e84:	08 95       	ret

00001e86 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1e86:	0f 93       	push	r16
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
    1e8e:	9a 01       	movw	r18, r20
    1e90:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1e92:	bc 01       	movw	r22, r24
    1e94:	62 5d       	subi	r22, 0xD2	; 210
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	01 e0       	ldi	r16, 0x01	; 1
    1e9c:	22 d8       	rcall	.-4028   	; 0xee2 <disk_read>
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <check_fs+0x20>
    1ea2:	23 e0       	ldi	r18, 0x03	; 3
    1ea4:	29 c0       	rjmp	.+82     	; 0x1ef8 <check_fs+0x72>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1ea6:	c4 5d       	subi	r28, 0xD4	; 212
    1ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	cc 52       	subi	r28, 0x2C	; 44
    1eb0:	d2 40       	sbci	r29, 0x02	; 2
    1eb2:	85 55       	subi	r24, 0x55	; 85
    1eb4:	9a 4a       	sbci	r25, 0xAA	; 170
    1eb6:	11 f0       	breq	.+4      	; 0x1ebc <check_fs+0x36>
    1eb8:	22 e0       	ldi	r18, 0x02	; 2
    1eba:	1e c0       	rjmp	.+60     	; 0x1ef8 <check_fs+0x72>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    1ebc:	cc 59       	subi	r28, 0x9C	; 156
    1ebe:	df 4f       	sbci	r29, 0xFF	; 255
    1ec0:	88 81       	ld	r24, Y
    1ec2:	99 81       	ldd	r25, Y+1	; 0x01
    1ec4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ec6:	bb 81       	ldd	r27, Y+3	; 0x03
    1ec8:	c4 56       	subi	r28, 0x64	; 100
    1eca:	d0 40       	sbci	r29, 0x00	; 0
    1ecc:	b0 70       	andi	r27, 0x00	; 0
    1ece:	86 54       	subi	r24, 0x46	; 70
    1ed0:	91 44       	sbci	r25, 0x41	; 65
    1ed2:	a4 45       	sbci	r26, 0x54	; 84
    1ed4:	b0 40       	sbci	r27, 0x00	; 0
    1ed6:	11 f4       	brne	.+4      	; 0x1edc <check_fs+0x56>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <check_fs+0x72>
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	c0 58       	subi	r28, 0x80	; 128
    1ee0:	df 4f       	sbci	r29, 0xFF	; 255
    1ee2:	88 81       	ld	r24, Y
    1ee4:	99 81       	ldd	r25, Y+1	; 0x01
    1ee6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee8:	bb 81       	ldd	r27, Y+3	; 0x03
    1eea:	b0 70       	andi	r27, 0x00	; 0
    1eec:	86 54       	subi	r24, 0x46	; 70
    1eee:	91 44       	sbci	r25, 0x41	; 65
    1ef0:	a4 45       	sbci	r26, 0x54	; 84
    1ef2:	b0 40       	sbci	r27, 0x00	; 0
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <check_fs+0x72>
    1ef6:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    1ef8:	82 2f       	mov	r24, r18
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	0f 91       	pop	r16
    1f00:	08 95       	ret

00001f02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    1f0c:	27 d9       	rcall	.-3506   	; 0x115c <validate>
    1f0e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1f10:	88 23       	and	r24, r24
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <f_sync+0x14>
    1f14:	9b c0       	rjmp	.+310    	; 0x204c <f_sync+0x14a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	85 ff       	sbrs	r24, 5
    1f1a:	98 c0       	rjmp	.+304    	; 0x204c <f_sync+0x14a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    1f1c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1f1e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1f20:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1f22:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1f24:	88 81       	ld	r24, Y
    1f26:	99 81       	ldd	r25, Y+1	; 0x01
    1f28:	35 d9       	rcall	.-3478   	; 0x1194 <move_window>
    1f2a:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <f_sync+0x30>
    1f30:	8d c0       	rjmp	.+282    	; 0x204c <f_sync+0x14a>
				dir = fp->dir_ptr;
    1f32:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1f34:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    1f36:	f8 01       	movw	r30, r16
    1f38:	83 85       	ldd	r24, Z+11	; 0x0b
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    1f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f42:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f44:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f46:	84 8f       	std	Z+28, r24	; 0x1c
    1f48:	95 8f       	std	Z+29, r25	; 0x1d
    1f4a:	a6 8f       	std	Z+30, r26	; 0x1e
    1f4c:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    1f4e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f50:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f52:	68 89       	ldd	r22, Y+16	; 0x10
    1f54:	79 89       	ldd	r23, Y+17	; 0x11
    1f56:	c8 01       	movw	r24, r16
    1f58:	e3 d8       	rcall	.-3642   	; 0x1120 <st_clust>
				tim = get_fattime();						/* Update updated time */
    1f5a:	0e 94 02 07 	call	0xe04	; 0xe04 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    1f5e:	f8 01       	movw	r30, r16
    1f60:	66 8b       	std	Z+22, r22	; 0x16
    1f62:	77 8b       	std	Z+23, r23	; 0x17
    1f64:	80 8f       	std	Z+24, r24	; 0x18
    1f66:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    1f68:	13 8a       	std	Z+19, r1	; 0x13
    1f6a:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	8f 7d       	andi	r24, 0xDF	; 223
    1f70:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    1f72:	e8 81       	ld	r30, Y
    1f74:	f9 81       	ldd	r31, Y+1	; 0x01
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    1f7a:	09 90       	ld	r0, Y+
    1f7c:	d8 81       	ld	r29, Y
    1f7e:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    1f80:	ce 01       	movw	r24, r28
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	04 d9       	rcall	.-3576   	; 0x1194 <move_window>
    1f8c:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <f_sync+0x92>
    1f92:	5c c0       	rjmp	.+184    	; 0x204c <f_sync+0x14a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1f94:	88 81       	ld	r24, Y
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <f_sync+0x9a>
    1f9a:	4f c0       	rjmp	.+158    	; 0x203a <f_sync+0x138>
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <f_sync+0xa2>
    1fa2:	4b c0       	rjmp	.+150    	; 0x203a <f_sync+0x138>
			fs->winsect = 0;
    1fa4:	1a a6       	std	Y+42, r1	; 0x2a
    1fa6:	1b a6       	std	Y+43, r1	; 0x2b
    1fa8:	1c a6       	std	Y+44, r1	; 0x2c
    1faa:	1d a6       	std	Y+45, r1	; 0x2d
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1fac:	8e 01       	movw	r16, r28
    1fae:	02 5d       	subi	r16, 0xD2	; 210
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	52 e0       	ldi	r21, 0x02	; 2
    1fbc:	4f d8       	rcall	.-3938   	; 0x105c <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1fbe:	c4 5d       	subi	r28, 0xD4	; 212
    1fc0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fc2:	85 e5       	ldi	r24, 0x55	; 85
    1fc4:	9a ea       	ldi	r25, 0xAA	; 170
    1fc6:	99 83       	std	Y+1, r25	; 0x01
    1fc8:	88 83       	st	Y, r24
    1fca:	cc 52       	subi	r28, 0x2C	; 44
    1fcc:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1fce:	82 e5       	ldi	r24, 0x52	; 82
    1fd0:	92 e5       	ldi	r25, 0x52	; 82
    1fd2:	a1 e6       	ldi	r26, 0x61	; 97
    1fd4:	b1 e4       	ldi	r27, 0x41	; 65
    1fd6:	8e a7       	std	Y+46, r24	; 0x2e
    1fd8:	9f a7       	std	Y+47, r25	; 0x2f
    1fda:	a8 ab       	std	Y+48, r26	; 0x30
    1fdc:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1fde:	ce 5e       	subi	r28, 0xEE	; 238
    1fe0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe2:	82 e7       	ldi	r24, 0x72	; 114
    1fe4:	92 e7       	ldi	r25, 0x72	; 114
    1fe6:	a1 e4       	ldi	r26, 0x41	; 65
    1fe8:	b1 e6       	ldi	r27, 0x61	; 97
    1fea:	88 83       	st	Y, r24
    1fec:	99 83       	std	Y+1, r25	; 0x01
    1fee:	aa 83       	std	Y+2, r26	; 0x02
    1ff0:	bb 83       	std	Y+3, r27	; 0x03
    1ff2:	c2 51       	subi	r28, 0x12	; 18
    1ff4:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ffa:	a8 89       	ldd	r26, Y+16	; 0x10
    1ffc:	b9 89       	ldd	r27, Y+17	; 0x11
    1ffe:	ca 5e       	subi	r28, 0xEA	; 234
    2000:	dd 4f       	sbci	r29, 0xFD	; 253
    2002:	88 83       	st	Y, r24
    2004:	99 83       	std	Y+1, r25	; 0x01
    2006:	aa 83       	std	Y+2, r26	; 0x02
    2008:	bb 83       	std	Y+3, r27	; 0x03
    200a:	c6 51       	subi	r28, 0x16	; 22
    200c:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    200e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2010:	9b 85       	ldd	r25, Y+11	; 0x0b
    2012:	ac 85       	ldd	r26, Y+12	; 0x0c
    2014:	bd 85       	ldd	r27, Y+13	; 0x0d
    2016:	c6 5e       	subi	r28, 0xE6	; 230
    2018:	dd 4f       	sbci	r29, 0xFD	; 253
    201a:	88 83       	st	Y, r24
    201c:	99 83       	std	Y+1, r25	; 0x01
    201e:	aa 83       	std	Y+2, r26	; 0x02
    2020:	bb 83       	std	Y+3, r27	; 0x03
    2022:	ca 51       	subi	r28, 0x1A	; 26
    2024:	d2 40       	sbci	r29, 0x02	; 2
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2026:	2a 89       	ldd	r18, Y+18	; 0x12
    2028:	3b 89       	ldd	r19, Y+19	; 0x13
    202a:	4c 89       	ldd	r20, Y+20	; 0x14
    202c:	5d 89       	ldd	r21, Y+21	; 0x15
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	b8 01       	movw	r22, r16
    2032:	01 e0       	ldi	r16, 0x01	; 1
    2034:	0e 94 66 07 	call	0xecc	; 0xecc <disk_write>
			fs->fsi_flag = 0;
    2038:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <disk_ioctl>
    2046:	81 11       	cpse	r24, r1
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    204c:	89 2f       	mov	r24, r25
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    205e:	51 df       	rcall	.-350    	; 0x1f02 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2060:	88 23       	and	r24, r24
    2062:	11 f4       	brne	.+4      	; 0x2068 <f_close+0x10>
    2064:	19 82       	std	Y+1, r1	; 0x01
    2066:	18 82       	st	Y, r1
	return res;
#endif
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    206e:	2f 92       	push	r2
    2070:	3f 92       	push	r3
    2072:	4f 92       	push	r4
    2074:	5f 92       	push	r5
    2076:	6f 92       	push	r6
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	e3 97       	sbiw	r28, 0x33	; 51
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	99 ab       	std	Y+49, r25	; 0x31
    20a4:	88 ab       	std	Y+48, r24	; 0x30
    20a6:	7b ab       	std	Y+51, r23	; 0x33
    20a8:	6a ab       	std	Y+50, r22	; 0x32
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    20aa:	89 2b       	or	r24, r25
    20ac:	19 f4       	brne	.+6      	; 0x20b4 <f_open+0x46>
    20ae:	09 e0       	ldi	r16, 0x09	; 9
    20b0:	f0 2e       	mov	r15, r16
    20b2:	06 c5       	rjmp	.+2572   	; 0x2ac0 <f_open+0xa52>
	fp->fs = 0;			/* Clear file object */
    20b4:	a8 a9       	ldd	r26, Y+48	; 0x30
    20b6:	b9 a9       	ldd	r27, Y+49	; 0x31
    20b8:	1d 92       	st	X+, r1
    20ba:	1c 92       	st	X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    20bc:	ea a9       	ldd	r30, Y+50	; 0x32
    20be:	fb a9       	ldd	r31, Y+51	; 0x33
    20c0:	80 81       	ld	r24, Z
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	20 53       	subi	r18, 0x30	; 48
    20c8:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    20ca:	2a 30       	cpi	r18, 0x0A	; 10
    20cc:	31 05       	cpc	r19, r1
    20ce:	48 f4       	brcc	.+18     	; 0x20e2 <f_open+0x74>
    20d0:	81 81       	ldd	r24, Z+1	; 0x01
    20d2:	8a 33       	cpi	r24, 0x3A	; 58
    20d4:	31 f4       	brne	.+12     	; 0x20e2 <f_open+0x74>
		p += 2; *path = p;				/* Return pointer to the path name */
    20d6:	32 96       	adiw	r30, 0x02	; 2
    20d8:	fb ab       	std	Y+51, r31	; 0x33
    20da:	ea ab       	std	Y+50, r30	; 0x32
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    20dc:	23 2b       	or	r18, r19
    20de:	09 f0       	breq	.+2      	; 0x20e2 <f_open+0x74>
    20e0:	61 c2       	rjmp	.+1218   	; 0x25a4 <f_open+0x536>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    20e2:	e0 90 f7 03 	lds	r14, 0x03F7
    20e6:	f0 90 f8 03 	lds	r15, 0x03F8
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    20ea:	e1 14       	cp	r14, r1
    20ec:	f1 04       	cpc	r15, r1
    20ee:	19 f4       	brne	.+6      	; 0x20f6 <f_open+0x88>
    20f0:	1c e0       	ldi	r17, 0x0C	; 12
    20f2:	f1 2e       	mov	r15, r17
    20f4:	e5 c4       	rjmp	.+2506   	; 0x2ac0 <f_open+0xa52>

	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    20f6:	f4 2f       	mov	r31, r20
    20f8:	ff 71       	andi	r31, 0x1F	; 31
    20fa:	fb a7       	std	Y+43, r31	; 0x2b
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    20fc:	14 2f       	mov	r17, r20
    20fe:	1e 71       	andi	r17, 0x1E	; 30
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    2100:	fe 86       	std	Y+14, r15	; 0x0e
    2102:	ed 86       	std	Y+13, r14	; 0x0d
	if (fs->fs_type) {					/* If the volume has been mounted */
    2104:	d7 01       	movw	r26, r14
    2106:	8c 91       	ld	r24, X
    2108:	88 23       	and	r24, r24
    210a:	61 f0       	breq	.+24     	; 0x2124 <f_open+0xb6>
		stat = disk_status(fs->drv);
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	8c 91       	ld	r24, X
    2110:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    2114:	80 fd       	sbrc	r24, 0
    2116:	06 c0       	rjmp	.+12     	; 0x2124 <f_open+0xb6>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    2118:	11 23       	and	r17, r17
    211a:	09 f4       	brne	.+2      	; 0x211e <f_open+0xb0>
    211c:	f1 c4       	rjmp	.+2530   	; 0x2b00 <f_open+0xa92>
    211e:	82 fd       	sbrc	r24, 2
    2120:	44 c2       	rjmp	.+1160   	; 0x25aa <f_open+0x53c>
    2122:	ee c4       	rjmp	.+2524   	; 0x2b00 <f_open+0xa92>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2124:	f7 01       	movw	r30, r14
    2126:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2128:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2130:	80 ff       	sbrs	r24, 0
    2132:	03 c0       	rjmp	.+6      	; 0x213a <f_open+0xcc>
    2134:	b3 e0       	ldi	r27, 0x03	; 3
    2136:	fb 2e       	mov	r15, r27
    2138:	c3 c4       	rjmp	.+2438   	; 0x2ac0 <f_open+0xa52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    213a:	11 23       	and	r17, r17
    213c:	11 f0       	breq	.+4      	; 0x2142 <f_open+0xd4>
    213e:	82 fd       	sbrc	r24, 2
    2140:	34 c2       	rjmp	.+1128   	; 0x25aa <f_open+0x53c>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    2142:	c7 01       	movw	r24, r14
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	9c de       	rcall	.-712    	; 0x1e86 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	29 f0       	breq	.+10     	; 0x215c <f_open+0xee>
    2152:	1c a6       	std	Y+44, r1	; 0x2c
    2154:	1d a6       	std	Y+45, r1	; 0x2d
    2156:	1e a6       	std	Y+46, r1	; 0x2e
    2158:	1f a6       	std	Y+47, r1	; 0x2f
    215a:	13 c0       	rjmp	.+38     	; 0x2182 <f_open+0x114>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    215c:	f7 01       	movw	r30, r14
    215e:	e4 51       	subi	r30, 0x14	; 20
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {						/* Is the partition existing? */
    2162:	84 81       	ldd	r24, Z+4	; 0x04
    2164:	88 23       	and	r24, r24
    2166:	09 f4       	brne	.+2      	; 0x216a <f_open+0xfc>
    2168:	23 c2       	rjmp	.+1094   	; 0x25b0 <f_open+0x542>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    216a:	20 85       	ldd	r18, Z+8	; 0x08
    216c:	31 85       	ldd	r19, Z+9	; 0x09
    216e:	42 85       	ldd	r20, Z+10	; 0x0a
    2170:	53 85       	ldd	r21, Z+11	; 0x0b
    2172:	2c a7       	std	Y+44, r18	; 0x2c
    2174:	3d a7       	std	Y+45, r19	; 0x2d
    2176:	4e a7       	std	Y+46, r20	; 0x2e
    2178:	5f a7       	std	Y+47, r21	; 0x2f
			fmt = check_fs(fs, bsect);		/* Check the partition */
    217a:	c7 01       	movw	r24, r14
    217c:	ba 01       	movw	r22, r20
    217e:	a9 01       	movw	r20, r18
    2180:	82 de       	rcall	.-764    	; 0x1e86 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2182:	83 30       	cpi	r24, 0x03	; 3
    2184:	09 f4       	brne	.+2      	; 0x2188 <f_open+0x11a>
    2186:	10 c4       	rjmp	.+2080   	; 0x29a8 <f_open+0x93a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2188:	88 23       	and	r24, r24
    218a:	09 f0       	breq	.+2      	; 0x218e <f_open+0x120>
    218c:	11 c2       	rjmp	.+1058   	; 0x25b0 <f_open+0x542>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    218e:	d7 01       	movw	r26, r14
    2190:	d9 96       	adiw	r26, 0x39	; 57
    2192:	8d 91       	ld	r24, X+
    2194:	9c 91       	ld	r25, X
    2196:	da 97       	sbiw	r26, 0x3a	; 58
    2198:	80 50       	subi	r24, 0x00	; 0
    219a:	92 40       	sbci	r25, 0x02	; 2
    219c:	09 f0       	breq	.+2      	; 0x21a0 <f_open+0x132>
    219e:	08 c2       	rjmp	.+1040   	; 0x25b0 <f_open+0x542>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    21a0:	e4 e4       	ldi	r30, 0x44	; 68
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	ee 0e       	add	r14, r30
    21a6:	ff 1e       	adc	r15, r31
    21a8:	d7 01       	movw	r26, r14
    21aa:	8d 91       	ld	r24, X+
    21ac:	9c 91       	ld	r25, X
    21ae:	ec eb       	ldi	r30, 0xBC	; 188
    21b0:	ff ef       	ldi	r31, 0xFF	; 255
    21b2:	ee 0e       	add	r14, r30
    21b4:	ff 1e       	adc	r15, r31
    21b6:	3c 01       	movw	r6, r24
    21b8:	88 24       	eor	r8, r8
    21ba:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    21bc:	61 14       	cp	r6, r1
    21be:	71 04       	cpc	r7, r1
    21c0:	81 04       	cpc	r8, r1
    21c2:	91 04       	cpc	r9, r1
    21c4:	69 f4       	brne	.+26     	; 0x21e0 <f_open+0x172>
    21c6:	22 e5       	ldi	r18, 0x52	; 82
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	e2 0e       	add	r14, r18
    21cc:	f3 1e       	adc	r15, r19
    21ce:	d7 01       	movw	r26, r14
    21d0:	6d 90       	ld	r6, X+
    21d2:	7d 90       	ld	r7, X+
    21d4:	8d 90       	ld	r8, X+
    21d6:	9c 90       	ld	r9, X
    21d8:	ee ea       	ldi	r30, 0xAE	; 174
    21da:	ff ef       	ldi	r31, 0xFF	; 255
    21dc:	ee 0e       	add	r14, r30
    21de:	ff 1e       	adc	r15, r31
	fs->fsize = fasize;
    21e0:	d7 01       	movw	r26, r14
    21e2:	5a 96       	adiw	r26, 0x1a	; 26
    21e4:	6d 92       	st	X+, r6
    21e6:	7d 92       	st	X+, r7
    21e8:	8d 92       	st	X+, r8
    21ea:	9c 92       	st	X, r9
    21ec:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    21ee:	de 96       	adiw	r26, 0x3e	; 62
    21f0:	4c 91       	ld	r20, X
    21f2:	de 97       	sbiw	r26, 0x3e	; 62
    21f4:	13 96       	adiw	r26, 0x03	; 3
    21f6:	4c 93       	st	X, r20
    21f8:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    21fa:	84 2f       	mov	r24, r20
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	08 f0       	brcs	.+2      	; 0x2204 <f_open+0x196>
    2202:	d6 c1       	rjmp	.+940    	; 0x25b0 <f_open+0x542>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2204:	db 96       	adiw	r26, 0x3b	; 59
    2206:	2c 91       	ld	r18, X
    2208:	db 97       	sbiw	r26, 0x3b	; 59
    220a:	12 96       	adiw	r26, 0x02	; 2
    220c:	2c 93       	st	X, r18
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    220e:	22 23       	and	r18, r18
    2210:	09 f4       	brne	.+2      	; 0x2214 <f_open+0x1a6>
    2212:	ce c1       	rjmp	.+924    	; 0x25b0 <f_open+0x542>
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	c9 01       	movw	r24, r18
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	82 23       	and	r24, r18
    221c:	93 23       	and	r25, r19
    221e:	89 2b       	or	r24, r25
    2220:	09 f0       	breq	.+2      	; 0x2224 <f_open+0x1b6>
    2222:	c6 c1       	rjmp	.+908    	; 0x25b0 <f_open+0x542>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2224:	ef e3       	ldi	r30, 0x3F	; 63
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	ee 0e       	add	r14, r30
    222a:	ff 1e       	adc	r15, r31
    222c:	d7 01       	movw	r26, r14
    222e:	0d 91       	ld	r16, X+
    2230:	1c 91       	ld	r17, X
    2232:	e1 ec       	ldi	r30, 0xC1	; 193
    2234:	ff ef       	ldi	r31, 0xFF	; 255
    2236:	ee 0e       	add	r14, r30
    2238:	ff 1e       	adc	r15, r31
    223a:	d7 01       	movw	r26, r14
    223c:	19 96       	adiw	r26, 0x09	; 9
    223e:	1c 93       	st	X, r17
    2240:	0e 93       	st	-X, r16
    2242:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2244:	c8 01       	movw	r24, r16
    2246:	8f 70       	andi	r24, 0x0F	; 15
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	89 2b       	or	r24, r25
    224c:	09 f0       	breq	.+2      	; 0x2250 <f_open+0x1e2>
    224e:	b0 c1       	rjmp	.+864    	; 0x25b0 <f_open+0x542>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2250:	e1 e4       	ldi	r30, 0x41	; 65
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ee 0e       	add	r14, r30
    2256:	ff 1e       	adc	r15, r31
    2258:	d7 01       	movw	r26, r14
    225a:	8d 91       	ld	r24, X+
    225c:	9c 91       	ld	r25, X
    225e:	ef eb       	ldi	r30, 0xBF	; 191
    2260:	ff ef       	ldi	r31, 0xFF	; 255
    2262:	ee 0e       	add	r14, r30
    2264:	ff 1e       	adc	r15, r31
    2266:	5c 01       	movw	r10, r24
    2268:	cc 24       	eor	r12, r12
    226a:	dd 24       	eor	r13, r13
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    226c:	a1 14       	cp	r10, r1
    226e:	b1 04       	cpc	r11, r1
    2270:	c1 04       	cpc	r12, r1
    2272:	d1 04       	cpc	r13, r1
    2274:	69 f4       	brne	.+26     	; 0x2290 <f_open+0x222>
    2276:	2e e4       	ldi	r18, 0x4E	; 78
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	e2 0e       	add	r14, r18
    227c:	f3 1e       	adc	r15, r19
    227e:	d7 01       	movw	r26, r14
    2280:	ad 90       	ld	r10, X+
    2282:	bd 90       	ld	r11, X+
    2284:	cd 90       	ld	r12, X+
    2286:	dc 90       	ld	r13, X
    2288:	e2 eb       	ldi	r30, 0xB2	; 178
    228a:	ff ef       	ldi	r31, 0xFF	; 255
    228c:	ee 0e       	add	r14, r30
    228e:	ff 1e       	adc	r15, r31

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2290:	d7 01       	movw	r26, r14
    2292:	dc 96       	adiw	r26, 0x3c	; 60
    2294:	4d 90       	ld	r4, X+
    2296:	5c 90       	ld	r5, X
    2298:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    229a:	41 14       	cp	r4, r1
    229c:	51 04       	cpc	r5, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <f_open+0x234>
    22a0:	87 c1       	rjmp	.+782    	; 0x25b0 <f_open+0x542>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    22a2:	24 2f       	mov	r18, r20
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	c4 01       	movw	r24, r8
    22ac:	b3 01       	movw	r22, r6
    22ae:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__mulsi3>
    22b2:	6b a3       	std	Y+35, r22	; 0x23
    22b4:	7c a3       	std	Y+36, r23	; 0x24
    22b6:	8d a3       	std	Y+37, r24	; 0x25
    22b8:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    22ba:	12 01       	movw	r2, r4
    22bc:	44 24       	eor	r4, r4
    22be:	55 24       	eor	r5, r5
    22c0:	a4 e0       	ldi	r26, 0x04	; 4
    22c2:	16 95       	lsr	r17
    22c4:	07 95       	ror	r16
    22c6:	aa 95       	dec	r26
    22c8:	e1 f7       	brne	.-8      	; 0x22c2 <f_open+0x254>
    22ca:	38 01       	movw	r6, r16
    22cc:	88 24       	eor	r8, r8
    22ce:	99 24       	eor	r9, r9
    22d0:	62 0c       	add	r6, r2
    22d2:	73 1c       	adc	r7, r3
    22d4:	84 1c       	adc	r8, r4
    22d6:	95 1c       	adc	r9, r5
    22d8:	66 0e       	add	r6, r22
    22da:	77 1e       	adc	r7, r23
    22dc:	88 1e       	adc	r8, r24
    22de:	99 1e       	adc	r9, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    22e0:	a6 14       	cp	r10, r6
    22e2:	b7 04       	cpc	r11, r7
    22e4:	c8 04       	cpc	r12, r8
    22e6:	d9 04       	cpc	r13, r9
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <f_open+0x27e>
    22ea:	62 c1       	rjmp	.+708    	; 0x25b0 <f_open+0x542>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    22ec:	a6 18       	sub	r10, r6
    22ee:	b7 08       	sbc	r11, r7
    22f0:	c8 08       	sbc	r12, r8
    22f2:	d9 08       	sbc	r13, r9
    22f4:	f7 01       	movw	r30, r14
    22f6:	22 81       	ldd	r18, Z+2	; 0x02
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	c6 01       	movw	r24, r12
    2300:	b5 01       	movw	r22, r10
    2302:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    2306:	c9 01       	movw	r24, r18
    2308:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	a1 05       	cpc	r26, r1
    230e:	b1 05       	cpc	r27, r1
    2310:	09 f4       	brne	.+2      	; 0x2314 <f_open+0x2a6>
    2312:	4e c1       	rjmp	.+668    	; 0x25b0 <f_open+0x542>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2314:	86 3f       	cpi	r24, 0xF6	; 246
    2316:	ff e0       	ldi	r31, 0x0F	; 15
    2318:	9f 07       	cpc	r25, r31
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	af 07       	cpc	r26, r31
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	bf 07       	cpc	r27, r31
    2322:	10 f4       	brcc	.+4      	; 0x2328 <f_open+0x2ba>
    2324:	11 e0       	ldi	r17, 0x01	; 1
    2326:	0b c0       	rjmp	.+22     	; 0x233e <f_open+0x2d0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2328:	86 3f       	cpi	r24, 0xF6	; 246
    232a:	2f ef       	ldi	r18, 0xFF	; 255
    232c:	92 07       	cpc	r25, r18
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	a2 07       	cpc	r26, r18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	b2 07       	cpc	r27, r18
    2336:	10 f0       	brcs	.+4      	; 0x233c <f_open+0x2ce>
    2338:	13 e0       	ldi	r17, 0x03	; 3
    233a:	01 c0       	rjmp	.+2      	; 0x233e <f_open+0x2d0>
    233c:	12 e0       	ldi	r17, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    233e:	f2 e0       	ldi	r31, 0x02	; 2
    2340:	af 2e       	mov	r10, r31
    2342:	b1 2c       	mov	r11, r1
    2344:	c1 2c       	mov	r12, r1
    2346:	d1 2c       	mov	r13, r1
    2348:	a8 0e       	add	r10, r24
    234a:	b9 1e       	adc	r11, r25
    234c:	ca 1e       	adc	r12, r26
    234e:	db 1e       	adc	r13, r27
    2350:	d7 01       	movw	r26, r14
    2352:	56 96       	adiw	r26, 0x16	; 22
    2354:	ad 92       	st	X+, r10
    2356:	bd 92       	st	X+, r11
    2358:	cd 92       	st	X+, r12
    235a:	dc 92       	st	X, r13
    235c:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    235e:	2c a5       	ldd	r18, Y+44	; 0x2c
    2360:	3d a5       	ldd	r19, Y+45	; 0x2d
    2362:	4e a5       	ldd	r20, Y+46	; 0x2e
    2364:	5f a5       	ldd	r21, Y+47	; 0x2f
    2366:	62 0e       	add	r6, r18
    2368:	73 1e       	adc	r7, r19
    236a:	84 1e       	adc	r8, r20
    236c:	95 1e       	adc	r9, r21
    236e:	96 96       	adiw	r26, 0x26	; 38
    2370:	6d 92       	st	X+, r6
    2372:	7d 92       	st	X+, r7
    2374:	8d 92       	st	X+, r8
    2376:	9c 92       	st	X, r9
    2378:	99 97       	sbiw	r26, 0x29	; 41
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    237a:	da 01       	movw	r26, r20
    237c:	c9 01       	movw	r24, r18
    237e:	82 0d       	add	r24, r2
    2380:	93 1d       	adc	r25, r3
    2382:	a4 1d       	adc	r26, r4
    2384:	b5 1d       	adc	r27, r5
    2386:	f7 01       	movw	r30, r14
    2388:	86 8f       	std	Z+30, r24	; 0x1e
    238a:	97 8f       	std	Z+31, r25	; 0x1f
    238c:	a0 a3       	std	Z+32, r26	; 0x20
    238e:	b1 a3       	std	Z+33, r27	; 0x21
    2390:	20 85       	ldd	r18, Z+8	; 0x08
    2392:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    2394:	13 30       	cpi	r17, 0x03	; 3
    2396:	f9 f4       	brne	.+62     	; 0x23d6 <f_open+0x368>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2398:	23 2b       	or	r18, r19
    239a:	09 f0       	breq	.+2      	; 0x239e <f_open+0x330>
    239c:	09 c1       	rjmp	.+530    	; 0x25b0 <f_open+0x542>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    239e:	2a e5       	ldi	r18, 0x5A	; 90
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	e2 0e       	add	r14, r18
    23a4:	f3 1e       	adc	r15, r19
    23a6:	f7 01       	movw	r30, r14
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	a2 81       	ldd	r26, Z+2	; 0x02
    23ae:	b3 81       	ldd	r27, Z+3	; 0x03
    23b0:	26 ea       	ldi	r18, 0xA6	; 166
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	e2 0e       	add	r14, r18
    23b6:	f3 1e       	adc	r15, r19
    23b8:	f7 01       	movw	r30, r14
    23ba:	82 a3       	std	Z+34, r24	; 0x22
    23bc:	93 a3       	std	Z+35, r25	; 0x23
    23be:	a4 a3       	std	Z+36, r26	; 0x24
    23c0:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    23c2:	a6 01       	movw	r20, r12
    23c4:	95 01       	movw	r18, r10
    23c6:	e2 e0       	ldi	r30, 0x02	; 2
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	44 1f       	adc	r20, r20
    23ce:	55 1f       	adc	r21, r21
    23d0:	ea 95       	dec	r30
    23d2:	d1 f7       	brne	.-12     	; 0x23c8 <f_open+0x35a>
    23d4:	31 c0       	rjmp	.+98     	; 0x2438 <f_open+0x3ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    23d6:	23 2b       	or	r18, r19
    23d8:	09 f4       	brne	.+2      	; 0x23dc <f_open+0x36e>
    23da:	ea c0       	rjmp	.+468    	; 0x25b0 <f_open+0x542>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    23dc:	2b a1       	ldd	r18, Y+35	; 0x23
    23de:	3c a1       	ldd	r19, Y+36	; 0x24
    23e0:	4d a1       	ldd	r20, Y+37	; 0x25
    23e2:	5e a1       	ldd	r21, Y+38	; 0x26
    23e4:	82 0f       	add	r24, r18
    23e6:	93 1f       	adc	r25, r19
    23e8:	a4 1f       	adc	r26, r20
    23ea:	b5 1f       	adc	r27, r21
    23ec:	f7 01       	movw	r30, r14
    23ee:	82 a3       	std	Z+34, r24	; 0x22
    23f0:	93 a3       	std	Z+35, r25	; 0x23
    23f2:	a4 a3       	std	Z+36, r26	; 0x24
    23f4:	b5 a3       	std	Z+37, r27	; 0x25
    23f6:	d6 01       	movw	r26, r12
    23f8:	c5 01       	movw	r24, r10
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	aa 1f       	adc	r26, r26
    2400:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    2402:	12 30       	cpi	r17, 0x02	; 2
    2404:	19 f4       	brne	.+6      	; 0x240c <f_open+0x39e>
    2406:	9c 01       	movw	r18, r24
    2408:	ad 01       	movw	r20, r26
    240a:	16 c0       	rjmp	.+44     	; 0x2438 <f_open+0x3ca>
    240c:	9c 01       	movw	r18, r24
    240e:	ad 01       	movw	r20, r26
    2410:	2a 0d       	add	r18, r10
    2412:	3b 1d       	adc	r19, r11
    2414:	4c 1d       	adc	r20, r12
    2416:	5d 1d       	adc	r21, r13
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e0       	ldi	r26, 0x00	; 0
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	a8 22       	and	r10, r24
    242a:	b9 22       	and	r11, r25
    242c:	ca 22       	and	r12, r26
    242e:	db 22       	and	r13, r27
    2430:	2a 0d       	add	r18, r10
    2432:	3b 1d       	adc	r19, r11
    2434:	4c 1d       	adc	r20, r12
    2436:	5d 1d       	adc	r21, r13
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2438:	21 50       	subi	r18, 0x01	; 1
    243a:	3e 4f       	sbci	r19, 0xFE	; 254
    243c:	4f 4f       	sbci	r20, 0xFF	; 255
    243e:	5f 4f       	sbci	r21, 0xFF	; 255
    2440:	99 e0       	ldi	r25, 0x09	; 9
    2442:	56 95       	lsr	r21
    2444:	47 95       	ror	r20
    2446:	37 95       	ror	r19
    2448:	27 95       	ror	r18
    244a:	9a 95       	dec	r25
    244c:	d1 f7       	brne	.-12     	; 0x2442 <f_open+0x3d4>
    244e:	f7 01       	movw	r30, r14
    2450:	82 8d       	ldd	r24, Z+26	; 0x1a
    2452:	93 8d       	ldd	r25, Z+27	; 0x1b
    2454:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2456:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2458:	82 17       	cp	r24, r18
    245a:	93 07       	cpc	r25, r19
    245c:	a4 07       	cpc	r26, r20
    245e:	b5 07       	cpc	r27, r21
    2460:	08 f4       	brcc	.+2      	; 0x2464 <f_open+0x3f6>
    2462:	a6 c0       	rjmp	.+332    	; 0x25b0 <f_open+0x542>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	9f ef       	ldi	r25, 0xFF	; 255
    2468:	af ef       	ldi	r26, 0xFF	; 255
    246a:	bf ef       	ldi	r27, 0xFF	; 255
    246c:	86 87       	std	Z+14, r24	; 0x0e
    246e:	97 87       	std	Z+15, r25	; 0x0f
    2470:	a0 8b       	std	Z+16, r26	; 0x10
    2472:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    2474:	d7 01       	movw	r26, r14
    2476:	1a 96       	adiw	r26, 0x0a	; 10
    2478:	1d 92       	st	X+, r1
    247a:	1d 92       	st	X+, r1
    247c:	1d 92       	st	X+, r1
    247e:	1c 92       	st	X, r1
    2480:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2482:	13 30       	cpi	r17, 0x03	; 3
    2484:	09 f0       	breq	.+2      	; 0x2488 <f_open+0x41a>
    2486:	78 c0       	rjmp	.+240    	; 0x2578 <f_open+0x50a>
	 	fs->fsi_flag = 0;
    2488:	15 96       	adiw	r26, 0x05	; 5
    248a:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    248c:	ee e5       	ldi	r30, 0x5E	; 94
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	ee 0e       	add	r14, r30
    2492:	ff 1e       	adc	r15, r31
    2494:	d7 01       	movw	r26, r14
    2496:	2d 91       	ld	r18, X+
    2498:	3c 91       	ld	r19, X
    249a:	e2 ea       	ldi	r30, 0xA2	; 162
    249c:	ff ef       	ldi	r31, 0xFF	; 255
    249e:	ee 0e       	add	r14, r30
    24a0:	ff 1e       	adc	r15, r31
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    24a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    24aa:	ae a5       	ldd	r26, Y+46	; 0x2e
    24ac:	bf a5       	ldd	r27, Y+47	; 0x2f
    24ae:	28 0f       	add	r18, r24
    24b0:	39 1f       	adc	r19, r25
    24b2:	4a 1f       	adc	r20, r26
    24b4:	5b 1f       	adc	r21, r27
    24b6:	d7 01       	movw	r26, r14
    24b8:	52 96       	adiw	r26, 0x12	; 18
    24ba:	2d 93       	st	X+, r18
    24bc:	3d 93       	st	X+, r19
    24be:	4d 93       	st	X+, r20
    24c0:	5c 93       	st	X, r21
    24c2:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    24c4:	b7 01       	movw	r22, r14
    24c6:	62 5d       	subi	r22, 0xD2	; 210
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	8c 91       	ld	r24, X
    24ce:	01 e0       	ldi	r16, 0x01	; 1
    24d0:	0e 94 71 07 	call	0xee2	; 0xee2 <disk_read>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f0       	breq	.+2      	; 0x24da <f_open+0x46c>
    24d8:	4f c0       	rjmp	.+158    	; 0x2578 <f_open+0x50a>
    24da:	ec e2       	ldi	r30, 0x2C	; 44
    24dc:	f2 e0       	ldi	r31, 0x02	; 2
    24de:	ee 0e       	add	r14, r30
    24e0:	ff 1e       	adc	r15, r31
    24e2:	d7 01       	movw	r26, r14
    24e4:	8d 91       	ld	r24, X+
    24e6:	9c 91       	ld	r25, X
    24e8:	e4 ed       	ldi	r30, 0xD4	; 212
    24ea:	fd ef       	ldi	r31, 0xFD	; 253
    24ec:	ee 0e       	add	r14, r30
    24ee:	ff 1e       	adc	r15, r31
    24f0:	85 55       	subi	r24, 0x55	; 85
    24f2:	9a 4a       	sbci	r25, 0xAA	; 170
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <f_open+0x48a>
    24f6:	40 c0       	rjmp	.+128    	; 0x2578 <f_open+0x50a>
    24f8:	f7 01       	movw	r30, r14
    24fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    24fc:	97 a5       	ldd	r25, Z+47	; 0x2f
    24fe:	a0 a9       	ldd	r26, Z+48	; 0x30
    2500:	b1 a9       	ldd	r27, Z+49	; 0x31
    2502:	82 55       	subi	r24, 0x52	; 82
    2504:	92 45       	sbci	r25, 0x52	; 82
    2506:	a1 46       	sbci	r26, 0x61	; 97
    2508:	b1 44       	sbci	r27, 0x41	; 65
    250a:	b1 f5       	brne	.+108    	; 0x2578 <f_open+0x50a>
    250c:	22 e1       	ldi	r18, 0x12	; 18
    250e:	32 e0       	ldi	r19, 0x02	; 2
    2510:	e2 0e       	add	r14, r18
    2512:	f3 1e       	adc	r15, r19
    2514:	f7 01       	movw	r30, r14
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	a2 81       	ldd	r26, Z+2	; 0x02
    251c:	b3 81       	ldd	r27, Z+3	; 0x03
    251e:	2e ee       	ldi	r18, 0xEE	; 238
    2520:	3d ef       	ldi	r19, 0xFD	; 253
    2522:	e2 0e       	add	r14, r18
    2524:	f3 1e       	adc	r15, r19
    2526:	82 57       	subi	r24, 0x72	; 114
    2528:	92 47       	sbci	r25, 0x72	; 114
    252a:	a1 44       	sbci	r26, 0x41	; 65
    252c:	b1 46       	sbci	r27, 0x61	; 97
    252e:	21 f5       	brne	.+72     	; 0x2578 <f_open+0x50a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2530:	4a e1       	ldi	r20, 0x1A	; 26
    2532:	52 e0       	ldi	r21, 0x02	; 2
    2534:	e4 0e       	add	r14, r20
    2536:	f5 1e       	adc	r15, r21
    2538:	f7 01       	movw	r30, r14
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	a2 81       	ldd	r26, Z+2	; 0x02
    2540:	b3 81       	ldd	r27, Z+3	; 0x03
    2542:	26 ee       	ldi	r18, 0xE6	; 230
    2544:	3d ef       	ldi	r19, 0xFD	; 253
    2546:	e2 0e       	add	r14, r18
    2548:	f3 1e       	adc	r15, r19
    254a:	f7 01       	movw	r30, r14
    254c:	82 87       	std	Z+10, r24	; 0x0a
    254e:	93 87       	std	Z+11, r25	; 0x0b
    2550:	a4 87       	std	Z+12, r26	; 0x0c
    2552:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2554:	26 e1       	ldi	r18, 0x16	; 22
    2556:	32 e0       	ldi	r19, 0x02	; 2
    2558:	e2 0e       	add	r14, r18
    255a:	f3 1e       	adc	r15, r19
    255c:	f7 01       	movw	r30, r14
    255e:	80 81       	ld	r24, Z
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	a2 81       	ldd	r26, Z+2	; 0x02
    2564:	b3 81       	ldd	r27, Z+3	; 0x03
    2566:	2a ee       	ldi	r18, 0xEA	; 234
    2568:	3d ef       	ldi	r19, 0xFD	; 253
    256a:	e2 0e       	add	r14, r18
    256c:	f3 1e       	adc	r15, r19
    256e:	f7 01       	movw	r30, r14
    2570:	86 87       	std	Z+14, r24	; 0x0e
    2572:	97 87       	std	Z+15, r25	; 0x0f
    2574:	a0 8b       	std	Z+16, r26	; 0x10
    2576:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2578:	d7 01       	movw	r26, r14
    257a:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    257c:	80 91 f9 03 	lds	r24, 0x03F9
    2580:	90 91 fa 03 	lds	r25, 0x03FA
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	90 93 fa 03 	sts	0x03FA, r25
    258a:	80 93 f9 03 	sts	0x03F9, r24
    258e:	17 96       	adiw	r26, 0x07	; 7
    2590:	9c 93       	st	X, r25
    2592:	8e 93       	st	-X, r24
    2594:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    2596:	f7 01       	movw	r30, r14
    2598:	12 a6       	std	Z+42, r1	; 0x2a
    259a:	13 a6       	std	Z+43, r1	; 0x2b
    259c:	14 a6       	std	Z+44, r1	; 0x2c
    259e:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    25a0:	14 82       	std	Z+4, r1	; 0x04
    25a2:	ae c2       	rjmp	.+1372   	; 0x2b00 <f_open+0xa92>
    25a4:	8b e0       	ldi	r24, 0x0B	; 11
    25a6:	f8 2e       	mov	r15, r24
    25a8:	8b c2       	rjmp	.+1302   	; 0x2ac0 <f_open+0xa52>
    25aa:	0a e0       	ldi	r16, 0x0A	; 10
    25ac:	f0 2e       	mov	r15, r16
    25ae:	88 c2       	rjmp	.+1296   	; 0x2ac0 <f_open+0xa52>
    25b0:	1d e0       	ldi	r17, 0x0D	; 13
    25b2:	f1 2e       	mov	r15, r17
    25b4:	85 c2       	rjmp	.+1290   	; 0x2ac0 <f_open+0xa52>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    25b6:	8c 35       	cpi	r24, 0x5C	; 92
    25b8:	31 f4       	brne	.+12     	; 0x25c6 <f_open+0x558>
		path++;
    25ba:	2a a9       	ldd	r18, Y+50	; 0x32
    25bc:	3b a9       	ldd	r19, Y+51	; 0x33
    25be:	2f 5f       	subi	r18, 0xFF	; 255
    25c0:	3f 4f       	sbci	r19, 0xFF	; 255
    25c2:	3b ab       	std	Y+51, r19	; 0x33
    25c4:	2a ab       	std	Y+50, r18	; 0x32
	dj->sclust = 0;						/* Start from the root dir */
    25c6:	1b 8a       	std	Y+19, r1	; 0x13
    25c8:	1c 8a       	std	Y+20, r1	; 0x14
    25ca:	1d 8a       	std	Y+21, r1	; 0x15
    25cc:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    25ce:	aa a9       	ldd	r26, Y+50	; 0x32
    25d0:	bb a9       	ldd	r27, Y+51	; 0x33
    25d2:	8c 91       	ld	r24, X
    25d4:	80 32       	cpi	r24, 0x20	; 32
    25d6:	78 f4       	brcc	.+30     	; 0x25f6 <f_open+0x588>
		res = dir_sdi(dj, 0);
    25d8:	ce 01       	movw	r24, r28
    25da:	0d 96       	adiw	r24, 0x0d	; 13
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	ed d8       	rcall	.-3622   	; 0x17bc <dir_sdi>
    25e2:	f8 2e       	mov	r15, r24
		dj->dir = 0;
    25e4:	18 a2       	std	Y+32, r1	; 0x20
    25e6:	1f 8e       	std	Y+31, r1	; 0x1f
    25e8:	17 c1       	rjmp	.+558    	; 0x2818 <f_open+0x7aa>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    25ea:	ea a9       	ldd	r30, Y+50	; 0x32
    25ec:	fb a9       	ldd	r31, Y+51	; 0x33
    25ee:	31 96       	adiw	r30, 0x01	; 1
    25f0:	fb ab       	std	Y+51, r31	; 0x33
    25f2:	ea ab       	std	Y+50, r30	; 0x32
    25f4:	07 c0       	rjmp	.+14     	; 0x2604 <f_open+0x596>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    25f6:	bd e0       	ldi	r27, 0x0D	; 13
    25f8:	ab 2e       	mov	r10, r27
    25fa:	b1 2c       	mov	r11, r1
    25fc:	ac 0e       	add	r10, r28
    25fe:	bd 1e       	adc	r11, r29
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2600:	a5 e0       	ldi	r26, 0x05	; 5
    2602:	9a 2e       	mov	r9, r26
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2604:	aa a9       	ldd	r26, Y+50	; 0x32
    2606:	bb a9       	ldd	r27, Y+51	; 0x33
    2608:	8c 91       	ld	r24, X
    260a:	8f 32       	cpi	r24, 0x2F	; 47
    260c:	71 f3       	breq	.-36     	; 0x25ea <f_open+0x57c>
    260e:	8c 35       	cpi	r24, 0x5C	; 92
    2610:	61 f3       	breq	.-40     	; 0x25ea <f_open+0x57c>
	sfn = dj->fn;
    2612:	09 a1       	ldd	r16, Y+33	; 0x21
    2614:	1a a1       	ldd	r17, Y+34	; 0x22
	mem_set(sfn, ' ', 11);
    2616:	c8 01       	movw	r24, r16
    2618:	60 e2       	ldi	r22, 0x20	; 32
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	4b e0       	ldi	r20, 0x0B	; 11
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	0e 94 2e 08 	call	0x105c	; 0x105c <mem_set>
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	ee 24       	eor	r14, r14
    262a:	ff 24       	eor	r15, r15
    262c:	f8 e0       	ldi	r31, 0x08	; 8
    262e:	cf 2e       	mov	r12, r31
    2630:	d1 2c       	mov	r13, r1
    2632:	a0 e0       	ldi	r26, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2634:	ea a9       	ldd	r30, Y+50	; 0x32
    2636:	fb a9       	ldd	r31, Y+51	; 0x33
    2638:	ee 0d       	add	r30, r14
    263a:	ff 1d       	adc	r31, r15
    263c:	20 81       	ld	r18, Z
    263e:	08 94       	sec
    2640:	e1 1c       	adc	r14, r1
    2642:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2644:	21 32       	cpi	r18, 0x21	; 33
    2646:	08 f4       	brcc	.+2      	; 0x264a <f_open+0x5dc>
    2648:	67 c0       	rjmp	.+206    	; 0x2718 <f_open+0x6aa>
    264a:	2f 32       	cpi	r18, 0x2F	; 47
    264c:	09 f4       	brne	.+2      	; 0x2650 <f_open+0x5e2>
    264e:	87 c2       	rjmp	.+1294   	; 0x2b5e <f_open+0xaf0>
    2650:	2c 35       	cpi	r18, 0x5C	; 92
    2652:	09 f4       	brne	.+2      	; 0x2656 <f_open+0x5e8>
    2654:	84 c2       	rjmp	.+1288   	; 0x2b5e <f_open+0xaf0>
		if (c == '.' || i >= ni) {
    2656:	2e 32       	cpi	r18, 0x2E	; 46
    2658:	19 f0       	breq	.+6      	; 0x2660 <f_open+0x5f2>
    265a:	4c 15       	cp	r20, r12
    265c:	5d 05       	cpc	r21, r13
    265e:	80 f0       	brcs	.+32     	; 0x2680 <f_open+0x612>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2660:	b8 e0       	ldi	r27, 0x08	; 8
    2662:	cb 16       	cp	r12, r27
    2664:	d1 04       	cpc	r13, r1
    2666:	09 f0       	breq	.+2      	; 0x266a <f_open+0x5fc>
    2668:	d0 c0       	rjmp	.+416    	; 0x280a <f_open+0x79c>
    266a:	2e 32       	cpi	r18, 0x2E	; 46
    266c:	09 f0       	breq	.+2      	; 0x2670 <f_open+0x602>
    266e:	cd c0       	rjmp	.+410    	; 0x280a <f_open+0x79c>
			i = 8; ni = 11;
			b <<= 2; continue;
    2670:	aa 0f       	add	r26, r26
    2672:	aa 0f       	add	r26, r26
    2674:	48 e0       	ldi	r20, 0x08	; 8
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	eb e0       	ldi	r30, 0x0B	; 11
    267a:	ce 2e       	mov	r12, r30
    267c:	d1 2c       	mov	r13, r1
    267e:	da cf       	rjmp	.-76     	; 0x2634 <f_open+0x5c6>
		}
		if (c >= 0x80) {				/* Extended char? */
    2680:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    2682:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    2684:	82 2f       	mov	r24, r18
    2686:	81 58       	subi	r24, 0x81	; 129
    2688:	8f 31       	cpi	r24, 0x1F	; 31
    268a:	18 f0       	brcs	.+6      	; 0x2692 <f_open+0x624>
    268c:	8f 55       	subi	r24, 0x5F	; 95
    268e:	8d 31       	cpi	r24, 0x1D	; 29
    2690:	10 f5       	brcc	.+68     	; 0x26d6 <f_open+0x668>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2692:	ea a9       	ldd	r30, Y+50	; 0x32
    2694:	fb a9       	ldd	r31, Y+51	; 0x33
    2696:	ee 0d       	add	r30, r14
    2698:	ff 1d       	adc	r31, r15
    269a:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    269c:	83 2f       	mov	r24, r19
    269e:	80 54       	subi	r24, 0x40	; 64
    26a0:	8f 33       	cpi	r24, 0x3F	; 63
    26a2:	20 f0       	brcs	.+8      	; 0x26ac <f_open+0x63e>
    26a4:	80 54       	subi	r24, 0x40	; 64
    26a6:	8d 37       	cpi	r24, 0x7D	; 125
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <f_open+0x63e>
    26aa:	af c0       	rjmp	.+350    	; 0x280a <f_open+0x79c>
    26ac:	c6 01       	movw	r24, r12
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	48 17       	cp	r20, r24
    26b2:	59 07       	cpc	r21, r25
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <f_open+0x64a>
    26b6:	a9 c0       	rjmp	.+338    	; 0x280a <f_open+0x79c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    26b8:	08 94       	sec
    26ba:	e1 1c       	adc	r14, r1
    26bc:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    26be:	f8 01       	movw	r30, r16
    26c0:	e4 0f       	add	r30, r20
    26c2:	f5 1f       	adc	r31, r21
    26c4:	20 83       	st	Z, r18
    26c6:	ca 01       	movw	r24, r20
    26c8:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    26ca:	f8 01       	movw	r30, r16
    26cc:	e8 0f       	add	r30, r24
    26ce:	f9 1f       	adc	r31, r25
    26d0:	30 83       	st	Z, r19
    26d2:	ac 01       	movw	r20, r24
    26d4:	1e c0       	rjmp	.+60     	; 0x2712 <f_open+0x6a4>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    26d6:	62 2f       	mov	r22, r18
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	e3 eb       	ldi	r30, 0xB3	; 179
    26dc:	f1 e0       	ldi	r31, 0x01	; 1
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <f_open+0x674>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    26e0:	31 96       	adiw	r30, 0x01	; 1
    26e2:	80 81       	ld	r24, Z
    26e4:	88 23       	and	r24, r24
    26e6:	29 f0       	breq	.+10     	; 0x26f2 <f_open+0x684>
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	86 17       	cp	r24, r22
    26ec:	97 07       	cpc	r25, r23
    26ee:	c1 f7       	brne	.-16     	; 0x26e0 <f_open+0x672>
    26f0:	8c c0       	rjmp	.+280    	; 0x280a <f_open+0x79c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    26f2:	82 2f       	mov	r24, r18
    26f4:	81 54       	subi	r24, 0x41	; 65
    26f6:	8a 31       	cpi	r24, 0x1A	; 26
    26f8:	10 f4       	brcc	.+4      	; 0x26fe <f_open+0x690>
				b |= 2;
    26fa:	a2 60       	ori	r26, 0x02	; 2
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <f_open+0x69c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    26fe:	82 2f       	mov	r24, r18
    2700:	81 56       	subi	r24, 0x61	; 97
    2702:	8a 31       	cpi	r24, 0x1A	; 26
    2704:	10 f4       	brcc	.+4      	; 0x270a <f_open+0x69c>
					b |= 1; c -= 0x20;
    2706:	a1 60       	ori	r26, 0x01	; 1
    2708:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    270a:	f8 01       	movw	r30, r16
    270c:	e4 0f       	add	r30, r20
    270e:	f5 1f       	adc	r31, r21
    2710:	20 83       	st	Z, r18
    2712:	4f 5f       	subi	r20, 0xFF	; 255
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	8e cf       	rjmp	.-228    	; 0x2634 <f_open+0x5c6>
    2718:	9a 2f       	mov	r25, r26
    271a:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    271c:	45 2b       	or	r20, r21
    271e:	09 f4       	brne	.+2      	; 0x2722 <f_open+0x6b4>
    2720:	74 c0       	rjmp	.+232    	; 0x280a <f_open+0x79c>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2722:	f8 01       	movw	r30, r16
    2724:	80 81       	ld	r24, Z
    2726:	85 3e       	cpi	r24, 0xE5	; 229
    2728:	09 f4       	brne	.+2      	; 0x272c <f_open+0x6be>
    272a:	90 82       	st	Z, r9

	if (ni == 8) b <<= 2;
    272c:	f8 e0       	ldi	r31, 0x08	; 8
    272e:	cf 16       	cp	r12, r31
    2730:	d1 04       	cpc	r13, r1
    2732:	19 f4       	brne	.+6      	; 0x273a <f_open+0x6cc>
    2734:	9a 2f       	mov	r25, r26
    2736:	99 0f       	add	r25, r25
    2738:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    273a:	29 2f       	mov	r18, r25
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	c9 01       	movw	r24, r18
    2740:	83 70       	andi	r24, 0x03	; 3
    2742:	90 70       	andi	r25, 0x00	; 0
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	09 f4       	brne	.+2      	; 0x274a <f_open+0x6dc>
    2748:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    274a:	2c 70       	andi	r18, 0x0C	; 12
    274c:	30 70       	andi	r19, 0x00	; 0
    274e:	24 30       	cpi	r18, 0x04	; 4
    2750:	31 05       	cpc	r19, r1
    2752:	09 f4       	brne	.+2      	; 0x2756 <f_open+0x6e8>
    2754:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2756:	d8 01       	movw	r26, r16
    2758:	1b 96       	adiw	r26, 0x0b	; 11
    275a:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    275c:	c5 01       	movw	r24, r10
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	2c d8       	rcall	.-4008   	; 0x17bc <dir_sdi>
    2764:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2766:	88 23       	and	r24, r24
    2768:	69 f5       	brne	.+90     	; 0x27c4 <f_open+0x756>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    276a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    276c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    276e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2770:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2772:	8d 85       	ldd	r24, Y+13	; 0x0d
    2774:	9e 85       	ldd	r25, Y+14	; 0x0e
    2776:	0e 94 ca 08 	call	0x1194	; 0x1194 <move_window>
    277a:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    277c:	88 23       	and	r24, r24
    277e:	11 f5       	brne	.+68     	; 0x27c4 <f_open+0x756>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2780:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2782:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2784:	80 81       	ld	r24, Z
    2786:	88 23       	and	r24, r24
    2788:	11 f4       	brne	.+4      	; 0x278e <f_open+0x720>
    278a:	44 e0       	ldi	r20, 0x04	; 4
    278c:	1b c0       	rjmp	.+54     	; 0x27c4 <f_open+0x756>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    278e:	83 85       	ldd	r24, Z+11	; 0x0b
    2790:	83 fd       	sbrc	r24, 3
    2792:	13 c0       	rjmp	.+38     	; 0x27ba <f_open+0x74c>
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	9c 01       	movw	r18, r24
    279a:	d9 01       	movw	r26, r18
    279c:	2b e0       	ldi	r18, 0x0B	; 11
    279e:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    27a0:	21 50       	subi	r18, 0x01	; 1
    27a2:	30 40       	sbci	r19, 0x00	; 0
    27a4:	5f ef       	ldi	r21, 0xFF	; 255
    27a6:	2f 3f       	cpi	r18, 0xFF	; 255
    27a8:	35 07       	cpc	r19, r21
    27aa:	61 f0       	breq	.+24     	; 0x27c4 <f_open+0x756>
    27ac:	90 81       	ld	r25, Z
    27ae:	8c 91       	ld	r24, X
    27b0:	98 17       	cp	r25, r24
    27b2:	19 f4       	brne	.+6      	; 0x27ba <f_open+0x74c>
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	11 96       	adiw	r26, 0x01	; 1
    27b8:	f3 cf       	rjmp	.-26     	; 0x27a0 <f_open+0x732>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    27ba:	c5 01       	movw	r24, r10
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	bc d8       	rcall	.-3720   	; 0x193a <dir_next>
    27c2:	d0 cf       	rjmp	.-96     	; 0x2764 <f_open+0x6f6>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    27c4:	e9 a1       	ldd	r30, Y+33	; 0x21
    27c6:	fa a1       	ldd	r31, Y+34	; 0x22
    27c8:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    27ca:	44 23       	and	r20, r20
    27cc:	39 f0       	breq	.+14     	; 0x27dc <f_open+0x76e>
    27ce:	f4 2e       	mov	r15, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    27d0:	94 e0       	ldi	r25, 0x04	; 4
    27d2:	49 17       	cp	r20, r25
    27d4:	e9 f4       	brne	.+58     	; 0x2810 <f_open+0x7a2>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    27d6:	82 ff       	sbrs	r24, 2
    27d8:	1d c0       	rjmp	.+58     	; 0x2814 <f_open+0x7a6>
    27da:	1e c0       	rjmp	.+60     	; 0x2818 <f_open+0x7aa>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    27dc:	82 fd       	sbrc	r24, 2
    27de:	18 c0       	rjmp	.+48     	; 0x2810 <f_open+0x7a2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    27e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    27e2:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    27e4:	83 85       	ldd	r24, Z+11	; 0x0b
    27e6:	84 ff       	sbrs	r24, 4
    27e8:	15 c0       	rjmp	.+42     	; 0x2814 <f_open+0x7a6>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    27ea:	aa a9       	ldd	r26, Y+50	; 0x32
    27ec:	bb a9       	ldd	r27, Y+51	; 0x33
    27ee:	ae 0d       	add	r26, r14
    27f0:	bf 1d       	adc	r27, r15
    27f2:	bb ab       	std	Y+51, r27	; 0x33
    27f4:	aa ab       	std	Y+50, r26	; 0x32
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    27f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fa:	bf 01       	movw	r22, r30
    27fc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <ld_clust>
    2800:	6b 8b       	std	Y+19, r22	; 0x13
    2802:	7c 8b       	std	Y+20, r23	; 0x14
    2804:	8d 8b       	std	Y+21, r24	; 0x15
    2806:	9e 8b       	std	Y+22, r25	; 0x16
    2808:	fd ce       	rjmp	.-518    	; 0x2604 <f_open+0x596>
    280a:	76 e0       	ldi	r23, 0x06	; 6
    280c:	f7 2e       	mov	r15, r23
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <f_open+0x7aa>
    2810:	f4 2e       	mov	r15, r20
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <f_open+0x7aa>
    2814:	65 e0       	ldi	r22, 0x05	; 5
    2816:	f6 2e       	mov	r15, r22
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    2818:	2f 8c       	ldd	r2, Y+31	; 0x1f
    281a:	38 a0       	ldd	r3, Y+32	; 0x20
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    281c:	ff 20       	and	r15, r15
    281e:	29 f4       	brne	.+10     	; 0x282a <f_open+0x7bc>
			if (!dir)	/* Current dir itself */
    2820:	21 14       	cp	r2, r1
    2822:	31 04       	cpc	r3, r1
    2824:	11 f4       	brne	.+4      	; 0x282a <f_open+0x7bc>
    2826:	56 e0       	ldi	r21, 0x06	; 6
    2828:	f5 2e       	mov	r15, r21
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    282a:	bb a5       	ldd	r27, Y+43	; 0x2b
    282c:	2b 2f       	mov	r18, r27
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	c9 01       	movw	r24, r18
    2832:	8c 71       	andi	r24, 0x1C	; 28
    2834:	90 70       	andi	r25, 0x00	; 0
    2836:	89 2b       	or	r24, r25
    2838:	09 f4       	brne	.+2      	; 0x283c <f_open+0x7ce>
    283a:	ee c0       	rjmp	.+476    	; 0x2a18 <f_open+0x9aa>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    283c:	ff 20       	and	r15, r15
    283e:	09 f4       	brne	.+2      	; 0x2842 <f_open+0x7d4>
    2840:	47 c0       	rjmp	.+142    	; 0x28d0 <f_open+0x862>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2842:	e4 e0       	ldi	r30, 0x04	; 4
    2844:	fe 16       	cp	r15, r30
    2846:	d9 f5       	brne	.+118    	; 0x28be <f_open+0x850>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2848:	8e 01       	movw	r16, r28
    284a:	03 5f       	subi	r16, 0xF3	; 243
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	c8 01       	movw	r24, r16
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	0e 94 de 0b 	call	0x17bc	; 0x17bc <dir_sdi>
    2858:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    285a:	88 23       	and	r24, r24
    285c:	81 f5       	brne	.+96     	; 0x28be <f_open+0x850>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    285e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2860:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2862:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2864:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	0e 94 ca 08 	call	0x1194	; 0x1194 <move_window>
    286e:	f8 2e       	mov	r15, r24
			if (res != FR_OK) break;
    2870:	88 23       	and	r24, r24
    2872:	29 f5       	brne	.+74     	; 0x28be <f_open+0x850>
			c = *dj->dir;
    2874:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2876:	f8 a1       	ldd	r31, Y+32	; 0x20
    2878:	e0 81       	ld	r30, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    287a:	e5 3e       	cpi	r30, 0xE5	; 229
    287c:	09 f4       	brne	.+2      	; 0x2880 <f_open+0x812>
    287e:	4b c1       	rjmp	.+662    	; 0x2b16 <f_open+0xaa8>
    2880:	ee 23       	and	r30, r30
    2882:	09 f4       	brne	.+2      	; 0x2886 <f_open+0x818>
    2884:	48 c1       	rjmp	.+656    	; 0x2b16 <f_open+0xaa8>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2886:	c8 01       	movw	r24, r16
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	56 d8       	rcall	.-3924   	; 0x193a <dir_next>
    288e:	f8 2e       	mov	r15, r24
		} while (res == FR_OK);
    2890:	88 23       	and	r24, r24
    2892:	29 f3       	breq	.-54     	; 0x285e <f_open+0x7f0>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <f_open+0x850>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2896:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2898:	18 a1       	ldd	r17, Y+32	; 0x20
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    289a:	c8 01       	movw	r24, r16
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	0e 94 2e 08 	call	0x105c	; 0x105c <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    28a8:	69 a1       	ldd	r22, Y+33	; 0x21
    28aa:	7a a1       	ldd	r23, Y+34	; 0x22
    28ac:	c8 01       	movw	r24, r16
    28ae:	4b e0       	ldi	r20, 0x0B	; 11
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	0e 94 02 08 	call	0x1004	; 0x1004 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    28b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    28b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	84 83       	std	Z+4, r24	; 0x04
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    28be:	2f 8c       	ldd	r2, Y+31	; 0x1f
    28c0:	38 a0       	ldd	r3, Y+32	; 0x20
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    28c2:	ff 20       	and	r15, r15
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <f_open+0x85a>
    28c6:	fc c0       	rjmp	.+504    	; 0x2ac0 <f_open+0xa52>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    28c8:	fb a5       	ldd	r31, Y+43	; 0x2b
    28ca:	f8 60       	ori	r31, 0x08	; 8
    28cc:	fb a7       	std	Y+43, r31	; 0x2b
    28ce:	08 c0       	rjmp	.+16     	; 0x28e0 <f_open+0x872>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    28d0:	d1 01       	movw	r26, r2
    28d2:	1b 96       	adiw	r26, 0x0b	; 11
    28d4:	8c 91       	ld	r24, X
    28d6:	81 71       	andi	r24, 0x11	; 17
    28d8:	09 f0       	breq	.+2      	; 0x28dc <f_open+0x86e>
    28da:	0f c1       	rjmp	.+542    	; 0x2afa <f_open+0xa8c>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    28dc:	22 fd       	sbrc	r18, 2
    28de:	0a c1       	rjmp	.+532    	; 0x2af4 <f_open+0xa86>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    28e0:	bb a5       	ldd	r27, Y+43	; 0x2b
    28e2:	b3 ff       	sbrs	r27, 3
    28e4:	a8 c0       	rjmp	.+336    	; 0x2a36 <f_open+0x9c8>
				dw = get_fattime();					/* Created time */
    28e6:	0e 94 02 07 	call	0xe04	; 0xe04 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    28ea:	f1 01       	movw	r30, r2
    28ec:	66 87       	std	Z+14, r22	; 0x0e
    28ee:	77 87       	std	Z+15, r23	; 0x0f
    28f0:	80 8b       	std	Z+16, r24	; 0x10
    28f2:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    28f4:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    28f6:	d1 01       	movw	r26, r2
    28f8:	5c 96       	adiw	r26, 0x1c	; 28
    28fa:	1d 92       	st	X+, r1
    28fc:	1d 92       	st	X+, r1
    28fe:	1d 92       	st	X+, r1
    2900:	1c 92       	st	X, r1
    2902:	5f 97       	sbiw	r26, 0x1f	; 31
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    2904:	8d 85       	ldd	r24, Y+13	; 0x0d
    2906:	9e 85       	ldd	r25, Y+14	; 0x0e
    2908:	b1 01       	movw	r22, r2
    290a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <ld_clust>
    290e:	5b 01       	movw	r10, r22
    2910:	6c 01       	movw	r12, r24
				st_clust(dir, 0);					/* cluster = 0 */
    2912:	c1 01       	movw	r24, r2
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	0e 94 90 08 	call	0x1120	; 0x1120 <st_clust>
				dj.fs->wflag = 1;
    2920:	4d 84       	ldd	r4, Y+13	; 0x0d
    2922:	5e 84       	ldd	r5, Y+14	; 0x0e
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	f2 01       	movw	r30, r4
    2928:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    292a:	a1 14       	cp	r10, r1
    292c:	b1 04       	cpc	r11, r1
    292e:	c1 04       	cpc	r12, r1
    2930:	d1 04       	cpc	r13, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <f_open+0x8c8>
    2934:	80 c0       	rjmp	.+256    	; 0x2a36 <f_open+0x9c8>
					dw = dj.fs->winsect;
    2936:	d2 01       	movw	r26, r4
    2938:	9a 96       	adiw	r26, 0x2a	; 42
    293a:	2d 91       	ld	r18, X+
    293c:	3d 91       	ld	r19, X+
    293e:	4d 91       	ld	r20, X+
    2940:	5c 91       	ld	r21, X
    2942:	9d 97       	sbiw	r26, 0x2d	; 45
    2944:	2f a3       	std	Y+39, r18	; 0x27
    2946:	38 a7       	std	Y+40, r19	; 0x28
    2948:	49 a7       	std	Y+41, r20	; 0x29
    294a:	5a a7       	std	Y+42, r21	; 0x2a
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    294c:	b2 e0       	ldi	r27, 0x02	; 2
    294e:	ab 16       	cp	r10, r27
    2950:	b1 04       	cpc	r11, r1
    2952:	c1 04       	cpc	r12, r1
    2954:	d1 04       	cpc	r13, r1
    2956:	08 f4       	brcc	.+2      	; 0x295a <f_open+0x8ec>
    2958:	5c c0       	rjmp	.+184    	; 0x2a12 <f_open+0x9a4>
    295a:	86 89       	ldd	r24, Z+22	; 0x16
    295c:	97 89       	ldd	r25, Z+23	; 0x17
    295e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2960:	b1 8d       	ldd	r27, Z+25	; 0x19
    2962:	a8 16       	cp	r10, r24
    2964:	b9 06       	cpc	r11, r25
    2966:	ca 06       	cpc	r12, r26
    2968:	db 06       	cpc	r13, r27
    296a:	08 f0       	brcs	.+2      	; 0x296e <f_open+0x900>
    296c:	52 c0       	rjmp	.+164    	; 0x2a12 <f_open+0x9a4>
    296e:	86 01       	movw	r16, r12
    2970:	75 01       	movw	r14, r10
    2972:	43 c0       	rjmp	.+134    	; 0x29fa <f_open+0x98c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2974:	c2 01       	movw	r24, r4
    2976:	b8 01       	movw	r22, r16
    2978:	a7 01       	movw	r20, r14
    297a:	0e 94 33 0a 	call	0x1466	; 0x1466 <get_fat>
    297e:	3b 01       	movw	r6, r22
    2980:	4c 01       	movw	r8, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2982:	61 15       	cp	r22, r1
    2984:	71 05       	cpc	r23, r1
    2986:	81 05       	cpc	r24, r1
    2988:	91 05       	cpc	r25, r1
    298a:	09 f4       	brne	.+2      	; 0x298e <f_open+0x920>
    298c:	d1 c0       	rjmp	.+418    	; 0x2b30 <f_open+0xac2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    298e:	61 30       	cpi	r22, 0x01	; 1
    2990:	71 05       	cpc	r23, r1
    2992:	81 05       	cpc	r24, r1
    2994:	91 05       	cpc	r25, r1
    2996:	e9 f1       	breq	.+122    	; 0x2a12 <f_open+0x9a4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2998:	6f 3f       	cpi	r22, 0xFF	; 255
    299a:	2f ef       	ldi	r18, 0xFF	; 255
    299c:	72 07       	cpc	r23, r18
    299e:	2f ef       	ldi	r18, 0xFF	; 255
    29a0:	82 07       	cpc	r24, r18
    29a2:	2f ef       	ldi	r18, 0xFF	; 255
    29a4:	92 07       	cpc	r25, r18
    29a6:	19 f4       	brne	.+6      	; 0x29ae <f_open+0x940>
    29a8:	ff 24       	eor	r15, r15
    29aa:	f3 94       	inc	r15
    29ac:	89 c0       	rjmp	.+274    	; 0x2ac0 <f_open+0xa52>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    29ae:	c2 01       	movw	r24, r4
    29b0:	b8 01       	movw	r22, r16
    29b2:	a7 01       	movw	r20, r14
    29b4:	00 e0       	ldi	r16, 0x00	; 0
    29b6:	10 e0       	ldi	r17, 0x00	; 0
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	0e 94 40 09 	call	0x1280	; 0x1280 <put_fat>
    29c0:	f8 2e       	mov	r15, r24
			if (res != FR_OK) break;
    29c2:	88 23       	and	r24, r24
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <f_open+0x95a>
    29c6:	7c c0       	rjmp	.+248    	; 0x2ac0 <f_open+0xa52>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    29c8:	f2 01       	movw	r30, r4
    29ca:	86 85       	ldd	r24, Z+14	; 0x0e
    29cc:	97 85       	ldd	r25, Z+15	; 0x0f
    29ce:	a0 89       	ldd	r26, Z+16	; 0x10
    29d0:	b1 89       	ldd	r27, Z+17	; 0x11
    29d2:	8f 3f       	cpi	r24, 0xFF	; 255
    29d4:	ff ef       	ldi	r31, 0xFF	; 255
    29d6:	9f 07       	cpc	r25, r31
    29d8:	ff ef       	ldi	r31, 0xFF	; 255
    29da:	af 07       	cpc	r26, r31
    29dc:	ff ef       	ldi	r31, 0xFF	; 255
    29de:	bf 07       	cpc	r27, r31
    29e0:	51 f0       	breq	.+20     	; 0x29f6 <f_open+0x988>
				fs->free_clust++;
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	a1 1d       	adc	r26, r1
    29e6:	b1 1d       	adc	r27, r1
    29e8:	f2 01       	movw	r30, r4
    29ea:	86 87       	std	Z+14, r24	; 0x0e
    29ec:	97 87       	std	Z+15, r25	; 0x0f
    29ee:	a0 8b       	std	Z+16, r26	; 0x10
    29f0:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	25 83       	std	Z+5, r18	; 0x05
    29f6:	84 01       	movw	r16, r8
    29f8:	73 01       	movw	r14, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    29fa:	f2 01       	movw	r30, r4
    29fc:	86 89       	ldd	r24, Z+22	; 0x16
    29fe:	97 89       	ldd	r25, Z+23	; 0x17
    2a00:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a02:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a04:	e8 16       	cp	r14, r24
    2a06:	f9 06       	cpc	r15, r25
    2a08:	0a 07       	cpc	r16, r26
    2a0a:	1b 07       	cpc	r17, r27
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <f_open+0x9a2>
    2a0e:	b2 cf       	rjmp	.-156    	; 0x2974 <f_open+0x906>
    2a10:	8f c0       	rjmp	.+286    	; 0x2b30 <f_open+0xac2>
    2a12:	42 e0       	ldi	r20, 0x02	; 2
    2a14:	f4 2e       	mov	r15, r20
    2a16:	54 c0       	rjmp	.+168    	; 0x2ac0 <f_open+0xa52>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2a18:	ff 20       	and	r15, r15
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <f_open+0x9b0>
    2a1c:	51 c0       	rjmp	.+162    	; 0x2ac0 <f_open+0xa52>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2a1e:	d1 01       	movw	r26, r2
    2a20:	1b 96       	adiw	r26, 0x0b	; 11
    2a22:	8c 91       	ld	r24, X
    2a24:	84 ff       	sbrs	r24, 4
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <f_open+0x9c0>
    2a28:	34 e0       	ldi	r19, 0x04	; 4
    2a2a:	f3 2e       	mov	r15, r19
    2a2c:	49 c0       	rjmp	.+146    	; 0x2ac0 <f_open+0xa52>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2a2e:	21 ff       	sbrs	r18, 1
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <f_open+0x9c8>
    2a32:	80 fd       	sbrc	r24, 0
    2a34:	62 c0       	rjmp	.+196    	; 0x2afa <f_open+0xa8c>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2a36:	bb a5       	ldd	r27, Y+43	; 0x2b
    2a38:	b3 ff       	sbrs	r27, 3
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <f_open+0x9d2>
				mode |= FA__WRITTEN;
    2a3c:	b0 62       	ori	r27, 0x20	; 32
    2a3e:	bb a7       	std	Y+43, r27	; 0x2b
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2a40:	0d 85       	ldd	r16, Y+13	; 0x0d
    2a42:	1e 85       	ldd	r17, Y+14	; 0x0e
    2a44:	f8 01       	movw	r30, r16
    2a46:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a48:	93 a5       	ldd	r25, Z+43	; 0x2b
    2a4a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2a4c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2a4e:	e8 a9       	ldd	r30, Y+48	; 0x30
    2a50:	f9 a9       	ldd	r31, Y+49	; 0x31
    2a52:	82 8f       	std	Z+26, r24	; 0x1a
    2a54:	93 8f       	std	Z+27, r25	; 0x1b
    2a56:	a4 8f       	std	Z+28, r26	; 0x1c
    2a58:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    2a5a:	37 8e       	std	Z+31, r3	; 0x1f
    2a5c:	26 8e       	std	Z+30, r2	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2a5e:	2b a5       	ldd	r18, Y+43	; 0x2b
    2a60:	24 83       	std	Z+4, r18	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2a62:	c8 01       	movw	r24, r16
    2a64:	b1 01       	movw	r22, r2
    2a66:	0e 94 74 08 	call	0x10e8	; 0x10e8 <ld_clust>
    2a6a:	a8 a9       	ldd	r26, Y+48	; 0x30
    2a6c:	b9 a9       	ldd	r27, Y+49	; 0x31
    2a6e:	1e 96       	adiw	r26, 0x0e	; 14
    2a70:	6d 93       	st	X+, r22
    2a72:	7d 93       	st	X+, r23
    2a74:	8d 93       	st	X+, r24
    2a76:	9c 93       	st	X, r25
    2a78:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2a7a:	f1 01       	movw	r30, r2
    2a7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a7e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2a80:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2a82:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2a84:	e8 a9       	ldd	r30, Y+48	; 0x30
    2a86:	f9 a9       	ldd	r31, Y+49	; 0x31
    2a88:	82 87       	std	Z+10, r24	; 0x0a
    2a8a:	93 87       	std	Z+11, r25	; 0x0b
    2a8c:	a4 87       	std	Z+12, r26	; 0x0c
    2a8e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2a90:	a8 a9       	ldd	r26, Y+48	; 0x30
    2a92:	b9 a9       	ldd	r27, Y+49	; 0x31
    2a94:	16 96       	adiw	r26, 0x06	; 6
    2a96:	1d 92       	st	X+, r1
    2a98:	1d 92       	st	X+, r1
    2a9a:	1d 92       	st	X+, r1
    2a9c:	1c 92       	st	X, r1
    2a9e:	19 97       	sbiw	r26, 0x09	; 9
			fp->dsect = 0;
    2aa0:	e8 a9       	ldd	r30, Y+48	; 0x30
    2aa2:	f9 a9       	ldd	r31, Y+49	; 0x31
    2aa4:	16 8a       	std	Z+22, r1	; 0x16
    2aa6:	17 8a       	std	Z+23, r1	; 0x17
    2aa8:	10 8e       	std	Z+24, r1	; 0x18
    2aaa:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2aac:	11 83       	std	Z+1, r17	; 0x01
    2aae:	00 83       	st	Z, r16
    2ab0:	d8 01       	movw	r26, r16
    2ab2:	16 96       	adiw	r26, 0x06	; 6
    2ab4:	8d 91       	ld	r24, X+
    2ab6:	9c 91       	ld	r25, X
    2ab8:	17 97       	sbiw	r26, 0x07	; 7
    2aba:	93 83       	std	Z+3, r25	; 0x03
    2abc:	82 83       	std	Z+2, r24	; 0x02
    2abe:	ff 24       	eor	r15, r15
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2ac0:	8f 2d       	mov	r24, r15
    2ac2:	e3 96       	adiw	r28, 0x33	; 51
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	df 90       	pop	r13
    2adc:	cf 90       	pop	r12
    2ade:	bf 90       	pop	r11
    2ae0:	af 90       	pop	r10
    2ae2:	9f 90       	pop	r9
    2ae4:	8f 90       	pop	r8
    2ae6:	7f 90       	pop	r7
    2ae8:	6f 90       	pop	r6
    2aea:	5f 90       	pop	r5
    2aec:	4f 90       	pop	r4
    2aee:	3f 90       	pop	r3
    2af0:	2f 90       	pop	r2
    2af2:	08 95       	ret
			fp->fptr = 0;						/* File pointer */
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2af4:	28 e0       	ldi	r18, 0x08	; 8
    2af6:	f2 2e       	mov	r15, r18
    2af8:	e3 cf       	rjmp	.-58     	; 0x2ac0 <f_open+0xa52>
    2afa:	97 e0       	ldi	r25, 0x07	; 7
    2afc:	f9 2e       	mov	r15, r25
    2afe:	e0 cf       	rjmp	.-64     	; 0x2ac0 <f_open+0xa52>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    2b00:	ce 01       	movw	r24, r28
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	9a a3       	std	Y+34, r25	; 0x22
    2b06:	89 a3       	std	Y+33, r24	; 0x21
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2b08:	ea a9       	ldd	r30, Y+50	; 0x32
    2b0a:	fb a9       	ldd	r31, Y+51	; 0x33
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8f 32       	cpi	r24, 0x2F	; 47
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <f_open+0xaa6>
    2b12:	51 cd       	rjmp	.-1374   	; 0x25b6 <f_open+0x548>
    2b14:	52 cd       	rjmp	.-1372   	; 0x25ba <f_open+0x54c>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2b16:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2b18:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2b1a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b1c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b22:	0e 94 ca 08 	call	0x1194	; 0x1194 <move_window>
    2b26:	f8 2e       	mov	r15, r24
		if (res == FR_OK) {
    2b28:	88 23       	and	r24, r24
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <f_open+0xac0>
    2b2c:	c8 ce       	rjmp	.-624    	; 0x28be <f_open+0x850>
    2b2e:	b3 ce       	rjmp	.-666    	; 0x2896 <f_open+0x828>
				dj.fs->wflag = 1;
				if (cl) {							/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2b30:	ed 85       	ldd	r30, Y+13	; 0x0d
    2b32:	fe 85       	ldd	r31, Y+14	; 0x0e
    2b34:	08 94       	sec
    2b36:	a1 08       	sbc	r10, r1
    2b38:	b1 08       	sbc	r11, r1
    2b3a:	c1 08       	sbc	r12, r1
    2b3c:	d1 08       	sbc	r13, r1
    2b3e:	a2 86       	std	Z+10, r10	; 0x0a
    2b40:	b3 86       	std	Z+11, r11	; 0x0b
    2b42:	c4 86       	std	Z+12, r12	; 0x0c
    2b44:	d5 86       	std	Z+13, r13	; 0x0d
						res = move_window(dj.fs, dw);
    2b46:	cf 01       	movw	r24, r30
    2b48:	4f a1       	ldd	r20, Y+39	; 0x27
    2b4a:	58 a5       	ldd	r21, Y+40	; 0x28
    2b4c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b50:	0e 94 ca 08 	call	0x1194	; 0x1194 <move_window>
    2b54:	f8 2e       	mov	r15, r24
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2b56:	88 23       	and	r24, r24
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <f_open+0xaee>
    2b5a:	6d cf       	rjmp	.-294    	; 0x2a36 <f_open+0x9c8>
    2b5c:	b1 cf       	rjmp	.-158    	; 0x2ac0 <f_open+0xa52>
    2b5e:	9a 2f       	mov	r25, r26
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	dc cd       	rjmp	.-1096   	; 0x271c <f_open+0x6ae>

00002b64 <Endpoint_Write_Control_Stream_LE>:
    2b64:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2b66:	40 91 06 04 	lds	r20, 0x0406
    2b6a:	50 91 07 04 	lds	r21, 0x0407
    2b6e:	46 17       	cp	r20, r22
    2b70:	57 07       	cpc	r21, r23
    2b72:	18 f4       	brcc	.+6      	; 0x2b7a <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2b74:	f9 01       	movw	r30, r18
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	45 c0       	rjmp	.+138    	; 0x2c04 <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2b7a:	61 15       	cp	r22, r1
    2b7c:	71 05       	cpc	r23, r1
    2b7e:	11 f0       	breq	.+4      	; 0x2b84 <Endpoint_Write_Control_Stream_LE+0x20>
    2b80:	ab 01       	movw	r20, r22
    2b82:	f8 cf       	rjmp	.-16     	; 0x2b74 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b84:	80 91 e8 00 	lds	r24, 0x00E8
    2b88:	8e 77       	andi	r24, 0x7E	; 126
    2b8a:	80 93 e8 00 	sts	0x00E8, r24
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	f0 cf       	rjmp	.-32     	; 0x2b74 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2b94:	80 91 ff 03 	lds	r24, 0x03FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <Endpoint_Write_Control_Stream_LE+0x3a>
    2b9c:	45 c0       	rjmp	.+138    	; 0x2c28 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2b9e:	85 30       	cpi	r24, 0x05	; 5
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <Endpoint_Write_Control_Stream_LE+0x40>
    2ba2:	44 c0       	rjmp	.+136    	; 0x2c2c <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ba4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2ba8:	83 ff       	sbrs	r24, 3
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <Endpoint_Write_Control_Stream_LE+0x4c>
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2bb0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2bb4:	82 fd       	sbrc	r24, 2
    2bb6:	32 c0       	rjmp	.+100    	; 0x2c1c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2bb8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2bbc:	80 ff       	sbrs	r24, 0
    2bbe:	22 c0       	rjmp	.+68     	; 0x2c04 <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2bc0:	80 91 f3 00 	lds	r24, 0x00F3
    2bc4:	90 91 f2 00 	lds	r25, 0x00F2
    2bc8:	78 2f       	mov	r23, r24
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	29 2f       	mov	r18, r25
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	26 2b       	or	r18, r22
    2bd2:	37 2b       	or	r19, r23
    2bd4:	07 c0       	rjmp	.+14     	; 0x2be4 <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2bd6:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2bd8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2bdc:	41 50       	subi	r20, 0x01	; 1
    2bde:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    2be0:	2f 5f       	subi	r18, 0xFF	; 255
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2be4:	41 15       	cp	r20, r1
    2be6:	51 05       	cpc	r21, r1
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <Endpoint_Write_Control_Stream_LE+0x8c>
    2bea:	28 30       	cpi	r18, 0x08	; 8
    2bec:	31 05       	cpc	r19, r1
    2bee:	98 f3       	brcs	.-26     	; 0x2bd6 <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	28 30       	cpi	r18, 0x08	; 8
    2bf4:	31 05       	cpc	r19, r1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <Endpoint_Write_Control_Stream_LE+0x96>
    2bf8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2bfa:	80 91 e8 00 	lds	r24, 0x00E8
    2bfe:	8e 77       	andi	r24, 0x7E	; 126
    2c00:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2c04:	41 15       	cp	r20, r1
    2c06:	51 05       	cpc	r21, r1
    2c08:	29 f6       	brne	.-118    	; 0x2b94 <Endpoint_Write_Control_Stream_LE+0x30>
    2c0a:	99 23       	and	r25, r25
    2c0c:	19 f6       	brne	.-122    	; 0x2b94 <Endpoint_Write_Control_Stream_LE+0x30>
    2c0e:	06 c0       	rjmp	.+12     	; 0x2c1c <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2c10:	80 91 ff 03 	lds	r24, 0x03FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2c14:	88 23       	and	r24, r24
    2c16:	41 f0       	breq	.+16     	; 0x2c28 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2c18:	85 30       	cpi	r24, 0x05	; 5
    2c1a:	41 f0       	breq	.+16     	; 0x2c2c <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2c1c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2c20:	82 ff       	sbrs	r24, 2
    2c22:	f6 cf       	rjmp	.-20     	; 0x2c10 <Endpoint_Write_Control_Stream_LE+0xac>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	08 95       	ret
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	08 95       	ret
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2c2e:	08 95       	ret

00002c30 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2c30:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2c32:	40 91 06 04 	lds	r20, 0x0406
    2c36:	50 91 07 04 	lds	r21, 0x0407
    2c3a:	46 17       	cp	r20, r22
    2c3c:	57 07       	cpc	r21, r23
    2c3e:	18 f4       	brcc	.+6      	; 0x2c46 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2c40:	f9 01       	movw	r30, r18
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	46 c0       	rjmp	.+140    	; 0x2cd2 <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2c46:	61 15       	cp	r22, r1
    2c48:	71 05       	cpc	r23, r1
    2c4a:	11 f0       	breq	.+4      	; 0x2c50 <Endpoint_Write_Control_PStream_LE+0x20>
    2c4c:	ab 01       	movw	r20, r22
    2c4e:	f8 cf       	rjmp	.-16     	; 0x2c40 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2c50:	80 91 e8 00 	lds	r24, 0x00E8
    2c54:	8e 77       	andi	r24, 0x7E	; 126
    2c56:	80 93 e8 00 	sts	0x00E8, r24
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	f0 cf       	rjmp	.-32     	; 0x2c40 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2c60:	80 91 ff 03 	lds	r24, 0x03FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2c64:	88 23       	and	r24, r24
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <Endpoint_Write_Control_PStream_LE+0x3a>
    2c68:	47 c0       	rjmp	.+142    	; 0x2cf8 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2c6a:	85 30       	cpi	r24, 0x05	; 5
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <Endpoint_Write_Control_PStream_LE+0x40>
    2c6e:	46 c0       	rjmp	.+140    	; 0x2cfc <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2c70:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2c74:	83 ff       	sbrs	r24, 3
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <Endpoint_Write_Control_PStream_LE+0x4c>
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2c7c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2c80:	82 fd       	sbrc	r24, 2
    2c82:	34 c0       	rjmp	.+104    	; 0x2cec <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2c84:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2c88:	80 ff       	sbrs	r24, 0
    2c8a:	23 c0       	rjmp	.+70     	; 0x2cd2 <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2c8c:	80 91 f3 00 	lds	r24, 0x00F3
    2c90:	90 91 f2 00 	lds	r25, 0x00F2
    2c94:	78 2f       	mov	r23, r24
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	29 2f       	mov	r18, r25
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	26 2b       	or	r18, r22
    2c9e:	37 2b       	or	r19, r23
    2ca0:	08 c0       	rjmp	.+16     	; 0x2cb2 <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2ca2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2ca4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2ca8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2caa:	41 50       	subi	r20, 0x01	; 1
    2cac:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    2cae:	2f 5f       	subi	r18, 0xFF	; 255
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2cb2:	41 15       	cp	r20, r1
    2cb4:	51 05       	cpc	r21, r1
    2cb6:	19 f0       	breq	.+6      	; 0x2cbe <Endpoint_Write_Control_PStream_LE+0x8e>
    2cb8:	28 30       	cpi	r18, 0x08	; 8
    2cba:	31 05       	cpc	r19, r1
    2cbc:	90 f3       	brcs	.-28     	; 0x2ca2 <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	28 30       	cpi	r18, 0x08	; 8
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <Endpoint_Write_Control_PStream_LE+0x98>
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2cc8:	80 91 e8 00 	lds	r24, 0x00E8
    2ccc:	8e 77       	andi	r24, 0x7E	; 126
    2cce:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2cd2:	41 15       	cp	r20, r1
    2cd4:	51 05       	cpc	r21, r1
    2cd6:	21 f6       	brne	.-120    	; 0x2c60 <Endpoint_Write_Control_PStream_LE+0x30>
    2cd8:	99 23       	and	r25, r25
    2cda:	09 f0       	breq	.+2      	; 0x2cde <Endpoint_Write_Control_PStream_LE+0xae>
    2cdc:	c1 cf       	rjmp	.-126    	; 0x2c60 <Endpoint_Write_Control_PStream_LE+0x30>
    2cde:	06 c0       	rjmp	.+12     	; 0x2cec <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2ce0:	80 91 ff 03 	lds	r24, 0x03FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2ce4:	88 23       	and	r24, r24
    2ce6:	41 f0       	breq	.+16     	; 0x2cf8 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2ce8:	85 30       	cpi	r24, 0x05	; 5
    2cea:	41 f0       	breq	.+16     	; 0x2cfc <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2cec:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2cf0:	82 ff       	sbrs	r24, 2
    2cf2:	f6 cf       	rjmp	.-20     	; 0x2ce0 <Endpoint_Write_Control_PStream_LE+0xb0>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	08 95       	ret
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	08 95       	ret
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2cfe:	08 95       	ret

00002d00 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2d00:	bf 92       	push	r11
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	18 2f       	mov	r17, r24
    2d14:	09 2f       	mov	r16, r25
    2d16:	7b 01       	movw	r14, r22
    2d18:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2d1a:	bc d1       	rcall	.+888    	; 0x3094 <Endpoint_WaitUntilReady>
    2d1c:	b8 2e       	mov	r11, r24
    2d1e:	88 23       	and	r24, r24
    2d20:	a9 f5       	brne	.+106    	; 0x2d8c <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2d22:	81 2f       	mov	r24, r17
    2d24:	90 2f       	mov	r25, r16
    2d26:	9c 01       	movw	r18, r24
    2d28:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2d2a:	c1 14       	cp	r12, r1
    2d2c:	d1 04       	cpc	r13, r1
    2d2e:	39 f0       	breq	.+14     	; 0x2d3e <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    2d30:	f6 01       	movw	r30, r12
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	e8 1a       	sub	r14, r24
    2d38:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2d3a:	c8 0f       	add	r28, r24
    2d3c:	d9 1f       	adc	r29, r25
    2d3e:	00 e0       	ldi	r16, 0x00	; 0
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	21 c0       	rjmp	.+66     	; 0x2d86 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2d44:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2d48:	85 fd       	sbrc	r24, 5
    2d4a:	15 c0       	rjmp	.+42     	; 0x2d76 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2d4c:	80 91 e8 00 	lds	r24, 0x00E8
    2d50:	8b 77       	andi	r24, 0x7B	; 123
    2d52:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2d56:	c1 14       	cp	r12, r1
    2d58:	d1 04       	cpc	r13, r1
    2d5a:	49 f0       	breq	.+18     	; 0x2d6e <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    2d5c:	f6 01       	movw	r30, r12
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	80 0f       	add	r24, r16
    2d64:	91 1f       	adc	r25, r17
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	85 e0       	ldi	r24, 0x05	; 5
    2d6c:	10 c0       	rjmp	.+32     	; 0x2d8e <Endpoint_Read_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2d6e:	92 d1       	rcall	.+804    	; 0x3094 <Endpoint_WaitUntilReady>
    2d70:	88 23       	and	r24, r24
    2d72:	49 f0       	breq	.+18     	; 0x2d86 <Endpoint_Read_Stream_LE+0x86>
    2d74:	0c c0       	rjmp	.+24     	; 0x2d8e <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2d76:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2d7a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2d7c:	08 94       	sec
    2d7e:	e1 08       	sbc	r14, r1
    2d80:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    2d82:	0f 5f       	subi	r16, 0xFF	; 255
    2d84:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2d86:	e1 14       	cp	r14, r1
    2d88:	f1 04       	cpc	r15, r1
    2d8a:	e1 f6       	brne	.-72     	; 0x2d44 <Endpoint_Read_Stream_LE+0x44>
    2d8c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	ef 90       	pop	r14
    2d9a:	df 90       	pop	r13
    2d9c:	cf 90       	pop	r12
    2d9e:	bf 90       	pop	r11
    2da0:	08 95       	ret

00002da2 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2da2:	bf 92       	push	r11
    2da4:	cf 92       	push	r12
    2da6:	df 92       	push	r13
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	8c 01       	movw	r16, r24
    2db6:	eb 01       	movw	r28, r22
    2db8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2dba:	6c d1       	rcall	.+728    	; 0x3094 <Endpoint_WaitUntilReady>
    2dbc:	b8 2e       	mov	r11, r24
    2dbe:	88 23       	and	r24, r24
    2dc0:	b1 f5       	brne	.+108    	; 0x2e2e <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2dc2:	21 97       	sbiw	r28, 0x01	; 1
    2dc4:	0c 0f       	add	r16, r28
    2dc6:	1d 1f       	adc	r17, r29
    2dc8:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2dca:	c1 14       	cp	r12, r1
    2dcc:	d1 04       	cpc	r13, r1
    2dce:	39 f0       	breq	.+14     	; 0x2dde <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    2dd0:	f6 01       	movw	r30, r12
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	c8 1b       	sub	r28, r24
    2dd8:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2dda:	08 1b       	sub	r16, r24
    2ddc:	19 0b       	sbc	r17, r25
    2dde:	ee 24       	eor	r14, r14
    2de0:	ff 24       	eor	r15, r15
    2de2:	23 c0       	rjmp	.+70     	; 0x2e2a <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2de4:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2de8:	85 fd       	sbrc	r24, 5
    2dea:	15 c0       	rjmp	.+42     	; 0x2e16 <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2dec:	80 91 e8 00 	lds	r24, 0x00E8
    2df0:	8e 77       	andi	r24, 0x7E	; 126
    2df2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2df6:	c1 14       	cp	r12, r1
    2df8:	d1 04       	cpc	r13, r1
    2dfa:	49 f0       	breq	.+18     	; 0x2e0e <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    2dfc:	f6 01       	movw	r30, r12
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	8e 0d       	add	r24, r14
    2e04:	9f 1d       	adc	r25, r15
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	80 83       	st	Z, r24
    2e0a:	85 e0       	ldi	r24, 0x05	; 5
    2e0c:	11 c0       	rjmp	.+34     	; 0x2e30 <Endpoint_Write_Stream_BE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2e0e:	42 d1       	rcall	.+644    	; 0x3094 <Endpoint_WaitUntilReady>
    2e10:	88 23       	and	r24, r24
    2e12:	59 f0       	breq	.+22     	; 0x2e2a <Endpoint_Write_Stream_BE+0x88>
    2e14:	0d c0       	rjmp	.+26     	; 0x2e30 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e1a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2e1e:	01 50       	subi	r16, 0x01	; 1
    2e20:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    2e22:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    2e24:	08 94       	sec
    2e26:	e1 1c       	adc	r14, r1
    2e28:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2e2a:	20 97       	sbiw	r28, 0x00	; 0
    2e2c:	d9 f6       	brne	.-74     	; 0x2de4 <Endpoint_Write_Stream_BE+0x42>
    2e2e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	df 90       	pop	r13
    2e3e:	cf 90       	pop	r12
    2e40:	bf 90       	pop	r11
    2e42:	08 95       	ret

00002e44 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2e44:	bf 92       	push	r11
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	18 2f       	mov	r17, r24
    2e58:	09 2f       	mov	r16, r25
    2e5a:	7b 01       	movw	r14, r22
    2e5c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2e5e:	1a d1       	rcall	.+564    	; 0x3094 <Endpoint_WaitUntilReady>
    2e60:	b8 2e       	mov	r11, r24
    2e62:	88 23       	and	r24, r24
    2e64:	a9 f5       	brne	.+106    	; 0x2ed0 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2e66:	81 2f       	mov	r24, r17
    2e68:	90 2f       	mov	r25, r16
    2e6a:	9c 01       	movw	r18, r24
    2e6c:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2e6e:	c1 14       	cp	r12, r1
    2e70:	d1 04       	cpc	r13, r1
    2e72:	39 f0       	breq	.+14     	; 0x2e82 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    2e74:	f6 01       	movw	r30, r12
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	e8 1a       	sub	r14, r24
    2e7c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2e7e:	c8 0f       	add	r28, r24
    2e80:	d9 1f       	adc	r29, r25
    2e82:	00 e0       	ldi	r16, 0x00	; 0
    2e84:	10 e0       	ldi	r17, 0x00	; 0
    2e86:	21 c0       	rjmp	.+66     	; 0x2eca <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2e88:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2e8c:	85 fd       	sbrc	r24, 5
    2e8e:	15 c0       	rjmp	.+42     	; 0x2eba <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e90:	80 91 e8 00 	lds	r24, 0x00E8
    2e94:	8e 77       	andi	r24, 0x7E	; 126
    2e96:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2e9a:	c1 14       	cp	r12, r1
    2e9c:	d1 04       	cpc	r13, r1
    2e9e:	49 f0       	breq	.+18     	; 0x2eb2 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    2ea0:	f6 01       	movw	r30, r12
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	80 0f       	add	r24, r16
    2ea8:	91 1f       	adc	r25, r17
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	10 c0       	rjmp	.+32     	; 0x2ed2 <Endpoint_Write_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2eb2:	f0 d0       	rcall	.+480    	; 0x3094 <Endpoint_WaitUntilReady>
    2eb4:	88 23       	and	r24, r24
    2eb6:	49 f0       	breq	.+18     	; 0x2eca <Endpoint_Write_Stream_LE+0x86>
    2eb8:	0c c0       	rjmp	.+24     	; 0x2ed2 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2eba:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2ebc:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2ec0:	08 94       	sec
    2ec2:	e1 08       	sbc	r14, r1
    2ec4:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    2ec6:	0f 5f       	subi	r16, 0xFF	; 255
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2eca:	e1 14       	cp	r14, r1
    2ecc:	f1 04       	cpc	r15, r1
    2ece:	e1 f6       	brne	.-72     	; 0x2e88 <Endpoint_Write_Stream_LE+0x44>
    2ed0:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    2ee2:	bf 90       	pop	r11
    2ee4:	08 95       	ret

00002ee6 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    2ee6:	df 92       	push	r13
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	ec 01       	movw	r28, r24
    2ef6:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2ef8:	cd d0       	rcall	.+410    	; 0x3094 <Endpoint_WaitUntilReady>
    2efa:	d8 2e       	mov	r13, r24
    2efc:	88 23       	and	r24, r24
    2efe:	61 f5       	brne	.+88     	; 0x2f58 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    2f00:	01 15       	cp	r16, r1
    2f02:	11 05       	cpc	r17, r1
    2f04:	29 f0       	breq	.+10     	; 0x2f10 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    2f06:	f8 01       	movw	r30, r16
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	c8 1b       	sub	r28, r24
    2f0e:	d9 0b       	sbc	r29, r25
    2f10:	ee 24       	eor	r14, r14
    2f12:	ff 24       	eor	r15, r15
    2f14:	1f c0       	rjmp	.+62     	; 0x2f54 <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2f16:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2f1a:	85 fd       	sbrc	r24, 5
    2f1c:	15 c0       	rjmp	.+42     	; 0x2f48 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2f1e:	80 91 e8 00 	lds	r24, 0x00E8
    2f22:	8e 77       	andi	r24, 0x7E	; 126
    2f24:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    2f28:	01 15       	cp	r16, r1
    2f2a:	11 05       	cpc	r17, r1
    2f2c:	49 f0       	breq	.+18     	; 0x2f40 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    2f2e:	f8 01       	movw	r30, r16
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	8e 0d       	add	r24, r14
    2f36:	9f 1d       	adc	r25, r15
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	85 e0       	ldi	r24, 0x05	; 5
    2f3e:	0d c0       	rjmp	.+26     	; 0x2f5a <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2f40:	a9 d0       	rcall	.+338    	; 0x3094 <Endpoint_WaitUntilReady>
    2f42:	88 23       	and	r24, r24
    2f44:	39 f0       	breq	.+14     	; 0x2f54 <Endpoint_Null_Stream+0x6e>
    2f46:	09 c0       	rjmp	.+18     	; 0x2f5a <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2f48:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    2f4c:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    2f4e:	08 94       	sec
    2f50:	e1 1c       	adc	r14, r1
    2f52:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    2f54:	20 97       	sbiw	r28, 0x00	; 0
    2f56:	f9 f6       	brne	.-66     	; 0x2f16 <Endpoint_Null_Stream+0x30>
    2f58:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	ff 90       	pop	r15
    2f64:	ef 90       	pop	r14
    2f66:	df 90       	pop	r13
    2f68:	08 95       	ret

00002f6a <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    2f6a:	38 2f       	mov	r19, r24
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	2e c0       	rjmp	.+92     	; 0x2fcc <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f70:	82 2f       	mov	r24, r18
    2f72:	8f 70       	andi	r24, 0x0F	; 15
    2f74:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    2f78:	23 17       	cp	r18, r19
    2f7a:	21 f4       	brne	.+8      	; 0x2f84 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    2f7c:	76 2f       	mov	r23, r22
    2f7e:	94 2f       	mov	r25, r20
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    2f84:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    2f88:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    2f8c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    2f90:	91 ff       	sbrs	r25, 1
    2f92:	1b c0       	rjmp	.+54     	; 0x2fca <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    2f94:	80 91 eb 00 	lds	r24, 0x00EB
    2f98:	8e 7f       	andi	r24, 0xFE	; 254
    2f9a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    2f9e:	80 91 ed 00 	lds	r24, 0x00ED
    2fa2:	8d 7f       	andi	r24, 0xFD	; 253
    2fa4:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2fa8:	80 91 eb 00 	lds	r24, 0x00EB
    2fac:	81 60       	ori	r24, 0x01	; 1
    2fae:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2fb2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2fb6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    2fba:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2fbe:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    2fc2:	87 fd       	sbrc	r24, 7
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <Endpoint_ConfigureEndpoint_Prv+0x60>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2fca:	2f 5f       	subi	r18, 0xFF	; 255
    2fcc:	27 30       	cpi	r18, 0x07	; 7
    2fce:	80 f2       	brcs	.-96     	; 0x2f70 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2fd0:	3f 70       	andi	r19, 0x0F	; 15
    2fd2:	30 93 e9 00 	sts	0x00E9, r19
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2fd8:	08 95       	ret

00002fda <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	06 2f       	mov	r16, r22
    2fe4:	ec 01       	movw	r28, r24
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	2a c0       	rjmp	.+84     	; 0x303e <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    2fea:	98 81       	ld	r25, Y
    2fec:	99 23       	and	r25, r25
    2fee:	29 f1       	breq	.+74     	; 0x303a <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    2ff0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff6:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    2ff8:	89 2f       	mov	r24, r25
    2ffa:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    2ffc:	87 30       	cpi	r24, 0x07	; 7
    2ffe:	18 f5       	brcc	.+70     	; 0x3046 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3000:	22 30       	cpi	r18, 0x02	; 2
    3002:	10 f4       	brcc	.+4      	; 0x3008 <Endpoint_ConfigureEndpointTable+0x2e>
    3004:	52 e0       	ldi	r21, 0x02	; 2
    3006:	01 c0       	rjmp	.+2      	; 0x300a <Endpoint_ConfigureEndpointTable+0x30>
    3008:	56 e0       	ldi	r21, 0x06	; 6
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	28 e0       	ldi	r18, 0x08	; 8
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    3012:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3018:	2e 17       	cp	r18, r30
    301a:	3f 07       	cpc	r19, r31
    301c:	d0 f3       	brcs	.-12     	; 0x3012 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    301e:	62 95       	swap	r22
    3020:	66 0f       	add	r22, r22
    3022:	66 0f       	add	r22, r22
    3024:	60 7c       	andi	r22, 0xC0	; 192
    3026:	99 1f       	adc	r25, r25
    3028:	99 27       	eor	r25, r25
    302a:	99 1f       	adc	r25, r25
    302c:	69 2b       	or	r22, r25
    302e:	42 95       	swap	r20
    3030:	40 7f       	andi	r20, 0xF0	; 240
    3032:	45 2b       	or	r20, r21
    3034:	9a df       	rcall	.-204    	; 0x2f6a <Endpoint_ConfigureEndpoint_Prv>
    3036:	88 23       	and	r24, r24
    3038:	31 f0       	breq	.+12     	; 0x3046 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    303a:	1f 5f       	subi	r17, 0xFF	; 255
    303c:	25 96       	adiw	r28, 0x05	; 5
    303e:	10 17       	cp	r17, r16
    3040:	a0 f2       	brcs	.-88     	; 0x2fea <Endpoint_ConfigureEndpointTable+0x10>
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	01 c0       	rjmp	.+2      	; 0x3048 <Endpoint_ConfigureEndpointTable+0x6e>
    3046:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	08 95       	ret

00003052 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3052:	80 91 00 04 	lds	r24, 0x0400
    3056:	88 23       	and	r24, r24
    3058:	9c f4       	brge	.+38     	; 0x3080 <Endpoint_ClearStatusStage+0x2e>
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    305c:	80 91 ff 03 	lds	r24, 0x03FF
    3060:	88 23       	and	r24, r24
    3062:	b9 f0       	breq	.+46     	; 0x3092 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3064:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3068:	82 ff       	sbrs	r24, 2
    306a:	f8 cf       	rjmp	.-16     	; 0x305c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    306c:	80 91 e8 00 	lds	r24, 0x00E8
    3070:	8b 77       	andi	r24, 0x7B	; 123
    3072:	80 93 e8 00 	sts	0x00E8, r24
    3076:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3078:	80 91 ff 03 	lds	r24, 0x03FF
    307c:	88 23       	and	r24, r24
    307e:	49 f0       	breq	.+18     	; 0x3092 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3080:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3084:	80 ff       	sbrs	r24, 0
    3086:	f8 cf       	rjmp	.-16     	; 0x3078 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3088:	80 91 e8 00 	lds	r24, 0x00E8
    308c:	8e 77       	andi	r24, 0x7E	; 126
    308e:	80 93 e8 00 	sts	0x00E8, r24
    3092:	08 95       	ret

00003094 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3094:	40 91 e4 00 	lds	r20, 0x00E4
    3098:	50 91 e5 00 	lds	r21, 0x00E5
    309c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    309e:	80 91 ec 00 	lds	r24, 0x00EC
    30a2:	80 ff       	sbrs	r24, 0
    30a4:	24 c0       	rjmp	.+72     	; 0x30ee <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    30a6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    30aa:	80 fd       	sbrc	r24, 0
    30ac:	1e c0       	rjmp	.+60     	; 0x30ea <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    30ae:	80 91 ff 03 	lds	r24, 0x03FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    30b2:	88 23       	and	r24, r24
    30b4:	11 f4       	brne	.+4      	; 0x30ba <Endpoint_WaitUntilReady+0x26>
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    30ba:	85 30       	cpi	r24, 0x05	; 5
    30bc:	11 f4       	brne	.+4      	; 0x30c2 <Endpoint_WaitUntilReady+0x2e>
    30be:	83 e0       	ldi	r24, 0x03	; 3
    30c0:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    30c2:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    30c6:	85 ff       	sbrs	r24, 5
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <Endpoint_WaitUntilReady+0x3a>
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	08 95       	ret
    30ce:	80 91 e4 00 	lds	r24, 0x00E4
    30d2:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    30d6:	84 17       	cp	r24, r20
    30d8:	95 07       	cpc	r25, r21
    30da:	09 f3       	breq	.-62     	; 0x309e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    30dc:	22 23       	and	r18, r18
    30de:	11 f4       	brne	.+4      	; 0x30e4 <Endpoint_WaitUntilReady+0x50>
    30e0:	84 e0       	ldi	r24, 0x04	; 4
    30e2:	08 95       	ret
    30e4:	21 50       	subi	r18, 0x01	; 1
    30e6:	ac 01       	movw	r20, r24
    30e8:	da cf       	rjmp	.-76     	; 0x309e <Endpoint_WaitUntilReady+0xa>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    30ec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    30ee:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    30f2:	82 ff       	sbrs	r24, 2
    30f4:	dc cf       	rjmp	.-72     	; 0x30ae <Endpoint_WaitUntilReady+0x1a>
    30f6:	f9 cf       	rjmp	.-14     	; 0x30ea <Endpoint_WaitUntilReady+0x56>

000030f8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3100:	4f d0       	rcall	.+158    	; 0x31a0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3102:	56 d0       	rcall	.+172    	; 0x31b0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3104:	08 ed       	ldi	r16, 0xD8	; 216
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	f8 01       	movw	r30, r16
    310a:	80 81       	ld	r24, Z
    310c:	8f 77       	andi	r24, 0x7F	; 127
    310e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    3110:	80 81       	ld	r24, Z
    3112:	80 68       	ori	r24, 0x80	; 128
    3114:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3116:	80 81       	ld	r24, Z
    3118:	8f 7d       	andi	r24, 0xDF	; 223
    311a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    311c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    311e:	10 92 ff 03 	sts	0x03FF, r1
	USB_Device_ConfigurationNumber  = 0;
    3122:	10 92 fb 03 	sts	0x03FB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3126:	10 92 fd 03 	sts	0x03FD, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    312a:	10 92 fc 03 	sts	0x03FC, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    312e:	80 ee       	ldi	r24, 0xE0	; 224
    3130:	e8 2e       	mov	r14, r24
    3132:	f1 2c       	mov	r15, r1
    3134:	f7 01       	movw	r30, r14
    3136:	80 81       	ld	r24, Z
    3138:	8b 7f       	andi	r24, 0xFB	; 251
    313a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    313c:	f8 01       	movw	r30, r16
    313e:	80 81       	ld	r24, Z
    3140:	81 60       	ori	r24, 0x01	; 1
    3142:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	42 e0       	ldi	r20, 0x02	; 2
    314a:	0f df       	rcall	.-482    	; 0x2f6a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    314c:	e1 ee       	ldi	r30, 0xE1	; 225
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8e 7f       	andi	r24, 0xFE	; 254
    3154:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3156:	e2 ee       	ldi	r30, 0xE2	; 226
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	81 60       	ori	r24, 0x01	; 1
    315e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3160:	80 81       	ld	r24, Z
    3162:	88 60       	ori	r24, 0x08	; 8
    3164:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3166:	f7 01       	movw	r30, r14
    3168:	80 81       	ld	r24, Z
    316a:	8e 7f       	andi	r24, 0xFE	; 254
    316c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    316e:	f8 01       	movw	r30, r16
    3170:	80 81       	ld	r24, Z
    3172:	80 61       	ori	r24, 0x10	; 16
    3174:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	08 95       	ret

00003180 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3180:	e8 ed       	ldi	r30, 0xD8	; 216
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	8f 7e       	andi	r24, 0xEF	; 239
    3188:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    318a:	e7 ed       	ldi	r30, 0xD7	; 215
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	81 60       	ori	r24, 0x01	; 1
    3192:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    3194:	84 e0       	ldi	r24, 0x04	; 4
    3196:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	80 93 fe 03 	sts	0x03FE, r24

	USB_ResetInterface();
}
    319e:	ac cf       	rjmp	.-168    	; 0x30f8 <USB_ResetInterface>

000031a0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    31a0:	e8 ed       	ldi	r30, 0xD8	; 216
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	8e 7f       	andi	r24, 0xFE	; 254
    31a8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    31aa:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    31ae:	08 95       	ret

000031b0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    31b0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    31b4:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    31b8:	08 95       	ret

000031ba <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    31ba:	1f 92       	push	r1
    31bc:	0f 92       	push	r0
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	0f 92       	push	r0
    31c2:	11 24       	eor	r1, r1
    31c4:	1f 93       	push	r17
    31c6:	2f 93       	push	r18
    31c8:	3f 93       	push	r19
    31ca:	4f 93       	push	r20
    31cc:	5f 93       	push	r21
    31ce:	6f 93       	push	r22
    31d0:	7f 93       	push	r23
    31d2:	8f 93       	push	r24
    31d4:	9f 93       	push	r25
    31d6:	af 93       	push	r26
    31d8:	bf 93       	push	r27
    31da:	ef 93       	push	r30
    31dc:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    31de:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    31e2:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    31e6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    31ea:	80 91 f0 00 	lds	r24, 0x00F0
    31ee:	87 7f       	andi	r24, 0xF7	; 247
    31f0:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    31f4:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    31f6:	e9 d0       	rcall	.+466    	; 0x33ca <USB_Device_ProcessControlRequest>
    31f8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    31fc:	80 91 f0 00 	lds	r24, 0x00F0
    3200:	88 60       	ori	r24, 0x08	; 8
    3202:	80 93 f0 00 	sts	0x00F0, r24
    3206:	1f 70       	andi	r17, 0x0F	; 15
    3208:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    320c:	ff 91       	pop	r31
    320e:	ef 91       	pop	r30
    3210:	bf 91       	pop	r27
    3212:	af 91       	pop	r26
    3214:	9f 91       	pop	r25
    3216:	8f 91       	pop	r24
    3218:	7f 91       	pop	r23
    321a:	6f 91       	pop	r22
    321c:	5f 91       	pop	r21
    321e:	4f 91       	pop	r20
    3220:	3f 91       	pop	r19
    3222:	2f 91       	pop	r18
    3224:	1f 91       	pop	r17
    3226:	0f 90       	pop	r0
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	0f 90       	pop	r0
    322c:	1f 90       	pop	r1
    322e:	18 95       	reti

00003230 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3230:	1f 92       	push	r1
    3232:	0f 92       	push	r0
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	0f 92       	push	r0
    3238:	11 24       	eor	r1, r1
    323a:	2f 93       	push	r18
    323c:	3f 93       	push	r19
    323e:	4f 93       	push	r20
    3240:	5f 93       	push	r21
    3242:	6f 93       	push	r22
    3244:	7f 93       	push	r23
    3246:	8f 93       	push	r24
    3248:	9f 93       	push	r25
    324a:	af 93       	push	r26
    324c:	bf 93       	push	r27
    324e:	ef 93       	push	r30
    3250:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3252:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3256:	82 ff       	sbrs	r24, 2
    3258:	0a c0       	rjmp	.+20     	; 0x326e <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    325a:	80 91 e2 00 	lds	r24, 0x00E2
    325e:	82 ff       	sbrs	r24, 2
    3260:	06 c0       	rjmp	.+12     	; 0x326e <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3262:	80 91 e1 00 	lds	r24, 0x00E1
    3266:	8b 7f       	andi	r24, 0xFB	; 251
    3268:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    326c:	19 d2       	rcall	.+1074   	; 0x36a0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    326e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3272:	80 ff       	sbrs	r24, 0
    3274:	1f c0       	rjmp	.+62     	; 0x32b4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3276:	80 91 d8 00 	lds	r24, 0x00D8
    327a:	80 ff       	sbrs	r24, 0
    327c:	1b c0       	rjmp	.+54     	; 0x32b4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    327e:	80 91 da 00 	lds	r24, 0x00DA
    3282:	8e 7f       	andi	r24, 0xFE	; 254
    3284:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3288:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    328c:	80 ff       	sbrs	r24, 0
    328e:	0d c0       	rjmp	.+26     	; 0x32aa <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3290:	80 e1       	ldi	r24, 0x10	; 16
    3292:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3294:	82 e1       	ldi	r24, 0x12	; 18
    3296:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3298:	09 b4       	in	r0, 0x29	; 41
    329a:	00 fe       	sbrs	r0, 0
    329c:	fd cf       	rjmp	.-6      	; 0x3298 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	80 93 ff 03 	sts	0x03FF, r24
			EVENT_USB_Device_Connect();
    32a4:	0e 94 c7 00 	call	0x18e	; 0x18e <EVENT_USB_Device_Connect>
    32a8:	05 c0       	rjmp	.+10     	; 0x32b4 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    32aa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    32ac:	10 92 ff 03 	sts	0x03FF, r1
			EVENT_USB_Device_Disconnect();
    32b0:	0e 94 c9 00 	call	0x192	; 0x192 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    32b4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    32b8:	80 ff       	sbrs	r24, 0
    32ba:	18 c0       	rjmp	.+48     	; 0x32ec <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    32bc:	80 91 e2 00 	lds	r24, 0x00E2
    32c0:	80 ff       	sbrs	r24, 0
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    32c4:	80 91 e2 00 	lds	r24, 0x00E2
    32c8:	8e 7f       	andi	r24, 0xFE	; 254
    32ca:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    32ce:	80 91 e2 00 	lds	r24, 0x00E2
    32d2:	80 61       	ori	r24, 0x10	; 16
    32d4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    32d8:	80 91 d8 00 	lds	r24, 0x00D8
    32dc:	80 62       	ori	r24, 0x20	; 32
    32de:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    32e2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    32e4:	85 e0       	ldi	r24, 0x05	; 5
    32e6:	80 93 ff 03 	sts	0x03FF, r24
		EVENT_USB_Device_Suspend();
    32ea:	da d1       	rcall	.+948    	; 0x36a0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    32ec:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    32f0:	84 ff       	sbrs	r24, 4
    32f2:	2f c0       	rjmp	.+94     	; 0x3352 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    32f4:	80 91 e2 00 	lds	r24, 0x00E2
    32f8:	84 ff       	sbrs	r24, 4
    32fa:	2b c0       	rjmp	.+86     	; 0x3352 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    32fc:	80 e1       	ldi	r24, 0x10	; 16
    32fe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3300:	82 e1       	ldi	r24, 0x12	; 18
    3302:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3304:	09 b4       	in	r0, 0x29	; 41
    3306:	00 fe       	sbrs	r0, 0
    3308:	fd cf       	rjmp	.-6      	; 0x3304 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    330a:	80 91 d8 00 	lds	r24, 0x00D8
    330e:	8f 7d       	andi	r24, 0xDF	; 223
    3310:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3314:	80 91 e1 00 	lds	r24, 0x00E1
    3318:	8f 7e       	andi	r24, 0xEF	; 239
    331a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    331e:	80 91 e2 00 	lds	r24, 0x00E2
    3322:	8f 7e       	andi	r24, 0xEF	; 239
    3324:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3328:	80 91 e2 00 	lds	r24, 0x00E2
    332c:	81 60       	ori	r24, 0x01	; 1
    332e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3332:	80 91 fb 03 	lds	r24, 0x03FB
    3336:	88 23       	and	r24, r24
    3338:	11 f0       	breq	.+4      	; 0x333e <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    333a:	84 e0       	ldi	r24, 0x04	; 4
    333c:	07 c0       	rjmp	.+14     	; 0x334c <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    333e:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3342:	87 fd       	sbrc	r24, 7
    3344:	02 c0       	rjmp	.+4      	; 0x334a <__vector_10+0x11a>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	01 c0       	rjmp	.+2      	; 0x334c <__vector_10+0x11c>
    334a:	83 e0       	ldi	r24, 0x03	; 3
    334c:	80 93 ff 03 	sts	0x03FF, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3350:	a7 d1       	rcall	.+846    	; 0x36a0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3352:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3356:	83 ff       	sbrs	r24, 3
    3358:	27 c0       	rjmp	.+78     	; 0x33a8 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    335a:	80 91 e2 00 	lds	r24, 0x00E2
    335e:	83 ff       	sbrs	r24, 3
    3360:	23 c0       	rjmp	.+70     	; 0x33a8 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3362:	80 91 e1 00 	lds	r24, 0x00E1
    3366:	87 7f       	andi	r24, 0xF7	; 247
    3368:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    336c:	82 e0       	ldi	r24, 0x02	; 2
    336e:	80 93 ff 03 	sts	0x03FF, r24
		USB_Device_ConfigurationNumber = 0;
    3372:	10 92 fb 03 	sts	0x03FB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3376:	80 91 e1 00 	lds	r24, 0x00E1
    337a:	8e 7f       	andi	r24, 0xFE	; 254
    337c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3380:	80 91 e2 00 	lds	r24, 0x00E2
    3384:	8e 7f       	andi	r24, 0xFE	; 254
    3386:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    338a:	80 91 e2 00 	lds	r24, 0x00E2
    338e:	80 61       	ori	r24, 0x10	; 16
    3390:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	42 e0       	ldi	r20, 0x02	; 2
    339a:	e7 dd       	rcall	.-1074   	; 0x2f6a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    339c:	80 91 f0 00 	lds	r24, 0x00F0
    33a0:	88 60       	ori	r24, 0x08	; 8
    33a2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    33a6:	7c d1       	rcall	.+760    	; 0x36a0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    33a8:	ff 91       	pop	r31
    33aa:	ef 91       	pop	r30
    33ac:	bf 91       	pop	r27
    33ae:	af 91       	pop	r26
    33b0:	9f 91       	pop	r25
    33b2:	8f 91       	pop	r24
    33b4:	7f 91       	pop	r23
    33b6:	6f 91       	pop	r22
    33b8:	5f 91       	pop	r21
    33ba:	4f 91       	pop	r20
    33bc:	3f 91       	pop	r19
    33be:	2f 91       	pop	r18
    33c0:	0f 90       	pop	r0
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	0f 90       	pop	r0
    33c6:	1f 90       	pop	r1
    33c8:	18 95       	reti

000033ca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    33ca:	1f 93       	push	r17
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	ac 97       	sbiw	r28, 0x2c	; 44
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	e0 e0       	ldi	r30, 0x00	; 0
    33e2:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    33e4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    33e8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    33ea:	24 e0       	ldi	r18, 0x04	; 4
    33ec:	e8 30       	cpi	r30, 0x08	; 8
    33ee:	f2 07       	cpc	r31, r18
    33f0:	c9 f7       	brne	.-14     	; 0x33e4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    33f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    33f6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    33fa:	83 ff       	sbrs	r24, 3
    33fc:	39 c1       	rjmp	.+626    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    33fe:	80 91 00 04 	lds	r24, 0x0400

		switch (USB_ControlRequest.bRequest)
    3402:	30 91 01 04 	lds	r19, 0x0401
    3406:	35 30       	cpi	r19, 0x05	; 5
    3408:	09 f4       	brne	.+2      	; 0x340c <USB_Device_ProcessControlRequest+0x42>
    340a:	87 c0       	rjmp	.+270    	; 0x351a <USB_Device_ProcessControlRequest+0x150>
    340c:	36 30       	cpi	r19, 0x06	; 6
    340e:	40 f4       	brcc	.+16     	; 0x3420 <USB_Device_ProcessControlRequest+0x56>
    3410:	31 30       	cpi	r19, 0x01	; 1
    3412:	c9 f1       	breq	.+114    	; 0x3486 <USB_Device_ProcessControlRequest+0xbc>
    3414:	31 30       	cpi	r19, 0x01	; 1
    3416:	70 f0       	brcs	.+28     	; 0x3434 <USB_Device_ProcessControlRequest+0x6a>
    3418:	33 30       	cpi	r19, 0x03	; 3
    341a:	09 f0       	breq	.+2      	; 0x341e <USB_Device_ProcessControlRequest+0x54>
    341c:	29 c1       	rjmp	.+594    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
    341e:	33 c0       	rjmp	.+102    	; 0x3486 <USB_Device_ProcessControlRequest+0xbc>
    3420:	38 30       	cpi	r19, 0x08	; 8
    3422:	09 f4       	brne	.+2      	; 0x3426 <USB_Device_ProcessControlRequest+0x5c>
    3424:	f6 c0       	rjmp	.+492    	; 0x3612 <USB_Device_ProcessControlRequest+0x248>
    3426:	39 30       	cpi	r19, 0x09	; 9
    3428:	09 f4       	brne	.+2      	; 0x342c <USB_Device_ProcessControlRequest+0x62>
    342a:	05 c1       	rjmp	.+522    	; 0x3636 <USB_Device_ProcessControlRequest+0x26c>
    342c:	36 30       	cpi	r19, 0x06	; 6
    342e:	09 f0       	breq	.+2      	; 0x3432 <USB_Device_ProcessControlRequest+0x68>
    3430:	1f c1       	rjmp	.+574    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
    3432:	96 c0       	rjmp	.+300    	; 0x3560 <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3434:	80 38       	cpi	r24, 0x80	; 128
    3436:	21 f0       	breq	.+8      	; 0x3440 <USB_Device_ProcessControlRequest+0x76>
    3438:	82 38       	cpi	r24, 0x82	; 130
    343a:	09 f0       	breq	.+2      	; 0x343e <USB_Device_ProcessControlRequest+0x74>
    343c:	19 c1       	rjmp	.+562    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
    343e:	08 c0       	rjmp	.+16     	; 0x3450 <USB_Device_ProcessControlRequest+0x86>
    3440:	90 91 fc 03 	lds	r25, 0x03FC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3444:	80 91 fd 03 	lds	r24, 0x03FD
    3448:	88 23       	and	r24, r24
    344a:	99 f0       	breq	.+38     	; 0x3472 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    344c:	92 60       	ori	r25, 0x02	; 2
    344e:	11 c0       	rjmp	.+34     	; 0x3472 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3450:	80 91 04 04 	lds	r24, 0x0404
    3454:	8f 70       	andi	r24, 0x0F	; 15
    3456:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    345a:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	25 e0       	ldi	r18, 0x05	; 5
    3462:	96 95       	lsr	r25
    3464:	87 95       	ror	r24
    3466:	2a 95       	dec	r18
    3468:	e1 f7       	brne	.-8      	; 0x3462 <USB_Device_ProcessControlRequest+0x98>
    346a:	98 2f       	mov	r25, r24
    346c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    346e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3472:	80 91 e8 00 	lds	r24, 0x00E8
    3476:	87 7f       	andi	r24, 0xF7	; 247
    3478:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    347c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    3480:	10 92 f1 00 	sts	0x00F1, r1
    3484:	d1 c0       	rjmp	.+418    	; 0x3628 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3486:	88 23       	and	r24, r24
    3488:	19 f0       	breq	.+6      	; 0x3490 <USB_Device_ProcessControlRequest+0xc6>
    348a:	82 30       	cpi	r24, 0x02	; 2
    348c:	09 f0       	breq	.+2      	; 0x3490 <USB_Device_ProcessControlRequest+0xc6>
    348e:	f0 c0       	rjmp	.+480    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	8f 71       	andi	r24, 0x1F	; 31
    3494:	90 70       	andi	r25, 0x00	; 0
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	21 f0       	breq	.+8      	; 0x34a2 <USB_Device_ProcessControlRequest+0xd8>
    349a:	02 97       	sbiw	r24, 0x02	; 2
    349c:	09 f0       	breq	.+2      	; 0x34a0 <USB_Device_ProcessControlRequest+0xd6>
    349e:	e8 c0       	rjmp	.+464    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
    34a0:	0c c0       	rjmp	.+24     	; 0x34ba <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    34a2:	80 91 02 04 	lds	r24, 0x0402
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	09 f0       	breq	.+2      	; 0x34ac <USB_Device_ProcessControlRequest+0xe2>
    34aa:	e2 c0       	rjmp	.+452    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    34ac:	10 92 fd 03 	sts	0x03FD, r1
    34b0:	33 30       	cpi	r19, 0x03	; 3
    34b2:	69 f5       	brne	.+90     	; 0x350e <USB_Device_ProcessControlRequest+0x144>
    34b4:	80 93 fd 03 	sts	0x03FD, r24
    34b8:	2a c0       	rjmp	.+84     	; 0x350e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    34ba:	80 91 02 04 	lds	r24, 0x0402
    34be:	88 23       	and	r24, r24
    34c0:	31 f5       	brne	.+76     	; 0x350e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    34c2:	20 91 04 04 	lds	r18, 0x0404
    34c6:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    34c8:	09 f4       	brne	.+2      	; 0x34cc <USB_Device_ProcessControlRequest+0x102>
    34ca:	d2 c0       	rjmp	.+420    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34cc:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    34d0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    34d4:	80 ff       	sbrs	r24, 0
    34d6:	1b c0       	rjmp	.+54     	; 0x350e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    34d8:	33 30       	cpi	r19, 0x03	; 3
    34da:	21 f4       	brne	.+8      	; 0x34e4 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    34dc:	80 91 eb 00 	lds	r24, 0x00EB
    34e0:	80 62       	ori	r24, 0x20	; 32
    34e2:	13 c0       	rjmp	.+38     	; 0x350a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    34e4:	80 91 eb 00 	lds	r24, 0x00EB
    34e8:	80 61       	ori	r24, 0x10	; 16
    34ea:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <USB_Device_ProcessControlRequest+0x12e>
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	2a 95       	dec	r18
    34fa:	e2 f7       	brpl	.-8      	; 0x34f4 <USB_Device_ProcessControlRequest+0x12a>
    34fc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3500:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3504:	80 91 eb 00 	lds	r24, 0x00EB
    3508:	88 60       	ori	r24, 0x08	; 8
    350a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    350e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3512:	80 91 e8 00 	lds	r24, 0x00E8
    3516:	87 7f       	andi	r24, 0xF7	; 247
    3518:	8a c0       	rjmp	.+276    	; 0x362e <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    351a:	88 23       	and	r24, r24
    351c:	09 f0       	breq	.+2      	; 0x3520 <USB_Device_ProcessControlRequest+0x156>
    351e:	a8 c0       	rjmp	.+336    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3520:	10 91 02 04 	lds	r17, 0x0402
    3524:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3526:	80 91 e3 00 	lds	r24, 0x00E3
    352a:	80 78       	andi	r24, 0x80	; 128
    352c:	81 2b       	or	r24, r17
    352e:	80 93 e3 00 	sts	0x00E3, r24
    3532:	80 91 e8 00 	lds	r24, 0x00E8
    3536:	87 7f       	andi	r24, 0xF7	; 247
    3538:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    353c:	8a dd       	rcall	.-1260   	; 0x3052 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    353e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    3542:	80 ff       	sbrs	r24, 0
    3544:	fc cf       	rjmp	.-8      	; 0x353e <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    3546:	80 91 e3 00 	lds	r24, 0x00E3
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3550:	11 23       	and	r17, r17
    3552:	11 f4       	brne	.+4      	; 0x3558 <USB_Device_ProcessControlRequest+0x18e>
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	01 c0       	rjmp	.+2      	; 0x355a <USB_Device_ProcessControlRequest+0x190>
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	80 93 ff 03 	sts	0x03FF, r24
    355e:	88 c0       	rjmp	.+272    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3560:	80 58       	subi	r24, 0x80	; 128
    3562:	82 30       	cpi	r24, 0x02	; 2
    3564:	08 f0       	brcs	.+2      	; 0x3568 <USB_Device_ProcessControlRequest+0x19e>
    3566:	84 c0       	rjmp	.+264    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3568:	80 91 02 04 	lds	r24, 0x0402
    356c:	90 91 03 04 	lds	r25, 0x0403
    3570:	23 e0       	ldi	r18, 0x03	; 3
    3572:	8c 3d       	cpi	r24, 0xDC	; 220
    3574:	92 07       	cpc	r25, r18
    3576:	09 f0       	breq	.+2      	; 0x357a <USB_Device_ProcessControlRequest+0x1b0>
    3578:	33 c0       	rjmp	.+102    	; 0x35e0 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    357e:	8a e2       	ldi	r24, 0x2A	; 42
    3580:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3582:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3584:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3586:	de 01       	movw	r26, r28
    3588:	15 96       	adiw	r26, 0x05	; 5
    358a:	6e e0       	ldi	r22, 0x0E	; 14
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3590:	11 e2       	ldi	r17, 0x21	; 33
    3592:	e6 2f       	mov	r30, r22
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	10 93 57 00 	sts	0x0057, r17
    359a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    359c:	40 ff       	sbrs	r20, 0
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
    35a0:	82 95       	swap	r24
    35a2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    35a4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    35a6:	8f 70       	andi	r24, 0x0F	; 15
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    35ac:	8a 30       	cpi	r24, 0x0A	; 10
    35ae:	18 f0       	brcs	.+6      	; 0x35b6 <USB_Device_ProcessControlRequest+0x1ec>
    35b0:	c9 01       	movw	r24, r18
    35b2:	c7 96       	adiw	r24, 0x37	; 55
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <USB_Device_ProcessControlRequest+0x1f0>
    35b6:	c9 01       	movw	r24, r18
    35b8:	c0 96       	adiw	r24, 0x30	; 48
    35ba:	8d 93       	st	X+, r24
    35bc:	9d 93       	st	X+, r25
    35be:	4f 5f       	subi	r20, 0xFF	; 255
    35c0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    35c2:	44 31       	cpi	r20, 0x14	; 20
    35c4:	51 05       	cpc	r21, r1
    35c6:	29 f7       	brne	.-54     	; 0x3592 <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    35c8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35ca:	80 91 e8 00 	lds	r24, 0x00E8
    35ce:	87 7f       	andi	r24, 0xF7	; 247
    35d0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    35d4:	ce 01       	movw	r24, r28
    35d6:	03 96       	adiw	r24, 0x03	; 3
    35d8:	6a e2       	ldi	r22, 0x2A	; 42
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	c3 da       	rcall	.-2682   	; 0x2b64 <Endpoint_Write_Control_Stream_LE>
    35de:	13 c0       	rjmp	.+38     	; 0x3606 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    35e0:	60 91 04 04 	lds	r22, 0x0404
    35e4:	ae 01       	movw	r20, r28
    35e6:	4f 5f       	subi	r20, 0xFF	; 255
    35e8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ea:	0e 94 a8 01 	call	0x350	; 0x350 <CALLBACK_USB_GetDescriptor>
    35ee:	bc 01       	movw	r22, r24
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <USB_Device_ProcessControlRequest+0x22c>
    35f4:	3d c0       	rjmp	.+122    	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
    35f6:	80 91 e8 00 	lds	r24, 0x00E8
    35fa:	87 7f       	andi	r24, 0xF7	; 247
    35fc:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	15 db       	rcall	.-2518   	; 0x2c30 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3606:	80 91 e8 00 	lds	r24, 0x00E8
    360a:	8b 77       	andi	r24, 0x7B	; 123
    360c:	80 93 e8 00 	sts	0x00E8, r24
    3610:	2f c0       	rjmp	.+94     	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3612:	80 38       	cpi	r24, 0x80	; 128
    3614:	69 f5       	brne	.+90     	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3616:	80 91 e8 00 	lds	r24, 0x00E8
    361a:	87 7f       	andi	r24, 0xF7	; 247
    361c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3620:	80 91 fb 03 	lds	r24, 0x03FB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3624:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3628:	80 91 e8 00 	lds	r24, 0x00E8
    362c:	8e 77       	andi	r24, 0x7E	; 126
    362e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3632:	0f dd       	rcall	.-1506   	; 0x3052 <Endpoint_ClearStatusStage>
    3634:	1d c0       	rjmp	.+58     	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3636:	88 23       	and	r24, r24
    3638:	d9 f4       	brne	.+54     	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    363a:	90 91 02 04 	lds	r25, 0x0402
    363e:	92 30       	cpi	r25, 0x02	; 2
    3640:	b8 f4       	brcc	.+46     	; 0x3670 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3642:	80 91 e8 00 	lds	r24, 0x00E8
    3646:	87 7f       	andi	r24, 0xF7	; 247
    3648:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    364c:	90 93 fb 03 	sts	0x03FB, r25

	Endpoint_ClearStatusStage();
    3650:	00 dd       	rcall	.-1536   	; 0x3052 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3652:	80 91 fb 03 	lds	r24, 0x03FB
    3656:	88 23       	and	r24, r24
    3658:	31 f4       	brne	.+12     	; 0x3666 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    365a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    365e:	87 fd       	sbrc	r24, 7
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <USB_Device_ProcessControlRequest+0x29c>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <USB_Device_ProcessControlRequest+0x29e>
    3666:	84 e0       	ldi	r24, 0x04	; 4
    3668:	80 93 ff 03 	sts	0x03FF, r24

	EVENT_USB_Device_ConfigurationChanged();
    366c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3670:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3674:	83 ff       	sbrs	r24, 3
    3676:	0a c0       	rjmp	.+20     	; 0x368c <USB_Device_ProcessControlRequest+0x2c2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3678:	80 91 e8 00 	lds	r24, 0x00E8
    367c:	87 7f       	andi	r24, 0xF7	; 247
    367e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3682:	80 91 eb 00 	lds	r24, 0x00EB
    3686:	80 62       	ori	r24, 0x20	; 32
    3688:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    368c:	ac 96       	adiw	r28, 0x2c	; 44
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	1f 91       	pop	r17
    369e:	08 95       	ret

000036a0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    36a0:	08 95       	ret

000036a2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    36a2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    36a4:	80 91 ff 03 	lds	r24, 0x03FF
    36a8:	88 23       	and	r24, r24
    36aa:	71 f0       	breq	.+28     	; 0x36c8 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    36ac:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    36b0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    36b4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    36b8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    36bc:	83 ff       	sbrs	r24, 3
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    36c0:	84 de       	rcall	.-760    	; 0x33ca <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    36c2:	1f 70       	andi	r17, 0x0F	; 15
    36c4:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    36c8:	1f 91       	pop	r17
    36ca:	08 95       	ret

000036cc <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    36cc:	cf 92       	push	r12
    36ce:	df 92       	push	r13
    36d0:	ef 92       	push	r14
    36d2:	ff 92       	push	r15
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	00 d0       	rcall	.+0      	; 0x36de <MS_Device_USBTask+0x12>
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    36e4:	80 91 ff 03 	lds	r24, 0x03FF
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	09 f0       	breq	.+2      	; 0x36ee <MS_Device_USBTask+0x22>
    36ec:	10 c1       	rjmp	.+544    	; 0x390e <MS_Device_USBTask+0x242>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    36ee:	f8 01       	movw	r30, r16
    36f0:	96 81       	ldd	r25, Z+6	; 0x06
    36f2:	9f 70       	andi	r25, 0x0F	; 15
    36f4:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    36f8:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    36fc:	82 ff       	sbrs	r24, 2
    36fe:	cd c0       	rjmp	.+410    	; 0x389a <MS_Device_USBTask+0x1ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3700:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    3704:	1a 82       	std	Y+2, r1	; 0x02
    3706:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    3708:	2c e0       	ldi	r18, 0x0C	; 12
    370a:	e2 2e       	mov	r14, r18
    370c:	f1 2c       	mov	r15, r1
    370e:	e0 0e       	add	r14, r16
    3710:	f1 1e       	adc	r15, r17
    3712:	6e 01       	movw	r12, r28
    3714:	08 94       	sec
    3716:	c1 1c       	adc	r12, r1
    3718:	d1 1c       	adc	r13, r1
    371a:	05 c0       	rjmp	.+10     	; 0x3726 <MS_Device_USBTask+0x5a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    371c:	f8 01       	movw	r30, r16
    371e:	80 ad       	ldd	r24, Z+56	; 0x38
    3720:	88 23       	and	r24, r24
    3722:	09 f0       	breq	.+2      	; 0x3726 <MS_Device_USBTask+0x5a>
    3724:	ba c0       	rjmp	.+372    	; 0x389a <MS_Device_USBTask+0x1ce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    3726:	c7 01       	movw	r24, r14
    3728:	6f e0       	ldi	r22, 0x0F	; 15
    372a:	70 e0       	ldi	r23, 0x00	; 0
    372c:	a6 01       	movw	r20, r12
    372e:	e8 da       	rcall	.-2608   	; 0x2d00 <Endpoint_Read_Stream_LE>
    3730:	85 30       	cpi	r24, 0x05	; 5
    3732:	a1 f3       	breq	.-24     	; 0x371c <MS_Device_USBTask+0x50>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    3734:	f8 01       	movw	r30, r16
    3736:	84 85       	ldd	r24, Z+12	; 0x0c
    3738:	95 85       	ldd	r25, Z+13	; 0x0d
    373a:	a6 85       	ldd	r26, Z+14	; 0x0e
    373c:	b7 85       	ldd	r27, Z+15	; 0x0f
    373e:	85 55       	subi	r24, 0x55	; 85
    3740:	93 45       	sbci	r25, 0x53	; 83
    3742:	a2 44       	sbci	r26, 0x42	; 66
    3744:	b3 44       	sbci	r27, 0x43	; 67
    3746:	81 f4       	brne	.+32     	; 0x3768 <MS_Device_USBTask+0x9c>
    3748:	f8 01       	movw	r30, r16
    374a:	91 8d       	ldd	r25, Z+25	; 0x19
    374c:	83 85       	ldd	r24, Z+11	; 0x0b
    374e:	98 17       	cp	r25, r24
    3750:	58 f4       	brcc	.+22     	; 0x3768 <MS_Device_USBTask+0x9c>
    3752:	80 8d       	ldd	r24, Z+24	; 0x18
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	8f 71       	andi	r24, 0x1F	; 31
    3758:	90 70       	andi	r25, 0x00	; 0
    375a:	89 2b       	or	r24, r25
    375c:	29 f4       	brne	.+10     	; 0x3768 <MS_Device_USBTask+0x9c>
    375e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3760:	88 23       	and	r24, r24
    3762:	11 f0       	breq	.+4      	; 0x3768 <MS_Device_USBTask+0x9c>
    3764:	81 31       	cpi	r24, 0x11	; 17
    3766:	80 f0       	brcs	.+32     	; 0x3788 <MS_Device_USBTask+0xbc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3768:	80 91 eb 00 	lds	r24, 0x00EB
    376c:	80 62       	ori	r24, 0x20	; 32
    376e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3772:	f8 01       	movw	r30, r16
    3774:	81 81       	ldd	r24, Z+1	; 0x01
    3776:	8f 70       	andi	r24, 0x0F	; 15
    3778:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    377c:	80 91 eb 00 	lds	r24, 0x00EB
    3780:	80 62       	ori	r24, 0x20	; 32
    3782:	80 93 eb 00 	sts	0x00EB, r24
    3786:	89 c0       	rjmp	.+274    	; 0x389a <MS_Device_USBTask+0x1ce>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    3788:	1a 82       	std	Y+2, r1	; 0x02
    378a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    378c:	9b e1       	ldi	r25, 0x1B	; 27
    378e:	e9 2e       	mov	r14, r25
    3790:	f1 2c       	mov	r15, r1
    3792:	e0 0e       	add	r14, r16
    3794:	f1 1e       	adc	r15, r17
    3796:	6e 01       	movw	r12, r28
    3798:	08 94       	sec
    379a:	c1 1c       	adc	r12, r1
    379c:	d1 1c       	adc	r13, r1
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <MS_Device_USBTask+0xde>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 ad       	ldd	r24, Z+56	; 0x38
    37a4:	88 23       	and	r24, r24
    37a6:	09 f0       	breq	.+2      	; 0x37aa <MS_Device_USBTask+0xde>
    37a8:	78 c0       	rjmp	.+240    	; 0x389a <MS_Device_USBTask+0x1ce>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    37aa:	f8 01       	movw	r30, r16
    37ac:	62 8d       	ldd	r22, Z+26	; 0x1a
    37ae:	c7 01       	movw	r24, r14
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	a6 01       	movw	r20, r12
    37b4:	a5 da       	rcall	.-2742   	; 0x2d00 <Endpoint_Read_Stream_LE>
    37b6:	85 30       	cpi	r24, 0x05	; 5
    37b8:	99 f3       	breq	.-26     	; 0x37a0 <MS_Device_USBTask+0xd4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    37ba:	80 91 e8 00 	lds	r24, 0x00E8
    37be:	8b 77       	andi	r24, 0x7B	; 123
    37c0:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    37c4:	f8 01       	movw	r30, r16
    37c6:	80 8d       	ldd	r24, Z+24	; 0x18
    37c8:	87 ff       	sbrs	r24, 7
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <MS_Device_USBTask+0x108>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    37cc:	81 81       	ldd	r24, Z+1	; 0x01
    37ce:	8f 70       	andi	r24, 0x0F	; 15
    37d0:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    37d4:	c8 01       	movw	r24, r16
    37d6:	0e 94 cb 00 	call	0x196	; 0x196 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	98 27       	eor	r25, r24
    37de:	f8 01       	movw	r30, r16
    37e0:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    37e2:	25 e5       	ldi	r18, 0x55	; 85
    37e4:	33 e5       	ldi	r19, 0x53	; 83
    37e6:	42 e4       	ldi	r20, 0x42	; 66
    37e8:	53 e5       	ldi	r21, 0x53	; 83
    37ea:	23 a7       	std	Z+43, r18	; 0x2b
    37ec:	34 a7       	std	Z+44, r19	; 0x2c
    37ee:	45 a7       	std	Z+45, r20	; 0x2d
    37f0:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    37f2:	20 89       	ldd	r18, Z+16	; 0x10
    37f4:	31 89       	ldd	r19, Z+17	; 0x11
    37f6:	42 89       	ldd	r20, Z+18	; 0x12
    37f8:	53 89       	ldd	r21, Z+19	; 0x13
    37fa:	27 a7       	std	Z+47, r18	; 0x2f
    37fc:	30 ab       	std	Z+48, r19	; 0x30
    37fe:	41 ab       	std	Z+49, r20	; 0x31
    3800:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    3802:	24 89       	ldd	r18, Z+20	; 0x14
    3804:	35 89       	ldd	r19, Z+21	; 0x15
    3806:	46 89       	ldd	r20, Z+22	; 0x16
    3808:	57 89       	ldd	r21, Z+23	; 0x17
    380a:	23 ab       	std	Z+51, r18	; 0x33
    380c:	34 ab       	std	Z+52, r19	; 0x34
    380e:	45 ab       	std	Z+53, r20	; 0x35
    3810:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    3812:	88 23       	and	r24, r24
    3814:	51 f4       	brne	.+20     	; 0x382a <MS_Device_USBTask+0x15e>
    3816:	21 15       	cp	r18, r1
    3818:	31 05       	cpc	r19, r1
    381a:	41 05       	cpc	r20, r1
    381c:	51 05       	cpc	r21, r1
    381e:	29 f0       	breq	.+10     	; 0x382a <MS_Device_USBTask+0x15e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3820:	80 91 eb 00 	lds	r24, 0x00EB
    3824:	80 62       	ori	r24, 0x20	; 32
    3826:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    382a:	f8 01       	movw	r30, r16
    382c:	86 81       	ldd	r24, Z+6	; 0x06
    382e:	8f 70       	andi	r24, 0x0F	; 15
    3830:	80 93 e9 00 	sts	0x00E9, r24
    3834:	04 c0       	rjmp	.+8      	; 0x383e <MS_Device_USBTask+0x172>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    3836:	f8 01       	movw	r30, r16
    3838:	80 ad       	ldd	r24, Z+56	; 0x38
    383a:	88 23       	and	r24, r24
    383c:	71 f5       	brne	.+92     	; 0x389a <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    383e:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    3842:	85 fd       	sbrc	r24, 5
    3844:	f8 cf       	rjmp	.-16     	; 0x3836 <MS_Device_USBTask+0x16a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3846:	f8 01       	movw	r30, r16
    3848:	81 81       	ldd	r24, Z+1	; 0x01
    384a:	8f 70       	andi	r24, 0x0F	; 15
    384c:	80 93 e9 00 	sts	0x00E9, r24
    3850:	04 c0       	rjmp	.+8      	; 0x385a <MS_Device_USBTask+0x18e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    3852:	f8 01       	movw	r30, r16
    3854:	80 ad       	ldd	r24, Z+56	; 0x38
    3856:	88 23       	and	r24, r24
    3858:	01 f5       	brne	.+64     	; 0x389a <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    385a:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    385e:	85 fd       	sbrc	r24, 5
    3860:	f8 cf       	rjmp	.-16     	; 0x3852 <MS_Device_USBTask+0x186>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    3862:	1a 82       	std	Y+2, r1	; 0x02
    3864:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    3866:	8b e2       	ldi	r24, 0x2B	; 43
    3868:	e8 2e       	mov	r14, r24
    386a:	f1 2c       	mov	r15, r1
    386c:	e0 0e       	add	r14, r16
    386e:	f1 1e       	adc	r15, r17
    3870:	6e 01       	movw	r12, r28
    3872:	08 94       	sec
    3874:	c1 1c       	adc	r12, r1
    3876:	d1 1c       	adc	r13, r1
    3878:	04 c0       	rjmp	.+8      	; 0x3882 <MS_Device_USBTask+0x1b6>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    387a:	f8 01       	movw	r30, r16
    387c:	80 ad       	ldd	r24, Z+56	; 0x38
    387e:	88 23       	and	r24, r24
    3880:	61 f4       	brne	.+24     	; 0x389a <MS_Device_USBTask+0x1ce>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    3882:	c7 01       	movw	r24, r14
    3884:	6d e0       	ldi	r22, 0x0D	; 13
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	a6 01       	movw	r20, r12
    388a:	dc da       	rcall	.-2632   	; 0x2e44 <Endpoint_Write_Stream_LE>
    388c:	85 30       	cpi	r24, 0x05	; 5
    388e:	a9 f3       	breq	.-22     	; 0x387a <MS_Device_USBTask+0x1ae>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3890:	80 91 e8 00 	lds	r24, 0x00E8
    3894:	8e 77       	andi	r24, 0x7E	; 126
    3896:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    389a:	f8 01       	movw	r30, r16
    389c:	80 ad       	ldd	r24, Z+56	; 0x38
    389e:	88 23       	and	r24, r24
    38a0:	b1 f1       	breq	.+108    	; 0x390e <MS_Device_USBTask+0x242>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    38a2:	46 81       	ldd	r20, Z+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    38a4:	84 2f       	mov	r24, r20
    38a6:	8f 70       	andi	r24, 0x0F	; 15
    38a8:	21 e0       	ldi	r18, 0x01	; 1
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	b9 01       	movw	r22, r18
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <MS_Device_USBTask+0x1e8>
    38b0:	66 0f       	add	r22, r22
    38b2:	77 1f       	adc	r23, r23
    38b4:	8a 95       	dec	r24
    38b6:	e2 f7       	brpl	.-8      	; 0x38b0 <MS_Device_USBTask+0x1e4>
    38b8:	60 93 ea 00 	sts	0x00EA, r22
				UERST = 0;
    38bc:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    38c2:	89 2f       	mov	r24, r25
    38c4:	8f 70       	andi	r24, 0x0F	; 15
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <MS_Device_USBTask+0x200>
    38c8:	22 0f       	add	r18, r18
    38ca:	33 1f       	adc	r19, r19
    38cc:	8a 95       	dec	r24
    38ce:	e2 f7       	brpl	.-8      	; 0x38c8 <MS_Device_USBTask+0x1fc>
    38d0:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    38d4:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    38d8:	4f 70       	andi	r20, 0x0F	; 15
    38da:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    38de:	80 91 eb 00 	lds	r24, 0x00EB
    38e2:	80 61       	ori	r24, 0x10	; 16
    38e4:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    38e8:	80 91 eb 00 	lds	r24, 0x00EB
    38ec:	88 60       	ori	r24, 0x08	; 8
    38ee:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    38f2:	9f 70       	andi	r25, 0x0F	; 15
    38f4:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    38f8:	80 91 eb 00 	lds	r24, 0x00EB
    38fc:	80 61       	ori	r24, 0x10	; 16
    38fe:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3902:	80 91 eb 00 	lds	r24, 0x00EB
    3906:	88 60       	ori	r24, 0x08	; 8
    3908:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    390c:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	08 95       	ret

00003924 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    392a:	0c 96       	adiw	r24, 0x0c	; 12
    392c:	fc 01       	movw	r30, r24
    392e:	8d e2       	ldi	r24, 0x2D	; 45
    3930:	df 01       	movw	r26, r30
    3932:	1d 92       	st	X+, r1
    3934:	8a 95       	dec	r24
    3936:	e9 f7       	brne	.-6      	; 0x3932 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    393c:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	61 e0       	ldi	r22, 0x01	; 1
    3944:	4a db       	rcall	.-2412   	; 0x2fda <Endpoint_ConfigureEndpointTable>
    3946:	88 23       	and	r24, r24
    3948:	31 f0       	breq	.+12     	; 0x3956 <MS_Device_ConfigureEndpoints+0x32>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    394a:	ce 01       	movw	r24, r28
    394c:	06 96       	adiw	r24, 0x06	; 6
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	44 db       	rcall	.-2424   	; 0x2fda <Endpoint_ConfigureEndpointTable>
    3952:	81 11       	cpse	r24, r1
    3954:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	08 95       	ret

0000395c <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3962:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    3966:	83 ff       	sbrs	r24, 3
    3968:	33 c0       	rjmp	.+102    	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    396a:	88 81       	ld	r24, Y
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	20 91 04 04 	lds	r18, 0x0404
    3972:	30 91 05 04 	lds	r19, 0x0405
    3976:	28 17       	cp	r18, r24
    3978:	39 07       	cpc	r19, r25
    397a:	51 f5       	brne	.+84     	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    397c:	80 91 01 04 	lds	r24, 0x0401
    3980:	8e 3f       	cpi	r24, 0xFE	; 254
    3982:	79 f0       	breq	.+30     	; 0x39a2 <MS_Device_ProcessControlRequest+0x46>
    3984:	8f 3f       	cpi	r24, 0xFF	; 255
    3986:	21 f5       	brne	.+72     	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3988:	80 91 00 04 	lds	r24, 0x0400
    398c:	81 32       	cpi	r24, 0x21	; 33
    398e:	01 f5       	brne	.+64     	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3990:	80 91 e8 00 	lds	r24, 0x00E8
    3994:	87 7f       	andi	r24, 0xF7	; 247
    3996:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    399a:	5b db       	rcall	.-2378   	; 0x3052 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	88 af       	std	Y+56, r24	; 0x38
    39a0:	17 c0       	rjmp	.+46     	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    39a2:	80 91 00 04 	lds	r24, 0x0400
    39a6:	81 3a       	cpi	r24, 0xA1	; 161
    39a8:	99 f4       	brne	.+38     	; 0x39d0 <MS_Device_ProcessControlRequest+0x74>
    39aa:	80 91 e8 00 	lds	r24, 0x00E8
    39ae:	87 7f       	andi	r24, 0xF7	; 247
    39b0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39b4:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    39b8:	80 ff       	sbrs	r24, 0
    39ba:	fc cf       	rjmp	.-8      	; 0x39b4 <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    39bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    39be:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    39c0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39c4:	80 91 e8 00 	lds	r24, 0x00E8
    39c8:	8e 77       	andi	r24, 0x7E	; 126
    39ca:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    39ce:	41 db       	rcall	.-2430   	; 0x3052 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	08 95       	ret

000039d6 <Serial_SendString>:

void Serial_SendString(const char* StringPtr)
{
    39d6:	fc 01       	movw	r30, r24
    39d8:	07 c0       	rjmp	.+14     	; 0x39e8 <Serial_SendString+0x12>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    39da:	80 91 c8 00 	lds	r24, 0x00C8
    39de:	85 ff       	sbrs	r24, 5
    39e0:	fc cf       	rjmp	.-8      	; 0x39da <Serial_SendString+0x4>
				UDR1 = DataByte;
    39e2:	90 93 ce 00 	sts	0x00CE, r25
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
    39e6:	31 96       	adiw	r30, 0x01	; 1

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
    39e8:	90 81       	ld	r25, Z
    39ea:	99 23       	and	r25, r25
    39ec:	b1 f7       	brne	.-20     	; 0x39da <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
    39ee:	08 95       	ret

000039f0 <__mulsi3>:
    39f0:	62 9f       	mul	r22, r18
    39f2:	d0 01       	movw	r26, r0
    39f4:	73 9f       	mul	r23, r19
    39f6:	f0 01       	movw	r30, r0
    39f8:	82 9f       	mul	r24, r18
    39fa:	e0 0d       	add	r30, r0
    39fc:	f1 1d       	adc	r31, r1
    39fe:	64 9f       	mul	r22, r20
    3a00:	e0 0d       	add	r30, r0
    3a02:	f1 1d       	adc	r31, r1
    3a04:	92 9f       	mul	r25, r18
    3a06:	f0 0d       	add	r31, r0
    3a08:	83 9f       	mul	r24, r19
    3a0a:	f0 0d       	add	r31, r0
    3a0c:	74 9f       	mul	r23, r20
    3a0e:	f0 0d       	add	r31, r0
    3a10:	65 9f       	mul	r22, r21
    3a12:	f0 0d       	add	r31, r0
    3a14:	99 27       	eor	r25, r25
    3a16:	72 9f       	mul	r23, r18
    3a18:	b0 0d       	add	r27, r0
    3a1a:	e1 1d       	adc	r30, r1
    3a1c:	f9 1f       	adc	r31, r25
    3a1e:	63 9f       	mul	r22, r19
    3a20:	b0 0d       	add	r27, r0
    3a22:	e1 1d       	adc	r30, r1
    3a24:	f9 1f       	adc	r31, r25
    3a26:	bd 01       	movw	r22, r26
    3a28:	cf 01       	movw	r24, r30
    3a2a:	11 24       	eor	r1, r1
    3a2c:	08 95       	ret

00003a2e <__udivmodqi4>:
    3a2e:	99 1b       	sub	r25, r25
    3a30:	79 e0       	ldi	r23, 0x09	; 9
    3a32:	04 c0       	rjmp	.+8      	; 0x3a3c <__udivmodqi4_ep>

00003a34 <__udivmodqi4_loop>:
    3a34:	99 1f       	adc	r25, r25
    3a36:	96 17       	cp	r25, r22
    3a38:	08 f0       	brcs	.+2      	; 0x3a3c <__udivmodqi4_ep>
    3a3a:	96 1b       	sub	r25, r22

00003a3c <__udivmodqi4_ep>:
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	7a 95       	dec	r23
    3a40:	c9 f7       	brne	.-14     	; 0x3a34 <__udivmodqi4_loop>
    3a42:	80 95       	com	r24
    3a44:	08 95       	ret

00003a46 <__divmodhi4>:
    3a46:	97 fb       	bst	r25, 7
    3a48:	09 2e       	mov	r0, r25
    3a4a:	07 26       	eor	r0, r23
    3a4c:	0a d0       	rcall	.+20     	; 0x3a62 <__divmodhi4_neg1>
    3a4e:	77 fd       	sbrc	r23, 7
    3a50:	04 d0       	rcall	.+8      	; 0x3a5a <__divmodhi4_neg2>
    3a52:	2e d0       	rcall	.+92     	; 0x3ab0 <__udivmodhi4>
    3a54:	06 d0       	rcall	.+12     	; 0x3a62 <__divmodhi4_neg1>
    3a56:	00 20       	and	r0, r0
    3a58:	1a f4       	brpl	.+6      	; 0x3a60 <__divmodhi4_exit>

00003a5a <__divmodhi4_neg2>:
    3a5a:	70 95       	com	r23
    3a5c:	61 95       	neg	r22
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255

00003a60 <__divmodhi4_exit>:
    3a60:	08 95       	ret

00003a62 <__divmodhi4_neg1>:
    3a62:	f6 f7       	brtc	.-4      	; 0x3a60 <__divmodhi4_exit>
    3a64:	90 95       	com	r25
    3a66:	81 95       	neg	r24
    3a68:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6a:	08 95       	ret

00003a6c <__udivmodsi4>:
    3a6c:	a1 e2       	ldi	r26, 0x21	; 33
    3a6e:	1a 2e       	mov	r1, r26
    3a70:	aa 1b       	sub	r26, r26
    3a72:	bb 1b       	sub	r27, r27
    3a74:	fd 01       	movw	r30, r26
    3a76:	0d c0       	rjmp	.+26     	; 0x3a92 <__udivmodsi4_ep>

00003a78 <__udivmodsi4_loop>:
    3a78:	aa 1f       	adc	r26, r26
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	ee 1f       	adc	r30, r30
    3a7e:	ff 1f       	adc	r31, r31
    3a80:	a2 17       	cp	r26, r18
    3a82:	b3 07       	cpc	r27, r19
    3a84:	e4 07       	cpc	r30, r20
    3a86:	f5 07       	cpc	r31, r21
    3a88:	20 f0       	brcs	.+8      	; 0x3a92 <__udivmodsi4_ep>
    3a8a:	a2 1b       	sub	r26, r18
    3a8c:	b3 0b       	sbc	r27, r19
    3a8e:	e4 0b       	sbc	r30, r20
    3a90:	f5 0b       	sbc	r31, r21

00003a92 <__udivmodsi4_ep>:
    3a92:	66 1f       	adc	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	88 1f       	adc	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	1a 94       	dec	r1
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <__udivmodsi4_loop>
    3a9e:	60 95       	com	r22
    3aa0:	70 95       	com	r23
    3aa2:	80 95       	com	r24
    3aa4:	90 95       	com	r25
    3aa6:	9b 01       	movw	r18, r22
    3aa8:	ac 01       	movw	r20, r24
    3aaa:	bd 01       	movw	r22, r26
    3aac:	cf 01       	movw	r24, r30
    3aae:	08 95       	ret

00003ab0 <__udivmodhi4>:
    3ab0:	aa 1b       	sub	r26, r26
    3ab2:	bb 1b       	sub	r27, r27
    3ab4:	51 e1       	ldi	r21, 0x11	; 17
    3ab6:	07 c0       	rjmp	.+14     	; 0x3ac6 <__udivmodhi4_ep>

00003ab8 <__udivmodhi4_loop>:
    3ab8:	aa 1f       	adc	r26, r26
    3aba:	bb 1f       	adc	r27, r27
    3abc:	a6 17       	cp	r26, r22
    3abe:	b7 07       	cpc	r27, r23
    3ac0:	10 f0       	brcs	.+4      	; 0x3ac6 <__udivmodhi4_ep>
    3ac2:	a6 1b       	sub	r26, r22
    3ac4:	b7 0b       	sbc	r27, r23

00003ac6 <__udivmodhi4_ep>:
    3ac6:	88 1f       	adc	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	5a 95       	dec	r21
    3acc:	a9 f7       	brne	.-22     	; 0x3ab8 <__udivmodhi4_loop>
    3ace:	80 95       	com	r24
    3ad0:	90 95       	com	r25
    3ad2:	bc 01       	movw	r22, r24
    3ad4:	cd 01       	movw	r24, r26
    3ad6:	08 95       	ret

00003ad8 <_exit>:
    3ad8:	f8 94       	cli

00003ada <__stop_program>:
    3ada:	ff cf       	rjmp	.-2      	; 0x3ada <__stop_program>
